// <auto-generated>
//     Generated by the protocol buffer compiler.  DO NOT EDIT!
//     source: proto.proto
// </auto-generated>
#pragma warning disable 1591, 0612, 3021
#region Designer generated code

using pb = global::Google.Protobuf;
using pbc = global::Google.Protobuf.Collections;
using pbr = global::Google.Protobuf.Reflection;
using scg = global::System.Collections.Generic;
namespace com.unity.mgobe {

  /// <summary>Holder for reflection information generated from proto.proto</summary>
  public static partial class ProtoReflection {

    #region Descriptor
    /// <summary>File descriptor for proto.proto</summary>
    public static pbr::FileDescriptor Descriptor {
      get { return descriptor; }
    }
    private static pbr::FileDescriptor descriptor;

    static ProtoReflection() {
      byte[] descriptorData = global::System.Convert.FromBase64String(
          string.Concat(
            "Cgtwcm90by5wcm90bxIPY29tLnVuaXR5Lm1nb2JlIoUCChhDbGllbnRTZW5k",
            "U2VydmVyUmVxV3JhcDESDwoHdmVyc2lvbhgBIAEoCRIQCghhcHBfbmFtZRgC",
            "IAEoCRILCgNjbWQYAyABKAkSCwoDc2VxGAQgASgJEhEKCWNsaWVudF9pcBgF",
            "IAEoCRISCgpzZXJ2aWNlX2lwGAYgASgJEhAKCGJ1c2luZXNzGAcgASgJEhAK",
            "CGF1dGhfa2V5GAggASgJEhEKCWF1dGhfdHlwZRgJIAEoDRIPCgdhdXRoX2lw",
            "GAogASgJEg8KB2dhbWVfaWQYCyABKAkSCwoDdWlkGAwgASgEEhEKCXBsYXll",
            "cl9pZBgNIAEoCRIMCgRib2R5GA4gASgMIoUCChhTZXJ2ZXJTZW5kQ2xpZW50",
            "QnN0V3JhcDESDwoHdmVyc2lvbhgBIAEoCRIQCghhcHBfbmFtZRgCIAEoCRIL",
            "CgNjbWQYAyABKAkSCwoDc2VxGAQgASgJEhEKCWNsaWVudF9pcBgFIAEoCRIS",
            "CgpzZXJ2aWNlX2lwGAYgASgJEhAKCGJ1c2luZXNzGAcgASgJEhAKCGF1dGhf",
            "a2V5GAggASgJEhEKCWF1dGhfdHlwZRgJIAEoDRIPCgdhdXRoX2lwGAogASgJ",
            "Eg8KB2dhbWVfaWQYCyABKAkSCwoDdWlkGAwgASgEEhEKCXBsYXllcl9pZBgN",
            "IAEoCRIMCgRib2R5GA4gASgMIlgKGENsaWVudFNlbmRTZXJ2ZXJSc3BXcmFw",
            "MRILCgNzZXEYASABKAkSEAoIZXJyX2NvZGUYAiABKAUSDwoHZXJyX21zZxgD",
            "IAEoCRIMCgRib2R5GAQgASgMIlAKGENsaWVudFNlbmRTZXJ2ZXJSZXFXcmFw",
            "MhImCgNjbWQYASABKA4yGS5jb20udW5pdHkubWdvYmUuUHJvdG9DbWQSDAoE",
            "Ym9keRgCIAEoDCIoChhDbGllbnRTZW5kU2VydmVyUnNwV3JhcDISDAoEYm9k",
            "eRgBIAEoDCJWCglFdmVudEluZm8SLgoKZXZlbnRfdHlwZRgBIAEoDjIaLmNv",
            "bS51bml0eS5tZ29iZS5FdmVudFR5cGUSCwoDc2VxGAIgASgJEgwKBGJvZHkY",
            "AyABKAwibQoRRXZlbnROZXR3b3JrU3RhdGUSDwoHZ2FtZV9pZBgBIAEoCRIR",
            "CglwbGF5ZXJfaWQYAiABKAkSNAoNbmV0d29ya19zdGF0ZRgDIAEoDjIdLmNv",
            "bS51bml0eS5tZ29iZS5OZXR3b3JrU3RhdGUiUwoMSGVhcnRCZWF0UmVxEjEK",
            "CGNvbl90eXBlGAEgASgOMh8uY29tLnVuaXR5Lm1nb2JlLkNvbm5lY3Rpb25U",
            "eXBlEhAKCHJvdXRlX2lkGAIgASgJIg4KDEhlYXJ0QmVhdFJzcCJkChhTZXJ2",
            "ZXJTZW5kQ2xpZW50QnN0V3JhcDISOwoEdHlwZRgBIAEoDjItLmNvbS51bml0",
            "eS5tZ29iZS5TZXJ2ZXJTZW5kQ2xpZW50QnN0V3JhcDJUeXBlEgsKA21zZxgC",
            "IAEoDCIiCiBOT1VTRVNlcnZlclNlbmRDbGllbnRCc3RSc3BXcmFwMiIwCg1D",
            "aGVja0xvZ2luUmVxEg0KBXRva2VuGAEgASgJEhAKCHJvdXRlX2lkGAIgASgJ",
            "Ig8KDUNoZWNrTG9naW5Sc3AiIAoMUHVzaEJvZHlUeXBlEhAKCHB1c2hfbXNn",
            "GAEgASgJIq0BCghMb2dpblJlcRIPCgdnYW1lX2lkGAEgASgJEg8KB29wZW5f",
            "aWQYAiABKAkSEAoIcGxhdGZvcm0YAyABKAQSDwoHY2hhbm5lbBgEIAEoBBIN",
            "CgVub25jZRgFIAEoBBIRCgl0aW1lc3RhbXAYBiABKAQSDAoEc2lnbhgHIAEo",
            "CRIRCglkZXZpY2VfaWQYCCABKAkSCwoDbWFjGAkgASgJEgwKBGltZWkYCiAB",
            "KAkicAoITG9naW5Sc3ASDQoFdG9rZW4YASABKAkSEQoJcGxheWVyX2lkGAIg",
            "ASgJEhMKC2V4cGlyZV90aW1lGAMgASgEEi0KCXNka0NvbmZpZxgEIAEoCzIa",
            "LmNvbS51bml0eS5tZ29iZS5TZGtDb25maWcizwEKCVNka0NvbmZpZxIVCg1w",
            "aW5nX2ludGVydmFsGAEgASgNEhcKD3JlcG9ydF9pbnRlcnZhbBgCIAEoDRIT",
            "CgtzZXJ2ZXJfdGltZRgDIAEoBBISCgplbmFibGVfdWRwGAQgASgIEhYKDmRp",
            "c2FibGVfcmVwb3J0GAUgASgIEhoKEmRpc2FibGVfcmVxX3JlcG9ydBgGIAEo",
            "CBIcChRkaXNhYmxlX2ZyYW1lX3JlcG9ydBgHIAEoCBIXCg9taW5fcmVwb3J0",
            "X3NpemUYCCABKA0iCwoJTG9nb3V0UmVxIgsKCUxvZ291dFJzcCITChFTdGFy",
            "dEZyYW1lU3luY1JlcSITChFTdGFydEZyYW1lU3luY1JzcCISChBTdG9wRnJh",
            "bWVTeW5jUmVxIhIKEFN0b3BGcmFtZVN5bmNSc3AiPwoJRnJhbWVJdGVtEhEK",
            "CXBsYXllcl9pZBgBIAEoCRIMCgRkYXRhGAIgASgJEhEKCXRpbWVzdGFtcBgD",
            "IAEoBCJJCgxTZW5kRnJhbWVSZXESDwoHcm9vbV9pZBgBIAEoCRIoCgRpdGVt",
            "GAIgASgLMhouY29tLnVuaXR5Lm1nb2JlLkZyYW1lSXRlbSIOCgxTZW5kRnJh",
            "bWVSc3AiHAoMRnJhbWVFeHRJbmZvEgwKBHNlZWQYASABKAQiagoFRnJhbWUS",
            "CgoCaWQYASABKAQSKQoFaXRlbXMYAiADKAsyGi5jb20udW5pdHkubWdvYmUu",
            "RnJhbWVJdGVtEioKA2V4dBgDIAEoCzIdLmNvbS51bml0eS5tZ29iZS5GcmFt",
            "ZUV4dEluZm8iaQoPUmVxdWVzdEZyYW1lUmVxEg8KB3Jvb21faWQYASABKAkS",
            "FgoOYmVnaW5fZnJhbWVfaWQYAiABKAQSFAoMZW5kX2ZyYW1lX2lkGAMgASgE",
            "EhcKD3N1cHBvcnRfcGFydGlhbBgEIAEoCCJNCg9SZXF1ZXN0RnJhbWVSc3AS",
            "JgoGZnJhbWVzGAEgAygLMhYuY29tLnVuaXR5Lm1nb2JlLkZyYW1lEhIKCmlz",
            "X3BhcnRpYWwYAiABKAgiswIKClBsYXllckluZm8SCgoCaWQYASABKAkSDAoE",
            "bmFtZRgCIAEoCRIPCgd0ZWFtX2lkGAMgASgJEhwKFGN1c3RvbV9wbGF5ZXJf",
            "c3RhdHVzGAQgASgEEhYKDmN1c3RvbV9wcm9maWxlGAUgASgJEjsKFGNvbW1v",
            "bl9uZXR3b3JrX3N0YXRlGAYgASgOMh0uY29tLnVuaXR5Lm1nb2JlLk5ldHdv",
            "cmtTdGF0ZRI6ChNyZWxheV9uZXR3b3JrX3N0YXRlGAcgASgOMh0uY29tLnVu",
            "aXR5Lm1nb2JlLk5ldHdvcmtTdGF0ZRIQCghpc19yb2JvdBgIIAEoCBI5ChBt",
            "YXRjaF9hdHRyaWJ1dGVzGAkgAygLMh8uY29tLnVuaXR5Lm1nb2JlLk1hdGNo",
            "QXR0cmlidXRlIk4KCFRlYW1JbmZvEgoKAmlkGAEgASgJEgwKBG5hbWUYAiAB",
            "KAkSEwoLbWluX3BsYXllcnMYAyABKA0SEwoLbWF4X3BsYXllcnMYBCABKA0i",
            "wgMKCFJvb21JbmZvEgoKAmlkGAEgASgJEgwKBG5hbWUYAiABKAkSDAoEdHlw",
            "ZRgDIAEoCRI0CgtjcmVhdGVfdHlwZRgEIAEoDjIfLmNvbS51bml0eS5tZ29i",
            "ZS5DcmVhdGVSb29tVHlwZRITCgttYXhfcGxheWVycxgFIAEoBBINCgVvd25l",
            "chgGIAEoCRISCgppc19wcml2YXRlGAkgASgIEhkKEWN1c3RvbV9wcm9wZXJ0",
            "aWVzGAogASgJEjAKC3BsYXllcl9saXN0GAsgAygLMhsuY29tLnVuaXR5Lm1n",
            "b2JlLlBsYXllckluZm8SLAoJdGVhbV9saXN0GA0gAygLMhkuY29tLnVuaXR5",
            "Lm1nb2JlLlRlYW1JbmZvEjkKEGZyYW1lX3N5bmNfc3RhdGUYDiABKA4yHy5j",
            "b20udW5pdHkubWdvYmUuRnJhbWVTeW5jU3RhdGUSEgoKZnJhbWVfcmF0ZRgP",
            "IAEoDRIQCghyb3V0ZV9pZBgQIAEoCRITCgtjcmVhdGVfdGltZRgRIAEoBBIX",
            "Cg9zdGFydF9nYW1lX3RpbWUYEiABKAQSFgoOaXNfZm9yYmlkX2pvaW4YEyAB",
            "KAgi4AIKDUNyZWF0ZVJvb21SZXESEQoJcm9vbV9uYW1lGAEgASgJEhEKCXJv",
            "b21fdHlwZRgCIAEoCRI0CgtjcmVhdGVfdHlwZRgDIAEoDjIfLmNvbS51bml0",
            "eS5tZ29iZS5DcmVhdGVSb29tVHlwZRITCgttYXhfcGxheWVycxgEIAEoBBIS",
            "Cgppc19wcml2YXRlGAcgASgIEhkKEWN1c3RvbV9wcm9wZXJ0aWVzGAggASgJ",
            "EjAKC3BsYXllcl9pbmZvGAkgASgLMhsuY29tLnVuaXR5Lm1nb2JlLlBsYXll",
            "ckluZm8SDgoGcmVnaW9uGAsgASgJEg0KBW93bmVyGAwgASgJEjAKC3BsYXll",
            "cl9saXN0GA0gAygLMhsuY29tLnVuaXR5Lm1nb2JlLlBsYXllckluZm8SLAoJ",
            "dGVhbV9saXN0GA4gAygLMhkuY29tLnVuaXR5Lm1nb2JlLlRlYW1JbmZvIj0K",
            "DUNyZWF0ZVJvb21Sc3ASLAoJcm9vbV9pbmZvGAEgASgLMhkuY29tLnVuaXR5",
            "Lm1nb2JlLlJvb21JbmZvIpMBCgtKb2luUm9vbVJlcRIPCgdyb29tX2lkGAEg",
            "ASgJEg8KB3RlYW1faWQYAiABKAkSMAoJam9pbl90eXBlGAMgASgOMh0uY29t",
            "LnVuaXR5Lm1nb2JlLkpvaW5Sb29tVHlwZRIwCgtwbGF5ZXJfaW5mbxgEIAEo",
            "CzIbLmNvbS51bml0eS5tZ29iZS5QbGF5ZXJJbmZvIjsKC0pvaW5Sb29tUnNw",
            "EiwKCXJvb21faW5mbxgBIAEoCzIZLmNvbS51bml0eS5tZ29iZS5Sb29tSW5m",
            "byIOCgxMZWF2ZVJvb21SZXEiPAoMTGVhdmVSb29tUnNwEiwKCXJvb21faW5m",
            "bxgBIAEoCzIZLmNvbS51bml0eS5tZ29iZS5Sb29tSW5mbyIQCg5EaXNtaXNz",
            "Um9vbVJlcSIQCg5EaXNtaXNzUm9vbVJzcCK8AQoNQ2hhbmdlUm9vbVJlcRIR",
            "Cglyb29tX25hbWUYASABKAkSDQoFb3duZXIYAiABKAkSEgoKaXNfcHJpdmF0",
            "ZRgFIAEoCBIZChFjdXN0b21fcHJvcGVydGllcxgGIAEoCRIWCg5pc19mb3Ji",
            "aWRfam9pbhgHIAEoCBJCChdjaGFuZ2Vfcm9vbV9vcHRpb25fbGlzdBgIIAMo",
            "DjIhLmNvbS51bml0eS5tZ29iZS5DaGFuZ2VSb29tT3B0aW9uIj0KDUNoYW5n",
            "ZVJvb21Sc3ASLAoJcm9vbV9pbmZvGAQgASgLMhkuY29tLnVuaXR5Lm1nb2Jl",
            "LlJvb21JbmZvItABChBTdnJDaGFuZ2VSb29tUmVxEhEKCXJvb21fbmFtZRgB",
            "IAEoCRINCgVvd25lchgCIAEoCRISCgppc19wcml2YXRlGAUgASgIEhkKEWN1",
            "c3RvbV9wcm9wZXJ0aWVzGAYgASgJEhYKDmlzX2ZvcmJpZF9qb2luGAcgASgI",
            "Eg8KB3Jvb21faWQYCCABKAkSQgoXY2hhbmdlX3Jvb21fb3B0aW9uX2xpc3QY",
            "CSADKA4yIS5jb20udW5pdHkubWdvYmUuQ2hhbmdlUm9vbU9wdGlvbiJAChBT",
            "dnJDaGFuZ2VSb29tUnNwEiwKCXJvb21faW5mbxgEIAEoCzIZLmNvbS51bml0",
            "eS5tZ29iZS5Sb29tSW5mbyIrCg9SZW1vdmVQbGF5ZXJSZXESGAoQcmVtb3Zl",
            "X3BsYXllcl9pZBgDIAEoCSI/Cg9SZW1vdmVQbGF5ZXJSc3ASLAoJcm9vbV9p",
            "bmZvGAEgASgLMhkuY29tLnVuaXR5Lm1nb2JlLlJvb21JbmZvIj8KElN2clJl",
            "bW92ZVBsYXllclJlcRIPCgdyb29tX2lkGAEgASgJEhgKEHJlbW92ZV9wbGF5",
            "ZXJfaWQYAyABKAkiQgoSU3ZyUmVtb3ZlUGxheWVyUnNwEiwKCXJvb21faW5m",
            "bxgBIAEoCzIZLmNvbS51bml0eS5tZ29iZS5Sb29tSW5mbyIlChJHZXRSb29t",
            "QnlSb29tSWRSZXESDwoHcm9vbV9pZBgBIAEoCSJCChJHZXRSb29tQnlSb29t",
            "SWRSc3ASLAoJcm9vbV9pbmZvGAEgASgLMhkuY29tLnVuaXR5Lm1nb2JlLlJv",
            "b21JbmZvIkkKD1NlbmRUb0NsaWVudFJlcRIPCgdyb29tX2lkGAEgASgJEhgK",
            "EHJlY3ZfcGxheWVyX2xpc3QYAiADKAkSCwoDbXNnGAMgASgJIhEKD1NlbmRU",
            "b0NsaWVudFJzcCI7ChtDaGFuZ2VDdXN0b21QbGF5ZXJTdGF0dXNSZXESHAoU",
            "Y3VzdG9tX3BsYXllcl9zdGF0dXMYASABKAQiSwobQ2hhbmdlQ3VzdG9tUGxh",
            "eWVyU3RhdHVzUnNwEiwKCXJvb21faW5mbxgBIAEoCzIZLmNvbS51bml0eS5t",
            "Z29iZS5Sb29tSW5mbyI+Ch5TdnJDaGFuZ2VDdXN0b21QbGF5ZXJTdGF0dXNS",
            "ZXESHAoUY3VzdG9tX3BsYXllcl9zdGF0dXMYASABKAQiTgoeU3ZyQ2hhbmdl",
            "Q3VzdG9tUGxheWVyU3RhdHVzUnNwEiwKCXJvb21faW5mbxgBIAEoCzIZLmNv",
            "bS51bml0eS5tZ29iZS5Sb29tSW5mbyJTChtDaGFuZ2VQbGF5ZXJOZXR3b3Jr",
            "U3RhdGVSZXESNAoNbmV0d29ya19zdGF0ZRgBIAEoDjIdLmNvbS51bml0eS5t",
            "Z29iZS5OZXR3b3JrU3RhdGUiSwobQ2hhbmdlUGxheWVyTmV0d29ya1N0YXRl",
            "UnNwEiwKCXJvb21faW5mbxgBIAEoCzIZLmNvbS51bml0eS5tZ29iZS5Sb29t",
            "SW5mbyJpCg5HZXRSb29tTGlzdFJlcRIPCgdnYW1lX2lkGAEgASgJEg8KB3Bh",
            "Z2Vfbm8YAiABKA0SEQoJcGFnZV9zaXplGAMgASgNEhEKCXJvb21fdHlwZRgE",
            "IAEoCRIPCgdpc19kZXNjGAUgASgIIl4KDkdldFJvb21MaXN0UnNwEg8KB2dh",
            "bWVfaWQYASABKAkSLAoJcm9vbV9saXN0GAIgAygLMhkuY29tLnVuaXR5Lm1n",
            "b2JlLlJvb21JbmZvEg0KBXRvdGFsGAMgASgEIm4KEk1hdGNoUm9vbVNpbXBs",
            "ZVJlcRIRCglyb29tX3R5cGUYASABKAkSEwoLbWF4X3BsYXllcnMYAiABKAQS",
            "MAoLcGxheWVyX2luZm8YAyABKAsyGy5jb20udW5pdHkubWdvYmUuUGxheWVy",
            "SW5mbyJCChJNYXRjaFJvb21TaW1wbGVSc3ASLAoJcm9vbV9pbmZvGAEgASgL",
            "MhkuY29tLnVuaXR5Lm1nb2JlLlJvb21JbmZvIhUKE01hdGNoUm9vbUNvbXBs",
            "ZXhSZXEiFQoTTWF0Y2hSb29tQ29tcGxleFJzcCIXChVNYXRjaFBsYXllcnNT",
            "aW1wbGVSZXEiFwoVTWF0Y2hQbGF5ZXJzU2ltcGxlUnNwIi0KDk1hdGNoQXR0",
            "cmlidXRlEgwKBG5hbWUYASABKAkSDQoFdmFsdWUYAiABKAUi1AIKD01hdGNo",
            "UGxheWVySW5mbxIKCgJpZBgBIAEoCRIMCgRuYW1lGAIgASgJEhwKFGN1c3Rv",
            "bV9wbGF5ZXJfc3RhdHVzGAMgASgEEhYKDmN1c3RvbV9wcm9maWxlGAQgASgJ",
            "EjkKEG1hdGNoX2F0dHJpYnV0ZXMYBSADKAsyHy5jb20udW5pdHkubWdvYmUu",
            "TWF0Y2hBdHRyaWJ1dGUSMgoMbWF0Y2hfc3RhdHVzGAYgASgOMhwuY29tLnVu",
            "aXR5Lm1nb2JlLk1hdGNoU3RhdHVzEg8KB3RlYW1faWQYByABKAkSDgoGcmVn",
            "aW9uGAggASgJEhMKC3RlYW1fbGVhZGVyGAkgASgJEhMKC3Nka192ZXJzaW9u",
            "GAogASgJEhAKCGdyb3VwX2lkGAsgASgJEhEKCXRlYW1fdHlwZRgMIAEoCRIS",
            "CgpyZXF1ZXN0X2lkGA0gASgJItkCChRNYXRjaEdyb3VwUGxheWVySW5mbxIK",
            "CgJpZBgBIAEoCRIMCgRuYW1lGAIgASgJEhwKFGN1c3RvbV9wbGF5ZXJfc3Rh",
            "dHVzGAMgASgEEhYKDmN1c3RvbV9wcm9maWxlGAQgASgJEjkKEG1hdGNoX2F0",
            "dHJpYnV0ZXMYBSADKAsyHy5jb20udW5pdHkubWdvYmUuTWF0Y2hBdHRyaWJ1",
            "dGUSMgoMbWF0Y2hfc3RhdHVzGAYgASgOMhwuY29tLnVuaXR5Lm1nb2JlLk1h",
            "dGNoU3RhdHVzEg8KB3RlYW1faWQYByABKAkSDgoGcmVnaW9uGAggASgJEhMK",
            "C3RlYW1fbGVhZGVyGAkgASgJEhMKC3Nka192ZXJzaW9uGAogASgJEhAKCGdy",
            "b3VwX2lkGAsgASgJEhEKCXRlYW1fdHlwZRgMIAEoCRISCgpyZXF1ZXN0X2lk",
            "GA0gASgJIsQCCg5NYXRjaEdyb3VwSW5mbxIKCgJpZBgBIAEoCRIOCgZsZWFk",
            "ZXIYAiABKAkSFgoOcGxheWVyX2lkX2xpc3QYAyADKAkSOgoQcGxheWVyX2lu",
            "Zm9fbGlzdBgEIAMoCzIgLmNvbS51bml0eS5tZ29iZS5NYXRjaFBsYXllcklu",
            "Zm8SOQoQbWF0Y2hfYXR0cmlidXRlcxgFIAMoCzIfLmNvbS51bml0eS5tZ29i",
            "ZS5NYXRjaEF0dHJpYnV0ZRIOCgZyZWdpb24YBiABKAkSEwoLc2RrX3ZlcnNp",
            "b24YByABKAkSDwoHdGVhbV9pZBgIIAEoCRIRCgl0ZWFtX3R5cGUYDCABKAkS",
            "EgoKcmVxdWVzdF9pZBgNIAEoCRIYChBzdGFydF9tYXRjaF90aW1lGA4gASgE",
            "EhAKCGlzX3JvYm90GA8gASgIIvMBCg1NYXRjaFRlYW1JbmZvEg8KB3RlYW1f",
            "aWQYASABKAkSEQoJdGVhbV9uYW1lGAIgASgJEhMKC3RlYW1fbGVhZGVyGAMg",
            "ASgJEg8KB21lbWJlcnMYBCADKAkSOQoQbWF0Y2hfYXR0cmlidXRlcxgFIAMo",
            "CzIfLmNvbS51bml0eS5tZ29iZS5NYXRjaEF0dHJpYnV0ZRIbChNtZW1iZXJf",
            "c2RrX3ZlcnNpb25zGAYgAygJEhEKCWdyb3VwX2lkcxgHIAMoCRIaChJncm91",
            "cF9zZGtfdmVyc2lvbnMYCCADKAkSEQoJdGVhbV90eXBlGAwgASgJIo8BChJQ",
            "cm9ncmVzc1BsYXllckluZm8SEQoJcGxheWVyX2lkGAEgASgJEhEKCXRlYW1f",
            "bmFtZRgCIAEoCRI5ChBtYXRjaF9hdHRyaWJ1dGVzGAMgAygLMh8uY29tLnVu",
            "aXR5Lm1nb2JlLk1hdGNoQXR0cmlidXRlEhgKEHN0YXJ0X21hdGNoX3RpbWUY",
            "BCABKAQiVAoOTWF0Y2htYWtlclRlYW0SDAoEbmFtZRgBIAEoCRI0CgdwbGF5",
            "ZXJzGAIgAygLMiMuY29tLnVuaXR5Lm1nb2JlLlByb2dyZXNzUGxheWVySW5m",
            "byJSCg5NYXRjaG1ha2VyRGF0YRIQCghtYXRjaF9pZBgBIAEoCRIuCgV0ZWFt",
            "cxgCIAMoCzIfLmNvbS51bml0eS5tZ29iZS5NYXRjaG1ha2VyVGVhbSKcAgoS",
            "TWF0Y2hQbGFjZW1lbnRJbmZvEg8KB2dhbWVfaWQYASABKAkSEgoKbWF0Y2hf",
            "Y29kZRgCIAEoCRIQCghtYXRjaF9pZBgDIAEoCRIxCgR0eXBlGAQgASgOMiMu",
            "Y29tLnVuaXR5Lm1nb2JlLk1hdGNoUGxhY2VtZW50VHlwZRI3Cg9jcmVhdGVf",
            "cm9vbV9yZXEYBSABKAsyHi5jb20udW5pdHkubWdvYmUuQ3JlYXRlUm9vbVJl",
            "cRIcChRtYXRjaG1ha2VyX2RhdGFfanNvbhgGIAEoCRIwCgZzdGF0dXMYCCAB",
            "KA4yIC5jb20udW5pdHkubWdvYmUuUGxhY2VtZW50U3RhdHVzEhMKC3Jlc3Vs",
            "dF9ib2R5GAkgASgMIkwKEU1nb2JlUGxhY2VtZW50Sm9iEjcKD2NyZWF0ZV9y",
            "b29tX3JlcRgBIAEoCzIeLmNvbS51bml0eS5tZ29iZS5DcmVhdGVSb29tUmVx",
            "IkQKFE1nb2JlUGxhY2VtZW50UmVzdWx0EiwKCXJvb21faW5mbxgBIAEoCzIZ",
            "LmNvbS51bml0eS5tZ29iZS5Sb29tSW5mbyJjCg9Hc2VQbGFjZW1lbnRKb2IS",
            "NwoPY3JlYXRlX3Jvb21fcmVxGAEgASgLMh4uY29tLnVuaXR5Lm1nb2JlLkNy",
            "ZWF0ZVJvb21SZXESFwoPbWF0Y2htYWtlcl9kYXRhGAIgASgJIk8KEkdzZVBs",
            "YWNlbWVudFJlc3VsdBI5ChBnc2VfZ2FtZV9zZXNzaW9uGAEgASgLMh8uY29t",
            "LnVuaXR5Lm1nb2JlLkdzZUdhbWVTZXNzaW9uIhgKFlRoaXJkcGFydHlQbGFj",
            "ZW1lbnRKb2IiGwoZVGhpcmRwYXJ0eVBsYWNlbWVudFJlc3VsdCJhChBHc2VQ",
            "bGF5ZXJMYXRlbmN5Eh8KF2xhdGVuY3lfaW5fbWlsbGlzZWNvbmRzGAEgASgN",
            "EhEKCXBsYXllcl9pZBgCIAEoCRIZChFyZWdpb25faWRlbnRpZmllchgDIAEo",
            "CSItCg9Hc2VHYW1lUHJvcGVydHkSCwoDa2V5GAEgASgJEg0KBXZhbHVlGAIg",
            "ASgJIkYKFkdzZVBsYWNlZFBsYXllclNlc3Npb24SEQoJcGxheWVyX2lkGAEg",
            "ASgJEhkKEXBsYXllcl9zZXNzaW9uX2lkGAIgASgJIuIECg5Hc2VHYW1lU2Vz",
            "c2lvbhIUCgxwbGFjZW1lbnRfaWQYASABKAkSJgoeZ2FtZV9zZXJ2ZXJfc2Vz",
            "c2lvbl9xdWV1ZV9uYW1lGAIgASgJEjsKEHBsYXllcl9sYXRlbmNpZXMYAyAD",
            "KAsyIS5jb20udW5pdHkubWdvYmUuR3NlUGxheWVyTGF0ZW5jeRIwCgZzdGF0",
            "dXMYBCABKA4yIC5jb20udW5pdHkubWdvYmUuUGxhY2VtZW50U3RhdHVzEhAK",
            "CGRuc19uYW1lGAUgASgJEh4KFmdhbWVfc2VydmVyX3Nlc3Npb25faWQYBiAB",
            "KAkSIAoYZ2FtZV9zZXJ2ZXJfc2Vzc2lvbl9uYW1lGAcgASgJEiIKGmdhbWVf",
            "c2VydmVyX3Nlc3Npb25fcmVnaW9uGAggASgJEjkKD2dhbWVfcHJvcGVydGll",
            "cxgJIAMoCzIgLmNvbS51bml0eS5tZ29iZS5Hc2VHYW1lUHJvcGVydHkSJAoc",
            "bWF4aW11bV9wbGF5ZXJfc2Vzc2lvbl9jb3VudBgKIAEoDRIgChhnYW1lX3Nl",
            "cnZlcl9zZXNzaW9uX2RhdGEYCyABKAkSEgoKaXBfYWRkcmVzcxgMIAEoCRIM",
            "CgRwb3J0GA0gASgNEhcKD21hdGNobWFrZXJfZGF0YRgOIAEoCRJHChZwbGFj",
            "ZWRfcGxheWVyX3Nlc3Npb25zGA8gAygLMicuY29tLnVuaXR5Lm1nb2JlLkdz",
            "ZVBsYWNlZFBsYXllclNlc3Npb24SEgoKc3RhcnRfdGltZRgQIAEoBBIQCghl",
            "bmRfdGltZRgRIAEoBCKYAQoNUGxhY2VNYXRjaFJlcRILCgNzZXEYASABKAkS",
            "DwoHZ2FtZV9pZBgCIAEoCRIQCghtYXRjaF9pZBgDIAEoCRIxCgR0eXBlGAQg",
            "ASgOMiMuY29tLnVuaXR5Lm1nb2JlLk1hdGNoUGxhY2VtZW50VHlwZRIQCghq",
            "b2JfYm9keRgFIAEoDBISCgptYXRjaF9jb2RlGAYgASgJIlYKDVBsYWNlTWF0",
            "Y2hSc3ASRQoWbWF0Y2hfcGxhY2VtZW50X3Jlc3VsdBgBIAEoCzIlLmNvbS51",
            "bml0eS5tZ29iZS5NYXRjaFBsYWNlbWVudFJlc3VsdCLmAQoUTWF0Y2hQbGFj",
            "ZW1lbnRSZXN1bHQSCwoDc2VxGAEgASgJEg8KB2dhbWVfaWQYAiABKAkSEAoI",
            "bWF0Y2hfaWQYAyABKAkSMQoEdHlwZRgEIAEoDjIjLmNvbS51bml0eS5tZ29i",
            "ZS5NYXRjaFBsYWNlbWVudFR5cGUSMAoGc3RhdHVzGAUgASgOMiAuY29tLnVu",
            "aXR5Lm1nb2JlLlBsYWNlbWVudFN0YXR1cxITCgtyZXN1bHRfYm9keRgGIAEo",
            "DBIQCghlcnJfY29kZRgHIAEoBRISCgptYXRjaF9jb2RlGAggASgJImYKHVVw",
            "ZGF0ZU1hdGNoUGxhY2VtZW50UmVzdWx0UmVxEkUKFm1hdGNoX3BsYWNlbWVu",
            "dF9yZXN1bHQYASABKAsyJS5jb20udW5pdHkubWdvYmUuTWF0Y2hQbGFjZW1l",
            "bnRSZXN1bHQiHwodVXBkYXRlTWF0Y2hQbGFjZW1lbnRSZXN1bHRSc3AifAoS",
            "Q21xUGxhY2VtZW50UmVzdWx0EhQKDHBsYWNlbWVudF9pZBgBIAEoCRI7Cg5w",
            "bGFjZW1lbnRfdHlwZRgCIAEoDjIjLmNvbS51bml0eS5tZ29iZS5NYXRjaFBs",
            "YWNlbWVudFR5cGUSEwoLcmVzdWx0X2JvZHkYAyABKAwiXAoPTWF0Y2hQbGF5",
            "ZXJzUmVxEhIKCm1hdGNoX2NvZGUYAiABKAkSNQoLcGxheWVyX2luZm8YAyAB",
            "KAsyIC5jb20udW5pdHkubWdvYmUuTWF0Y2hQbGF5ZXJJbmZvIiUKD01hdGNo",
            "UGxheWVyc1JzcBISCgptYXRjaF9jb2RlGAEgASgJImQKDU1hdGNoR3JvdXBS",
            "ZXESEgoKbWF0Y2hfY29kZRgBIAEoCRI/ChBwbGF5ZXJfaW5mb19saXN0GAIg",
            "AygLMiUuY29tLnVuaXR5Lm1nb2JlLk1hdGNoR3JvdXBQbGF5ZXJJbmZvIiMK",
            "DU1hdGNoR3JvdXBSc3ASEgoKbWF0Y2hfY29kZRgBIAEoCSIrChBEZXNjcmli",
            "ZU1hdGNoUmVxEhcKD3JlcXVlc3RfaWRfbGlzdBgBIAMoCSKRAwoNTWF0Y2hQ",
            "cm9ncmVzcxISCgpyZXF1ZXN0X2lkGAEgASgJEhYKDnBsYXllcl9pZF9saXN0",
            "GAIgAygJEjoKEHBsYXllcl9pbmZvX2xpc3QYAyADKAsyIC5jb20udW5pdHku",
            "bWdvYmUuTWF0Y2hQbGF5ZXJJbmZvEg4KBnN0YXR1cxgEIAEoCRISCgpldmVu",
            "dF90eXBlGAUgASgNEj0KGHBsYXllcl9pbmZvX3N1Y2Nlc3NfbGlzdBgGIAMo",
            "CzIbLmNvbS51bml0eS5tZ29iZS5QbGF5ZXJJbmZvEjEKDnRlYW1faW5mb19s",
            "aXN0GAcgAygLMhkuY29tLnVuaXR5Lm1nb2JlLlRlYW1JbmZvEhYKDmNvbXBs",
            "ZXRlZF90aW1lGAggASgEEhgKEHN0YXJ0X21hdGNoX3RpbWUYCSABKAQSUAoc",
            "Z2FtZV9zZXNzaW9uX2Nvbm5lY3Rpb25faW5mbxgKIAEoCzIqLmNvbS51bml0",
            "eS5tZ29iZS5HYW1lU2Vzc2lvbkNvbm5lY3Rpb25JbmZvIk8KEERlc2NyaWJl",
            "TWF0Y2hSc3ASOwoTbWF0Y2hfcHJvZ3Jlc3NfbGlzdBgBIAMoCzIeLmNvbS51",
            "bml0eS5tZ29iZS5NYXRjaFByb2dyZXNzIkYKFENhbmNlbFBsYXllck1hdGNo",
            "UmVxEi4KCm1hdGNoX3R5cGUYAyABKA4yGi5jb20udW5pdHkubWdvYmUuTWF0",
            "Y2hUeXBlIhYKFENhbmNlbFBsYXllck1hdGNoUnNwInYKEEFwaU1hdGNoR3Jv",
            "dXBSZXESEgoKbWF0Y2hfY29kZRgBIAEoCRI6ChBwbGF5ZXJfaW5mb19saXN0",
            "GAIgAygLMiAuY29tLnVuaXR5Lm1nb2JlLk1hdGNoUGxheWVySW5mbxISCgpy",
            "ZXF1ZXN0X2lkGAMgASgJIiYKEEFwaU1hdGNoR3JvdXBSc3ASEgoKcmVxdWVz",
            "dF9pZBgBIAEoCSIuChNBcGlEZXNjcmliZU1hdGNoUmVxEhcKD3JlcXVlc3Rf",
            "aWRfbGlzdBgBIAMoCSKRAQoTQXBpRGVzY3JpYmVNYXRjaFJzcBI7ChNtYXRj",
            "aF9wcm9ncmVzc19saXN0GAEgAygLMh4uY29tLnVuaXR5Lm1nb2JlLk1hdGNo",
            "UHJvZ3Jlc3MSDwoHZ2FtZV9pZBgCIAEoCRISCgptYXRjaF9jb2RlGAMgASgJ",
            "EhgKEHN0YXJ0X21hdGNoX3RpbWUYBCABKAQilwEKGUdhbWVTZXNzaW9uQ29u",
            "bmVjdGlvbkluZm8SEAoIZG5zX25hbWUYASABKAkSEgoKaXBfYWRkcmVzcxgC",
            "IAEoCRJGChdtYXRjaGVkX3BsYXllcl9zZXNzaW9ucxgDIAMoCzIlLmNvbS51",
            "bml0eS5tZ29iZS5NYXRjaGVkUGxheWVyU2Vzc2lvbhIMCgRwb3J0GAQgASgD",
            "IkQKFE1hdGNoZWRQbGF5ZXJTZXNzaW9uEhEKCXBsYXllcl9pZBgBIAEoCRIZ",
            "ChFwbGF5ZXJfc2Vzc2lvbl9pZBgCIAEoCSKPAgoTU3RhcnRNYXRjaFBsYWNl",
            "bWVudBIOCgZyZWdpb24YASABKAkSFAoMcGxhY2VtZW50X2lkGAIgASgJEhIK",
            "CnF1ZXVlX25hbWUYAyABKAkSJAocbWF4aW11bV9wbGF5ZXJfc2Vzc2lvbl9j",
            "b3VudBgEIAEoAxJGChdkZXNpcmVkX3BsYXllcl9zZXNzaW9ucxgFIAMoCzIl",
            "LmNvbS51bml0eS5tZ29iZS5EZXNpcmVkUGxheWVyU2Vzc2lvbhI2Cg9nYW1l",
            "X3Byb3BlcnRpZXMYBiADKAsyHS5jb20udW5pdHkubWdvYmUuR2FtZVByb3Bl",
            "cnR5EhgKEG1hdGNoX21ha2VyX2RhdGEYByABKAkiPgoURGVzaXJlZFBsYXll",
            "clNlc3Npb24SEQoJcGxheWVyX2lkGAEgASgJEhMKC3BsYXllcl9kYXRhGAIg",
            "ASgJIioKDEdhbWVQcm9wZXJ0eRILCgNrZXkYASABKAkSDQoFdmFsdWUYAiAB",
            "KAkiYgoXQXBpQ2FuY2VsUGxheWVyTWF0Y2hSZXESLgoKbWF0Y2hfdHlwZRgB",
            "IAEoDjIaLmNvbS51bml0eS5tZ29iZS5NYXRjaFR5cGUSFwoPcmVxdWVzdF9p",
            "ZF9saXN0GAIgAygJIjIKF0FwaUNhbmNlbFBsYXllck1hdGNoUnNwEhcKD3Jl",
            "cXVlc3RfaWRfbGlzdBgBIAMoCSI9Cg1DcmVhdGVSb29tQnN0EiwKCXJvb21f",
            "aW5mbxgBIAEoCzIZLmNvbS51bml0eS5tZ29iZS5Sb29tSW5mbyI+Cg5EZXN0",
            "cm95Um9vbUJzdBIsCglyb29tX2luZm8YASABKAsyGS5jb20udW5pdHkubWdv",
            "YmUuUm9vbUluZm8iUwoLSm9pblJvb21Cc3QSLAoJcm9vbV9pbmZvGAEgASgL",
            "MhkuY29tLnVuaXR5Lm1nb2JlLlJvb21JbmZvEhYKDmpvaW5fcGxheWVyX2lk",
            "GAIgASgJIlUKDExlYXZlUm9vbUJzdBIsCglyb29tX2luZm8YASABKAsyGS5j",
            "b20udW5pdHkubWdvYmUuUm9vbUluZm8SFwoPbGVhdmVfcGxheWVyX2lkGAIg",
            "ASgJIlkKD1JlbW92ZVBsYXllckJzdBIsCglyb29tX2luZm8YASABKAsyGS5j",
            "b20udW5pdHkubWdvYmUuUm9vbUluZm8SGAoQcmVtb3ZlX3BsYXllcl9pZBgC",
            "IAEoCSI+Cg5EaXNtaXNzUm9vbUJzdBIsCglyb29tX2luZm8YASABKAsyGS5j",
            "b20udW5pdHkubWdvYmUuUm9vbUluZm8iPQoNQ2hhbmdlUm9vbUJzdBIsCgly",
            "b29tX2luZm8YASABKAsyGS5jb20udW5pdHkubWdvYmUuUm9vbUluZm8iSQoR",
            "UmVjdkZyb21DbGllbnRCc3QSDwoHcm9vbV9pZBgBIAEoCRIWCg5zZW5kX3Bs",
            "YXllcl9pZBgCIAEoCRILCgNtc2cYAyABKAkigwEKG0NoYW5nZUN1c3RvbVBs",
            "YXllclN0YXR1c0JzdBIYChBjaGFuZ2VfcGxheWVyX2lkGAEgASgJEhwKFGN1",
            "c3RvbV9wbGF5ZXJfc3RhdHVzGAIgASgEEiwKCXJvb21faW5mbxgDIAEoCzIZ",
            "LmNvbS51bml0eS5tZ29iZS5Sb29tSW5mbyKyAQobQ2hhbmdlUGxheWVyTmV0",
            "d29ya1N0YXRlQnN0EhgKEGNoYW5nZV9wbGF5ZXJfaWQYASABKAkSNAoNbmV0",
            "d29ya19zdGF0ZRgCIAEoDjIdLmNvbS51bml0eS5tZ29iZS5OZXR3b3JrU3Rh",
            "dGUSLAoJcm9vbV9pbmZvGAMgASgLMhkuY29tLnVuaXR5Lm1nb2JlLlJvb21J",
            "bmZvEhUKDWdyb3VwX2lkX2xpc3QYBCADKAkiUwoPTWF0Y2hUaW1lb3V0QnN0",
            "Ei4KCm1hdGNoX3R5cGUYASABKA4yGi5jb20udW5pdHkubWdvYmUuTWF0Y2hU",
            "eXBlEhAKCGVycl9jb2RlGAIgASgFIjcKDkNhbmNlbE1hdGNoQnN0EhIKCm1h",
            "dGNoX2NvZGUYASABKAkSEQoJcGxheWVyX2lkGAIgASgJIm8KD01hdGNoUGxh",
            "eWVyc0JzdBIuCgptYXRjaF90eXBlGAEgASgOMhouY29tLnVuaXR5Lm1nb2Jl",
            "Lk1hdGNoVHlwZRIsCglyb29tX2luZm8YAiABKAsyGS5jb20udW5pdHkubWdv",
            "YmUuUm9vbUluZm8iQQoRU3RhcnRGcmFtZVN5bmNCc3QSLAoJcm9vbV9pbmZv",
            "GAEgASgLMhkuY29tLnVuaXR5Lm1nb2JlLlJvb21JbmZvIkAKEFN0b3BGcmFt",
            "ZVN5bmNCc3QSLAoJcm9vbV9pbmZvGAEgASgLMhkuY29tLnVuaXR5Lm1nb2Jl",
            "LlJvb21JbmZvIjUKDFJlY3ZGcmFtZUJzdBIlCgVmcmFtZRgBIAEoCzIWLmNv",
            "bS51bml0eS5tZ29iZS5GcmFtZSJXChRHYW1lU3ZyQ29tbXVuaWNhdGlvbhIx",
            "CgR0eXBlGAEgASgOMiMuY29tLnVuaXR5Lm1nb2JlLkdhbWVTdnJGb3J3YXJk",
            "VHlwZRIMCgRib2R5GAIgASgMIkUKGE5vdGlmeVJlbGF5Q29ubmVjdGlvblJl",
            "cRIPCgdyb29tX2lkGAEgASgJEgoKAmlwGAIgASgJEgwKBHBvcnQYAyABKA0i",
            "XQoSTm90aWZ5Um9vbUV2ZW50UmVxEjoKA2NtZBgBIAEoDjItLmNvbS51bml0",
            "eS5tZ29iZS5TZXJ2ZXJTZW5kQ2xpZW50QnN0V3JhcDJUeXBlEgsKA21zZxgC",
            "IAEoDCJEChBTZW5kVG9HYW1lU3ZyUmVxEg8KB3Jvb21faWQYASABKAkSEQoJ",
            "cGxheWVyX2lkGAIgASgJEgwKBGRhdGEYAyABKAkiEgoQU2VuZFRvR2FtZVN2",
            "clJzcCJQChJSZWN2RnJvbUdhbWVTdnJCc3QSDwoHcm9vbV9pZBgBIAEoCRIb",
            "ChNyZWN2X3BsYXllcl9pZF9saXN0GAIgAygJEgwKBGRhdGEYAyABKAkiGgoY",
            "Q2xpZW50UmVjdkZyb21HYW1lU3ZyUnNwIo8CCglHcm91cEluZm8SCgoCaWQY",
            "ASABKAkSDAoEbmFtZRgCIAEoCRIoCgR0eXBlGAMgASgOMhouY29tLnVuaXR5",
            "Lm1nb2JlLkdyb3VwVHlwZRITCgttYXhfcGxheWVycxgEIAEoBBINCgVvd25l",
            "chgFIAEoCRIZChFjdXN0b21fcHJvcGVydGllcxgGIAEoCRITCgtjcmVhdGVf",
            "dGltZRgHIAEoBBIWCg5pc19mb3JiaWRfam9pbhgIIAEoCBIVCg1pc19wZXJz",
            "aXN0ZW50GAkgASgIEjsKEWdyb3VwX3BsYXllcl9saXN0GAogAygLMiAuY29t",
            "LnVuaXR5Lm1nb2JlLkdyb3VwUGxheWVySW5mbyK3AQoPR3JvdXBQbGF5ZXJJ",
            "bmZvEgoKAmlkGAEgASgJEgwKBG5hbWUYAiABKAkSIgoaY3VzdG9tX2dyb3Vw",
            "X3BsYXllcl9zdGF0dXMYAyABKAQSIwobY3VzdG9tX2dyb3VwX3BsYXllcl9w",
            "cm9maWxlGAQgASgJEkEKGmNvbW1vbl9ncm91cF9uZXR3b3JrX3N0YXRlGAUg",
            "ASgOMh0uY29tLnVuaXR5Lm1nb2JlLk5ldHdvcmtTdGF0ZSLqAQoOQ3JlYXRl",
            "R3JvdXBSZXESEgoKZ3JvdXBfbmFtZRgBIAEoCRIuCgpncm91cF90eXBlGAIg",
            "ASgOMhouY29tLnVuaXR5Lm1nb2JlLkdyb3VwVHlwZRITCgttYXhfcGxheWVy",
            "cxgDIAEoBBIZChFjdXN0b21fcHJvcGVydGllcxgEIAEoCRI1CgtwbGF5ZXJf",
            "aW5mbxgFIAEoCzIgLmNvbS51bml0eS5tZ29iZS5Hcm91cFBsYXllckluZm8S",
            "FgoOaXNfZm9yYmlkX2pvaW4YBiABKAgSFQoNaXNfcGVyc2lzdGVudBgHIAEo",
            "CCJACg5DcmVhdGVHcm91cFJzcBIuCgpncm91cF9pbmZvGAEgASgLMhouY29t",
            "LnVuaXR5Lm1nb2JlLkdyb3VwSW5mbyJXCgxKb2luR3JvdXBSZXESEAoIZ3Jv",
            "dXBfaWQYASABKAkSNQoLcGxheWVyX2luZm8YAiABKAsyIC5jb20udW5pdHku",
            "bWdvYmUuR3JvdXBQbGF5ZXJJbmZvIj4KDEpvaW5Hcm91cFJzcBIuCgpncm91",
            "cF9pbmZvGAEgASgLMhouY29tLnVuaXR5Lm1nb2JlLkdyb3VwSW5mbyIhCg1M",
            "ZWF2ZUdyb3VwUmVxEhAKCGdyb3VwX2lkGAEgASgJIj8KDUxlYXZlR3JvdXBS",
            "c3ASLgoKZ3JvdXBfaW5mbxgBIAEoCzIaLmNvbS51bml0eS5tZ29iZS5Hcm91",
            "cEluZm8iIwoPRGlzbWlzc0dyb3VwUmVxEhAKCGdyb3VwX2lkGAEgASgJIhEK",
            "D0Rpc21pc3NHcm91cFJzcCK+AQoOQ2hhbmdlR3JvdXBSZXESEAoIZ3JvdXBf",
            "aWQYASABKAkSEgoKZ3JvdXBfbmFtZRgCIAEoCRINCgVvd25lchgDIAEoCRIZ",
            "ChFjdXN0b21fcHJvcGVydGllcxgEIAEoCRIWCg5pc19mb3JiaWRfam9pbhgF",
            "IAEoCBJEChhjaGFuZ2VfZ3JvdXBfb3B0aW9uX2xpc3QYBiADKA4yIi5jb20u",
            "dW5pdHkubWdvYmUuQ2hhbmdlR3JvdXBPcHRpb24iQAoOQ2hhbmdlR3JvdXBS",
            "c3ASLgoKZ3JvdXBfaW5mbxgBIAEoCzIaLmNvbS51bml0eS5tZ29iZS5Hcm91",
            "cEluZm8iQgoUUmVtb3ZlR3JvdXBQbGF5ZXJSZXESEAoIZ3JvdXBfaWQYASAB",
            "KAkSGAoQcmVtb3ZlX3BsYXllcl9pZBgCIAEoCSJGChRSZW1vdmVHcm91cFBs",
            "YXllclJzcBIuCgpncm91cF9pbmZvGAEgASgLMhouY29tLnVuaXR5Lm1nb2Jl",
            "Lkdyb3VwSW5mbyIoChRHZXRHcm91cEJ5R3JvdXBJZFJlcRIQCghncm91cF9p",
            "ZBgBIAEoCSJGChRHZXRHcm91cEJ5R3JvdXBJZFJzcBIuCgpncm91cF9pbmZv",
            "GAEgASgLMhouY29tLnVuaXR5Lm1nb2JlLkdyb3VwSW5mbyIQCg5HZXRNeUdy",
            "b3Vwc1JlcSJFCg5HZXRNeUdyb3Vwc1JzcBIzCg9ncm91cF9pbmZvX2xpc3QY",
            "ASADKAsyGi5jb20udW5pdHkubWdvYmUuR3JvdXBJbmZvIlgKIENoYW5nZUN1",
            "c3RvbUdyb3VwUGxheWVyU3RhdHVzUmVxEhAKCGdyb3VwX2lkGAEgASgJEiIK",
            "GmN1c3RvbV9ncm91cF9wbGF5ZXJfc3RhdHVzGAIgASgEIlIKIENoYW5nZUN1",
            "c3RvbUdyb3VwUGxheWVyU3RhdHVzUnNwEi4KCmdyb3VwX2luZm8YASABKAsy",
            "Gi5jb20udW5pdHkubWdvYmUuR3JvdXBJbmZvIoIBChRTZW5kVG9Hcm91cENs",
            "aWVudFJlcRIQCghncm91cF9pZBgBIAEoCRIYChByZWN2X3BsYXllcl9saXN0",
            "GAIgAygJEgsKA21zZxgDIAEoCRIxCglyZWN2X3R5cGUYBCABKA4yHi5jb20u",
            "dW5pdHkubWdvYmUuR3JvdXBSZWN2VHlwZSIWChRTZW5kVG9Hcm91cENsaWVu",
            "dFJzcCI4CgxHcm91cFBsYXllcnMSEAoIZ3JvdXBfaWQYASABKAkSFgoOcGxh",
            "eWVyX2lkX2xpc3QYAiADKAkihAEKG0NoYW5nZUdyb3VwUGxheWVyTmV0d29y",
            "a1JlcRI0Cg1uZXR3b3JrX3N0YXRlGAEgASgOMh0uY29tLnVuaXR5Lm1nb2Jl",
            "Lk5ldHdvcmtTdGF0ZRIRCglwbGF5ZXJfaWQYAiABKAkSDwoHZ2FtZV9pZBgD",
            "IAEoCRILCgNzZXEYBCABKAkiUwobQ2hhbmdlR3JvdXBQbGF5ZXJOZXR3b3Jr",
            "UnNwEjQKDWdyb3VwX3BsYXllcnMYASADKAsyHS5jb20udW5pdHkubWdvYmUu",
            "R3JvdXBQbGF5ZXJzIlYKDEpvaW5Hcm91cEJzdBIuCgpncm91cF9pbmZvGAEg",
            "ASgLMhouY29tLnVuaXR5Lm1nb2JlLkdyb3VwSW5mbxIWCg5qb2luX3BsYXll",
            "cl9pZBgCIAEoCSJYCg1MZWF2ZUdyb3VwQnN0Ei4KCmdyb3VwX2luZm8YASAB",
            "KAsyGi5jb20udW5pdHkubWdvYmUuR3JvdXBJbmZvEhcKD2xlYXZlX3BsYXll",
            "cl9pZBgCIAEoCSJBCg9EaXNtaXNzR3JvdXBCc3QSLgoKZ3JvdXBfaW5mbxgB",
            "IAEoCzIaLmNvbS51bml0eS5tZ29iZS5Hcm91cEluZm8iQAoOQ2hhbmdlR3Jv",
            "dXBCc3QSLgoKZ3JvdXBfaW5mbxgBIAEoCzIaLmNvbS51bml0eS5tZ29iZS5H",
            "cm91cEluZm8iYAoUUmVtb3ZlR3JvdXBQbGF5ZXJCc3QSLgoKZ3JvdXBfaW5m",
            "bxgBIAEoCzIaLmNvbS51bml0eS5tZ29iZS5Hcm91cEluZm8SGAoQcmVtb3Zl",
            "X3BsYXllcl9pZBgCIAEoCSKiAQogQ2hhbmdlR3JvdXBQbGF5ZXJOZXR3b3Jr",
            "U3RhdGVCc3QSLgoKZ3JvdXBfaW5mbxgBIAEoCzIaLmNvbS51bml0eS5tZ29i",
            "ZS5Hcm91cEluZm8SGAoQY2hhbmdlX3BsYXllcl9pZBgCIAEoCRI0Cg1uZXR3",
            "b3JrX3N0YXRlGAMgASgOMh0uY29tLnVuaXR5Lm1nb2JlLk5ldHdvcmtTdGF0",
            "ZSKQAQogQ2hhbmdlQ3VzdG9tR3JvdXBQbGF5ZXJTdGF0dXNCc3QSLgoKZ3Jv",
            "dXBfaW5mbxgBIAEoCzIaLmNvbS51bml0eS5tZ29iZS5Hcm91cEluZm8SGAoQ",
            "Y2hhbmdlX3BsYXllcl9pZBgCIAEoCRIiChpjdXN0b21fZ3JvdXBfcGxheWVy",
            "X3N0YXR1cxgDIAEoBCJPChZSZWN2RnJvbUdyb3VwQ2xpZW50QnN0EhAKCGdy",
            "b3VwX2lkGAEgASgJEhYKDnNlbmRfcGxheWVyX2lkGAIgASgJEgsKA21zZxgD",
            "IAEoCSonCg5Db25uZWN0aW9uVHlwZRIKCgZDT01NT04QABIJCgVSRUxBWRAB",
            "KjAKCUV2ZW50VHlwZRIOCgpFVF9Vbmtub3duEAASEwoPRVRfTmV0d29ya1N0",
            "YXRlEAEqkgYKHFNlcnZlclNlbmRDbGllbnRCc3RXcmFwMlR5cGUSFAoQRV9Q",
            "VVNIX1RZUEVfVEVTVBAAEhUKEUVfUFVTSF9UWVBFX1JFTEFZEAESFwoTRV9Q",
            "VVNIX1RZUEVfR0FNRVNWUhACEhkKFUVfUFVTSF9UWVBFX0pPSU5fUk9PTRBk",
            "EhoKFkVfUFVTSF9UWVBFX0xFQVZFX1JPT00QZRIcChhFX1BVU0hfVFlQRV9E",
            "SVNNSVNTX1JPT00QZhIdChlFX1BVU0hfVFlQRV9SRU1PVkVfUExBWUVSEGcS",
            "JAogRV9QVVNIX1RZUEVfTU9ESUZZX1JPT01fUFJPUEVSVFkQaBIdChlFX1BV",
            "U0hfVFlQRV9ORVRXT1JLX1NUQVRFEGkSGQoVRV9QVVNIX1RZUEVfUk9PTV9D",
            "SEFUEGoSHAoYRV9QVVNIX1RZUEVfUExBWUVSX1NUQVRFEGsSGgoWRV9QVVNI",
            "X1RZUEVfU1RBUlRfR0FNRRBsEhkKFUVfUFVTSF9UWVBFX1NUT1BfR0FNRRBt",
            "EhsKF0VfUFVTSF9UWVBFX0NSRUFURV9ST09NEG4SHAoYRV9QVVNIX1RZUEVf",
            "REVTVFJPWV9ST09NEG8SHgoZRV9QVVNIX1RZUEVfTUFUQ0hfU1VDQ0VTUxDI",
            "ARIeChlFX1BVU0hfVFlQRV9NQVRDSF9USU1FT1VUEMkBEh0KGEVfUFVTSF9U",
            "WVBFX01BVENIX0NBTkNFTBDKARIbChZFX1BVU0hfVFlQRV9KT0lOX0dST1VQ",
            "EPQDEhwKF0VfUFVTSF9UWVBFX0xFQVZFX0dST1VQEPUDEh4KGUVfUFVTSF9U",
            "WVBFX0RJU01JU1NfR1JPVVAQ9gMSJgohRV9QVVNIX1RZUEVfTU9ESUZZX0dS",
            "T1VQX1BST1BFUlRZEPcDEiQKH0VfUFVTSF9UWVBFX1JFTU9WRV9HUk9VUF9Q",
            "TEFZRVIQ+AMSIwoeRV9QVVNIX1RZUEVfR1JPVVBfUExBWUVSX1NUQVRFEPkD",
            "EhsKFkVfUFVTSF9UWVBFX0dST1VQX0NIQVQQ+gMqqQ4KCFByb3RvQ21kEhEK",
            "DUVfQ01EX0lOVkFMSUQQABIYChRFX0NNRF9IRUFSVF9CRUFUX1JFURBkEhkK",
            "FUVfQ01EX0NIRUNLX0xPR0lOX1JFURBlEhsKF0VfQ01EX0xPR0lOX1RPX1JP",
            "T01fUkVREGYSHgoaRV9DTURfRk9SV0FSRF9UT19SRUxBWV9SRVEQZxIUCg9F",
            "X0NNRF9MT0dJTl9SRVEQ6AcSFQoQRV9DTURfTE9HT1VUX1JFURDpBxITCg5F",
            "X0NNRF9BVVRIX1JFURDqBxIhChxFX0NNRF9RVUVSWV9CWV9QTEFZRVJfSURf",
            "UkVREOsHEh8KGkVfQ01EX1FVRVJZX0JZX0dBTUVfSURfUkVREOwHEh4KGUVf",
            "Q01EX0dFVF9ST09NX0RFVEFJTF9SRVEQ0Q8SGAoTRV9DTURfSk9JTl9ST09N",
            "X1JFURDSDxIYChNFX0NNRF9RVUlUX1JPT01fUkVRENMPEhoKFUVfQ01EX0NS",
            "RUFURV9ST09NX1JFURDUDxIbChZFX0NNRF9ERVNUT1JZX1JPT01fUkVRENUP",
            "EhwKF0VfQ01EX1JFTU9WRV9NRU1CRVJfUkVRENYPEiQKH0VfQ01EX0NIQU5H",
            "RV9ST09NX1BST1BFUlRJU19SRVEQ1w8SHAoXRV9DTURfRElTU01JU1NfUk9P",
            "TV9SRVEQ2A8SIgodRV9DTURfQ0hBTkdFX1BMQVlFUl9TVEFURV9SRVEQ2Q8S",
            "KgolRV9DTURfQ0hBTkdFX1BMQVlFUl9ORVRXT1JLX1NUQVRFX1JFURDaDxIY",
            "ChNFX0NNRF9ST09NX0NIQVRfUkVRENsPEh8KGkVfQ01EX1NUQVJUX0ZSQU1F",
            "X1NZTkNfUkVRENwPEh4KGUVfQ01EX1NUT1BfRlJBTUVfU1lOQ19SRVEQ3Q8S",
            "HAoXRV9DTURfR0VUX1JPT01fTElTVF9SRVEQ3g8SIAobRV9DTURfU1ZSX1JF",
            "TU9WRV9NRU1CRVJfUkVREN8PEigKI0VfQ01EX1NWUl9DSEFOR0VfUk9PTV9Q",
            "Uk9QRVJUSVNfUkVREOAPEiYKIUVfQ01EX1NWUl9DSEFOR0VfUExBWUVSX1NU",
            "QVRFX1JFURDhDxIfChpFX0NNRF9HRVRfUk9PTV9MSVNUX1YyX1JFURDiDxIq",
            "CiVFX0NNRF9DUkVBVEVfUk9PTV9GT1JfVEhJUkRfUEFSVFlfUkVREOMPEiAK",
            "G0VfQ01EX01BVENIX1JPT01fU0lNUExFX1JFURC5FxIgChtFX0NNRF9NQVRD",
            "SF9VU0VSX1NJTVBMRV9SRVEQuhcSIQocRV9DTURfTUFUQ0hfQ0FOQ0VMX01B",
            "VENIX1JFURC7FxIhChxFX0NNRF9NQVRDSF9ST09NX0NPTVBMRVhfUkVRELwX",
            "EiMKHkVfQ01EX01BVENIX1BMQVlFUl9DT01QTEVYX1JFURC9FxIaChVFX0NN",
            "RF9NQVRDSF9HUk9VUF9SRVEQvhcSHwoaRV9DTURfUkVMQVlfU0VORF9GUkFN",
            "RV9SRVEQoB8SIgodRV9DTURfUkVMQVlfUkVRVUVTVF9GUkFNRV9SRVEQoR8S",
            "KgolRV9DTURfUkVMQVlfQ0xJRU5UX1NFTkRUT19HQU1FU1ZSX1JFURCiHxIt",
            "CihFX0NNRF9SRUxBWV9DTElFTlRfUkVDVl9GUk9NX0dBTUVTVlJfUkVREKMf",
            "EhsKFkVfQ01EX05PVElGWV9KT0lOX1JPT00QiCcSGwoWRV9DTURfTk9USUZZ",
            "X1FVSVRfUk9PTRCJJxIeChlFX0NNRF9OT1RJRllfREVTVE9SWV9ST09NEIon",
            "EhsKFkVfQ01EX05PVElGWV9ORVRfU1RBVEUQiycSHQoYRV9DTURfTk9USUZZ",
            "X0tJQ0tfTUVNQkVSEIwnEiQKH0VfQ01EX0dFVF9BRERSX0JZX1JPVVRFUl9J",
            "RF9SRVEQ8C4SHwoaRV9DTURfR0VUX0dST1VQX0RFVEFJTF9SRVEQ2TYSGQoU",
            "RV9DTURfSk9JTl9HUk9VUF9SRVEQ2jYSGQoURV9DTURfUVVJVF9HUk9VUF9S",
            "RVEQ2zYSGwoWRV9DTURfQ1JFQVRFX0dST1VQX1JFURDcNhIiCh1FX0NNRF9S",
            "RU1PVkVfR1JPVVBfTUVNQkVSX1JFURDdNhImCiFFX0NNRF9DSEFOR0VfR1JP",
            "VVBfUFJPUEVSVElFU19SRVEQ3jYSHAoXRV9DTURfRElTTUlTU19HUk9VUF9S",
            "RVEQ3zYSKAojRV9DTURfQ0hBTkdFX0dST1VQX1BMQVlFUl9TVEFURV9SRVEQ",
            "4DYSMAorRV9DTURfQ0hBTkdFX0dST1VQX1BMQVlFUl9ORVRXT1JLX1NUQVRF",
            "X1JFURDhNhIZChRFX0NNRF9HUk9VUF9DSEFUX1JFURDiNhIdChhFX0NNRF9H",
            "RVRfR1JPVVBfTElTVF9SRVEQ4zYq4kQKEFFBcHBQcm90b0VyckNvZGUSCQoF",
            "RUNfT0sQABISCg5FQ19SRVFfQkFEX1BLRxABEhIKDkVDX0NNRF9JTlZBTElE",
            "EAISFQoRRUNfUEFSQU1TX0lOVkFMSUQQAxISCg5FQ19JTk5FUl9FUlJPUhAE",
            "Eg8KC0VDX1RJTUVfT1VUEAUSEgoORUNfU0VSVkVSX0JVU1kQBhIPCgtFQ19O",
            "T19SSUdIVBAHEh4KGUVDX0FDQ0VTU19DTURfSU5WQUxJRF9FUlIQyAESIAob",
            "RUNfQUNDRVNTX0NNRF9HRVRfVE9LRU5fRVJSEMkBEiMKHkVDX0FDQ0VTU19D",
            "TURfVE9LRU5fUFJFX0VYUElSRRDKARIgChtFQ19BQ0NFU1NfQ01EX0lOVkFM",
            "SURfVE9LRU4QywESIQocRUNfQUNDRVNTX1BVU0hfU0VSSUFMSVpFX0VSUhDM",
            "ARIjCh5FQ19BQ0NFU1NfTE9HSU5fQk9EWV9QQVJTRV9FUlIQzQESFwoSRUNf",
            "QUNDRVNTX0NPTk5fRVJSEM4BEhwKF0VDX0FDQ0VTU19HRVRfUlNfSVBfRVJS",
            "EM8BEiAKG0VDX0FDQ0VTU19BRERfQ09NTV9DT05OX0VSUhDQARIhChxFQ19B",
            "Q0NFU1NfQUREX0hFQVJUX0NPTk5fRVJSENEBEiEKHEVDX0FDQ0VTU19BRERf",
            "UkVMQVlfQ09OTl9FUlIQ0gESIwoeRUNfQUNDRVNTX0hFQVJUX0JPRFlfUEFS",
            "U0VfRVJSENMBEiMKHkVDX0FDQ0VTU19HRVRfQ09NTV9DT05ORUNUX0VSUhDU",
            "ARIkCh9FQ19BQ0NFU1NfR0VUX1JFTEFZX0NPTk5FQ1RfRVJSENUBEiAKG0VD",
            "X0FDQ0VTU19BQ0NFU1NfSU5GT19FTVBUWRDWARIlCiBFQ19BQ0NFU1NfUExB",
            "WUVSX0RVUExJQ0FURV9MT0dJThDXARIlCiBFQ19BQ0NFU1NfTk9FX1JFTEFZ",
            "X09SX1NUQVRFX1NWUhDYARIdChhFQ19QTEFZRVJfR0FNRV9OT1RfRVhJU1QQ",
            "kE4SHgoZRUNfUExBWUVSX1NFQ1JFVF9LRVlfRkFJTBCRThIXChJFQ19QTEFZ",
            "RVJfU0lHTl9FUlIQkk4SHAoXRUNfUExBWUVSX0RVUExJQ0FURV9SRVEQk04S",
            "IAobRUNfUExBWUVSX1RJTUVTVEFNUF9JTlZBTElEEJROEiAKG0VDX1BMQVlF",
            "Ul9RVUVSWV9QTEFZRVJfRkFJTBCVThIeChlFQ19QTEFZRVJfQUREX1BMQVlF",
            "Ul9GQUlMEJZOEh4KGUVDX1BMQVlFUl9RVUVSWV9HQU1FX0ZBSUwQl04SHQoY",
            "RUNfUExBWUVSX1JFQ09SRF9OVU1fRVJSEJhOEh0KGEVDX1BMQVlFUl9HRVRf",
            "VE9LRU5fRkFJTBCZThIeChlFQ19QTEFZRVJfVE9LRU5fTk9UX0VYSVNUEJpO",
            "EhwKF0VDX1BMQVlFUl9UT0tFTl9JTlZBTElEEJtOEh8KGkVDX1BMQVlFUl9D",
            "TEVBUl9UT0tFTl9GQUlMEJxOEhgKE0VDX1BMQVlFUl9MT0NLX0ZBSUwQnU4S",
            "GgoVRUNfUExBWUVSX1VOTE9DS19GQUlMEJ5OEh4KGUVDX1BMQVlFUl9TQVZF",
            "X1RPS0VOX0ZBSUwQn04SIgodRUNfUExBWUVSX0dBTUVfT1VUX09GX1NFUlZJ",
            "Q0UQoE4SIgocRUNfUk9PTV9DUkVBVEVfTk9fUEVSTUlTU0lPThCgnAESIwod",
            "RUNfUk9PTV9ERVNUT1JZX05PX1BFUk1JU1NJT04QoZwBEiAKGkVDX1JPT01f",
            "Sk9JTl9OT19QRVJNSVNTSU9OEKKcARIpCiNFQ19ST09NX1JFTU9WRV9QTEFZ",
            "RVJfTk9fUEVSTUlTU0lPThCjnAESLAomRUNfUk9PTV9NT0RJRllfUFJPUEVS",
            "VElFU19OT19QRU1JU1NJT04QpJwBEiQKHkVDX1JPT01fRElTU01JU1NfTk9f",
            "UEVSTUlTU0lPThClnAESJwohRUNfUk9PTV9SRU1PVkVfU0VMRl9OT19QRVJN",
            "SVNTSU9OEKacARIlCh9FQ19ST09NX0NIRUNLX0xPR0lOX1NFU1NJT05fRVJS",
            "EKecARInCiFFQ19ST09NX1JFTU9WRV9QTEFZRVJfTk9UX0lOX1JPT00QqJwB",
            "EiQKHkVDX1JPT01fUExBWUVSX0FMUkVBRFlfSU5fUk9PTRCqnAESIAoaRUNf",
            "Uk9PTV9QTEFZRVJfTk9UX0lOX1JPT00Qq5wBEiIKHEVDX1JPT01fUExBWUVS",
            "U19FWENFRURfTElNSVQQrJwBEhwKFkVDX1JPT01fSk9JTl9OT1RfQUxMT1cQ",
            "rZwBEiEKG0VDX1JPT01fTUFYX1BMQVlFUlNfSU5WQUxJRBCunAESGQoTRUNf",
            "Uk9PTV9DUkVBVEVfRkFJTBCvnAESHAoWRUNfUk9PTV9QTEFZRVJfT0ZGTElO",
            "RRCwnAESIAoaRUNfUk9PTV9QQVJBTV9QQUdFX0lOVkFMSUQQsZwBEiEKG0VD",
            "X1JPT01fR0VUX1BMQVlFUl9JTkZPX0VSUhDSnAESHwoZRUNfUk9PTV9HRVRf",
            "Uk9PTV9JTkZPX0VSUhDTnAESHgoYRUNfUk9PTV9NT0RJRllfT1dORVJfRVJS",
            "ENScARIqCiRFQ19ST09NX01BWF9ST09NX05VTUJFUl9FWENFRURfTElNSVQQ",
            "1ZwBEjcKKkVDX1JPT01fUkVNT1ZFX1JFRElTX1BMQVlFUl9ST09NX01BVENI",
            "X0VSUhCs4/7///////8BEi8KIkVDX1JPT01fUkVNT1ZFX1JFRElTX1JPT01f",
            "SU5GT19FUlIQq+P+////////ARIlChhFQ19ST09NX1JFRElTX1VQREFURV9F",
            "UlIQquP+////////ARInChpFQ19ST09NX1JFRElTX0dFVF9MT0NLX0VSUhCp",
            "4/7///////8BEikKHEVDX1JPT01fUkVESVNfQ0hFQ0tfTE9DS19FUlIQqOP+",
            "////////ARInChpFQ19ST09NX1JFRElTX0RFTF9MT0NLX0VSUhCn4/7/////",
            "//8BEh4KGEVDX1JPT01fUVVFUllfUExBWUVSX0VSUhDcnAESHAoWRUNfUk9P",
            "TV9RVUVSWV9HQU1FX0VSUhDdnAESIwodRUNfUk9PTV9QTEFZRVJfSU5GT19O",
            "T1RfRVhJU1QQ3pwBEiEKG0VDX1JPT01fR0FNRV9JTkZPX05PVF9FWElTVBDf",
            "nAESLAofRUNfUk9PTV9ISVNUT1JZX0lORk9fSU5TRVJUX0VSUhCg4/7/////",
            "//8BEiMKHUVDX1JPT01fUkVHSU9OX0lORk9fTk9UX0VYSVNUEOGcARIeChhF",
            "Q19ST09NX1FVRVJZX1JFR0lPTl9FUlIQ4pwBEiAKGkVDX1JPT01fTU9ESUZZ",
            "X1BMQVlFUl9CVVNZEOacARIaChRFQ19ST09NX0lORk9fVU5FWElTVBDwnAES",
            "KwolRUNfUk9PTV9BTExPQ0FURV9SRUxBWVNWUl9JUF9QT1JUX0VSUhD6nAES",
            "JAoeRUNfUk9PTV9JTlZBTElEX1BBUkFNU19URUFNX0lEEISdARImCiBFQ19S",
            "T09NX1RFQU1fTUVNQkVSX0xJTUlUX0VYQ0VFRBCFnQESKgodRUNfUk9PTV9B",
            "TExPQ0FURV9TRVJWSUNFX0ZBSUwQmOL+////////ARIWChBFQ19NQVRDSF9O",
            "T19ST09NELDqARIWChBFQ19NQVRDSF9USU1FT1VUELHqARIYChJFQ19NQVRD",
            "SF9MT0dJQ19FUlIQsuoBEhIKDEVDX01BVENIX0VSUhC66gESIQobRUNfTUFU",
            "Q0hfUExBWUVSX0lTX0lOX01BVENIELvqARIiChxFQ19NQVRDSF9QTEFZRVJf",
            "Tk9UX0lOX01BVENIELzqARIhChtFQ19NQVRDSF9HRVRfTUFUQ0hfSU5GT19F",
            "UlIQveoBEiQKHkVDX01BVENIX1VQREFURV9NQVRDSF9JTkZPX0VSUhC+6gES",
            "HAoWRUNfTUFUQ0hfQ0FOQ0VMX0ZBSUxFRBC/6gESJwohRUNfTUFUQ0hfR0VU",
            "X1BMQVlFUl9MSVNUX0lORk9fRVJSEMDqARIeChhFQ19NQVRDSF9DUkVBVEVf",
            "Uk9PTV9FUlIQ2eoBEhwKFkVDX01BVENIX0pPSU5fUk9PTV9FUlIQ2uoBEh0K",
            "F0VDX01BVENIX0lOVkFMSURfUEFSQU1TENvqARIlCh9FQ19NQVRDSF9HUk9V",
            "UF9OVU1fRVhDRUVEX0xJTUlUENzqARIkCh5FQ19NQVRDSF9QTEFZRVJfSURf",
            "SVNfUkVQRUFURUQQ3eoBEjEKK0VDX01BVENIX0NSRUFURV9ST09NX1BMQVlF",
            "Ul9BTFJFQURZX0lOX1JPT00Q4uoBEh8KGUVDX01BVENIX1FVRVJZX1BMQVlF",
            "Ul9FUlIQlOsBEiQKHkVDX01BVENIX1BMQVlFUl9JTkZPX05PVF9FWElTVBCV",
            "6wESHQoXRUNfTUFUQ0hfUVVFUllfR0FNRV9FUlIQlusBEiIKHEVDX01BVENI",
            "X0dBTUVfSU5GT19OT1RfRVhJU1QQl+sBEh8KGUVDX01BVENIX1FVRVJZX1JF",
            "R0lPTl9FUlIQmOsBEiQKHkVDX01BVENIX1JFR0lPTl9JTkZPX05PVF9FWElT",
            "VBCZ6wESGAoSRUNfTUFUQ0hfVEVBTV9GQUlMEJrrARIkCh5FQ19NQVRDSF9Q",
            "TEFZX1JVTEVfTk9UX1JVTk5JTkcQm+sBEiIKHEVDX01BVENIX1BMQVlfQVRU",
            "Ul9OT1RfRk9VTkQQnOsBEiIKHEVDX01BVENIX1BMQVlfUlVMRV9OT1RfRk9V",
            "TkQQnesBEi8KKUVDX01BVENIX1BMQVlfUlVMRV9BVFRSX1NFR01FTlRfTk9U",
            "X0ZPVU5EEJ7rARIhChtFQ19NQVRDSF9QTEFZX1JVTEVfRlVOQ19FUlIQn+sB",
            "EiMKHUVDX01BVENIX0dFVF9QTEFZRVJfQVRUUl9GQUlMEKDrARIhChtFQ19N",
            "QVRDSF9HRVRfVEVBTV9BVFRSX0ZBSUwQoesBEiEKG0VDX01BVENIX05PTkVf",
            "VEVBTV9UWVBFX0ZJVBCi6wESIAoaRUNfTUFUQ0hfVEVBTV9UWVBFX0lOVkFM",
            "SUQQo+sBEiQKHkVDX01BVENIX1BMQVlFUl9BVFRSX05PVF9GT1VORBCk6wES",
            "IwodRUNfTUFUQ0hfUkVRVUVTVF9JRF9OT1RfRVhJU1QQpesBEiIKHEVDX01B",
            "VENIX1JFUVVFU1RfSURfSVNfRVhJU1QQpusBEh4KGEVDX01BVENIX1RFQU1f",
            "TUFUQ0hfRkFJTBCn6wESJAoeRUNfTUFUQ0hfUk9CT1RfR1JPVVBfTk9UX1JJ",
            "R0hUEKjrARIjCh1FQ19NQVRDSF9ST0JPVF9URUFNX05PVF9SSUdIVBCp6wES",
            "JQoYRUNfTUFUQ0hfSU5ORVJfTE9HSUNfRVJSELqU/v///////wESJgoZRUNf",
            "TUFUQ0hfSU5ORVJfUEFSQU1TX0VSUhCwlP7///////8BEi0KIEVDX01BVENI",
            "X1JPT01fSU5ORVJfQUREX05PREVfRVJSEKaU/v///////wESLQogRUNfTUFU",
            "Q0hfUk9PTV9JTk5FUl9ERUxfTk9ERV9FUlIQpZT+////////ARIpChxFQ19N",
            "QVRDSF9SRVNVTFRfVFlQRV9OT1RfR1NFEKSU/v///////wESHwoZRUNfTUFU",
            "Q0hfUkVRVUVTVF9DQU5DRUxFRBDd6wESHQoXRUNfUkVMQVlfQUxSRUFEWV9F",
            "WElTVFMQwLgCEhkKE0VDX1JFTEFZX05PVF9FWElTVFMQwbgCEiIKHEVDX1JF",
            "TEFZX0RBVEFfRVhDRUVEX0xJTUlURUQQwrgCEiQKHkVDX1JFTEFZX01FTUJF",
            "Ul9BTFJFQURZX0VYSVNUUxDDuAISIAoaRUNfUkVMQVlfTUVNQkVSX05PVF9F",
            "WElTVFMQxLgCEhwKFkVDX1JFTEFZX1NUQVRFX0lOVkFMSUQQxbgCEiEKG0VD",
            "X1JFTEFZX0lOVkFMSURfRlJBTUVfUkFURRDGuAISJwohRUNfUkVMQVlfU0VU",
            "X0ZSQU1FX1JBVEVfRk9SQklEREVOEMe4AhIZChNFQ19SRUxBWV9OT19NRU1C",
            "RVJTEMi4AhInCiFFQ19SRUxBWV9HQU1FU1ZSX1NFUlZJQ0VfTk9UX09QRU4Q",
            "ybgCEhsKFUVDX1JFTEFZX1JFUV9QT0RfRkFJTBDKuAISHwoZRUNfUkVMQVlf",
            "Tk9fQVZBSUxBQkxFX1BPRBDLuAISIwodRUNfUkVMQVlfR0VUX0ZSQU1FX0NB",
            "Q0hFX0ZBSUwQzLgCEh4KGEVDX1JFTEFZX0hLVl9DQUNIRV9FUlJPUhDPuAIS",
            "IAoaRUNfUkVMQVlfUkVESVNfQ0FDSEVfRVJST1IQ0LgCEiYKIEVDX1JFTEFZ",
            "X05PVElGWV9SRUxBWVdPUktFUl9GQUlMENK4AhIkCh5FQ19SRUxBWV9SRVNF",
            "VF9SRUxBWV9ST09NX0ZBSUwQ07gCEiQKHkVDX1JFTEFZX0NMRUFOX1JFTEFZ",
            "X1JPT01fRkFJTBDUuAISHAoWRUNfUkVMQVlfTk9fUEVSTUlTU0lPThCkuQIS",
            "IgocRUNfUkVMQVlfTk9USUZZX0dBTUVTVlJfRkFJTBCIugISJgogRUNfUkVM",
            "QVlfRk9SV0FSRF9UT19HQU1FU1ZSX0ZBSUwQiboCEiUKH0VDX1JFTEFZX0ZP",
            "UldBUkRfVE9fQ0xJRU5UX0ZBSUwQiroCEh8KGUVDX0dST1VQX09QRVJBVElP",
            "Tl9GQUlMRUQQ8KIEEiIKHEVDX0lOVkFMSURfUEFSQU1TX0dST1VQX05BTUUQ",
            "8aIEEiIKHEVDX0lOVkFMSURfUEFSQU1TX0dST1VQX1RZUEUQ8qIEEi8KKUVD",
            "X0lOVkFMSURfUEFSQU1TX0dST1VQX0NVU1RPTV9QUk9QRVJUSUVTEPOiBBIp",
            "CiNFQ19JTlZBTElEX1BBUkFNU19HUk9VUF9QTEFZRVJfTkFNRRD0ogQSMgos",
            "RUNfSU5WQUxJRF9QQVJBTVNfR1JPVVBfUExBWUVSX0NVU1RPTV9TVEFUVVMQ",
            "9aIEEjYKMEVDX0lOVkFMSURfUEFSQU1TX0dST1VQX1BMQVlFUl9DVVNUT01f",
            "UFJPUEVSVElFUxD2ogQSKQojRUNfR1JPVVBfTU9ESUZZX09XTkVSX05PX1BF",
            "Uk1JU1NJT04Q96IEEiAKGkVDX0lOVkFMSURfUEFSQU1TX0dST1VQX0lEEPii",
            "BBIeChhFQ19JTlZBTElEX0NIQU5HRV9PUFRJT04Q+aIEEiMKHUVDX0lOVkFM",
            "SURfUEFSQU1TX0dST1VQX09XTkVSEPqiBBIeChhFQ19QTEFZRVJfSVNfRVhJ",
            "U1RfR1JPVVAQ+6IEEiIKHEVDX1BMQVlFUl9JU19OT1RfRVhJU1RfR1JPVVAQ",
            "/KIEEiIKHEVDX1JFTU9WRV9QTEFZRVJfSURfSVNfRU1QVFkQ/aIEEioKJEVD",
            "X0dST1VQX1JFTU9WRV9QTEFZRVJfTk9fUEVSTUlTU0lPThD+ogQSJwohRUNf",
            "SU5WQUxJRF9QQVJBTVNfR1JPVVBfUkVDVl9UWVBFEP+iBBImCiBFQ19JTlZB",
            "TElEX1BBUkFNU19SRUNWX1BMQVlFUl9JRBCAowQSJgogRUNfSU5WQUxJRF9Q",
            "QVJBTVNfTUVTU0FHRV9MRU5HVEgQgaMEEiIKHEVDX0lOVkFMSURfUEFSQU1T",
            "X01BWF9QTEFZRVIQgqMEEiwKJlBFUlNJU1RFTkNFX0dST1VQX05VTV9FWENF",
            "RURfVEhFX0xJTUlUEIOjBBIrCiVFQ19JTlZBTElEX1BBUkFNU19QTEFZRVJf",
            "Tk9UX0lOX0dST1VQEISjBBIjCh1OT19HUk9VUF9PUEVSQVRJT05fUEVSTUlT",
            "U0lPThCFowQSKwolRUNfT1BFUkFUSU9OX0ZBSUxFRF9HUk9VUF9GT1JCSURf",
            "Sk9JThCGowQSIwodRUNfR1JPVVBfQ0hBVF9GUkVRVUVOQ1lfTElNSVQQh6ME",
            "EiYKIEVDX0dST1VQX1BMQVlFUl9OVU1fTElNSVRfRVhDRUVEEIijBBImCiBF",
            "Q19QTEFZRVJfR1JPVVBfTlVNX0xJTUlUX0VYQ0VFRBCJowQSGAoSRUNfR1JP",
            "VVBfTk9UX0VYSVNUEIqjBBIXChFFQ19JTlZBTElEX1BBUkFNUxDg1AMSKQoj",
            "RUNfSU5WQUxJRF9QQVJBTVNfUExBWV9NT0RFX1ZFUlNJT04Q4dQDEioKJEVD",
            "X0lOVkFMSURfUEFSQU1TX1BMQVlfTU9ERV9SVUxFVFlQRRDi1AMSLAomRUNf",
            "SU5WQUxJRF9QQVJBTVNfUExBWV9NT0RFX0VYUFJFU1NJT04Q49QDEiYKIEVD",
            "X0lOVkFMSURfUEFSQU1TX1BMQVlfTU9ERV9URUFNEOTUAxIjCh1FQ19JTlZB",
            "TElEX1BBUkFNU19NU0dRX0VOQ09ERRD01AMSIwodRUNfSU5WQUxJRF9QQVJB",
            "TVNfTVNHUV9ERUNPREUQ9dQDEh8KGUVDX0lOVkFMSURfUEFSQU1TX0dBTUVf",
            "SUQQyNwDEiMKHUVDX0lOVkFMSURfUEFSQU1TX1BMQVlFUl9JTkZPEMncAxIj",
            "Ch1FQ19JTlZBTElEX1BBUkFNU19NQVhfUExBWUVSUxDK3AMSIQobRUNfSU5W",
            "QUxJRF9QQVJBTVNfUk9PTV9UWVBFEMvcAxIhChtFQ19JTlZBTElEX1BBUkFN",
            "U19QTEFZRVJfSUQQzNwDEiIKHEVDX0lOVkFMSURfUEFSQU1TX01BVENIX1RZ",
            "UEUQzdwDEiIKHEVDX0lOVkFMSURfUEFSQU1TX01BVENIX0NPREUQztwDEh8K",
            "GUVDX0lOVkFMSURfUEFSQU1TX09QRU5fSUQQz9wDEiAKGkVDX0lOVkFMSURf",
            "UEFSQU1TX1BMQVRGT1JNENDcAxIhChtFQ19JTlZBTElEX1BBUkFNU19USU1F",
            "U1RBTVAQ0dwDEhwKFkVDX0lOVkFMSURfUEFSQU1TX1NJR04Q0twDEh0KF0VD",
            "X0lOVkFMSURfUEFSQU1TX05PTkNFENPcAxIdChdFQ19JTlZBTElEX1BBUkFN",
            "U19UT0tFThDU3AMSJQofRUNfSU5WQUxJRF9QQVJBTVNfTkVUV09SS19TVEFU",
            "RRDV3AMSIQobRUNfSU5WQUxJRF9QQVJBTVNfUk9PTV9OQU1FENbcAxIoCiJF",
            "Q19JTlZBTElEX1BBUkFNU19DUkVBVEVfUk9PTV9UWVBFENfcAxIhChtFQ19J",
            "TlZBTElEX1BBUkFNU19ERVZJQ0VfSUQQ2NwDEh8KGUVDX0lOVkFMSURfUEFS",
            "QU1TX1BBR0VfTk8Q2dwDEiEKG0VDX0lOVkFMSURfUEFSQU1TX1BBR0VfU0la",
            "RRDa3AMSIwodRUNfSU5WQUxJRF9QQVJBTVNfUExBWUVSX0xJU1QQ29wDEh8K",
            "GUVDX0lOVkFMSURfUEFSQU1TX01FU1NBR0UQ3NwDEiMKHUVDX0lOVkFMSURf",
            "Q0hBTkdFX1JPT01fT1BUSU9OEN3cAxIeChhFQ19JTlZBTElEX1BBUkFNU19S",
            "RUdJT04Q3twDEh0KF0VDX0lOVkFMSURfUEFSQU1TX09XTkVSEN/cAxIlCh9F",
            "Q19JTlZBTElEX1BBUkFNU19PV05FUl9PUEVOX0lEEODcAxIpCiNFQ19JTlZB",
            "TElEX1BBUkFNU19PUEVOX0lEX0RVUExJQ0FURRDi3AMSKAoiRUNfSU5WQUxJ",
            "RF9QQVJBTVNfUk9PTV9DUkVBVEVfVFlQRRDj3AMSIAoTRUNfTVlTUFBfU1lT",
            "VEVNX0VSUhCY+P////////8BEiMKFkVDX1JFRElTX0tFWV9OT1RfRVhJU1QQ",
            "sPz7////////ARIgChNFQ19SRURJU19TRVRfT1BfRVJSEK/8+////////wES",
            "IAoTRUNfUkVESVNfR0VUX09QX0VSUhCu/Pv///////8BEiAKE0VDX1JFRElT",
            "X0RFTF9PUF9FUlIQrfz7////////ARIjChZFQ19SRURJU19FWFBJUkVfT1Bf",
            "RVJSEKz8+////////wESIQoURUNfUkVESVNfTE9DS19PUF9FUlIQq/z7////",
            "////ARIoChtFQ19SRURJU19MT0NLX0FMUkVBRFlfRVhJU1QQqvz7////////",
            "ARIhChRFQ19SRURJU19MSVNUX09QX0VSUhCc/Pv///////8BEiQKF0VDX1JF",
            "RElTX0xJU1RfUE9QX0VNUFRZEJv8+////////wESLAofRUNfUkVESVNfUE9P",
            "TF9HRVRfSU5TVEFOQ0VfRkFJTBCa/Pv///////8BEiIKFUVDX1JFRElTX1NF",
            "VF9JU19FTVBUWRCZ/Pv///////8BEicKGkVDX1JFRElTX09QX0lOVkFMSURf",
            "UEFSQU1TEJj8+////////wESIgoVRUNfTVlTUUxfTk9fUk9XX0ZPVU5EEMz7",
            "+////////wESJQoYRUNfTVlTUUxfTVVMVElfUk9XX0ZPVU5EEMv7+///////",
            "/wESIQoURUNfTVlTUUxfSU5TRVJUX0ZBSUwQyvv7////////ARIhChRFQ19N",
            "WVNRTF9ERUxFVEVfRkFJTBDJ+/v///////8BEiEKFEVDX01ZU1FMX1VQREFU",
            "RV9GQUlMEMj7+////////wESIQoURUNfTVlTUUxfUVVFUllTX0ZBSUwQx/v7",
            "////////ARInChpFQ19QQl9TRVJJQUxJWkVfVE9fU1RSX0VSUhDo+vv/////",
            "//8BEiUKGEVDX1BCX1BBUlNFX0ZST01fU1RSX0VSUhDn+vv///////8BEh8K",
            "EkVDX0RBVEFfRk9STUFUX0VSUhDe+vv///////8BEh8KEkVDX0pTT05fRk9S",
            "TUFUX0VSUhDd+vv///////8BEikKHEVDX0pTT05fUExBWV9NT0RFX0ZPUk1B",
            "VF9FUlIQ3Pr7////////ARIpChxFQ19KU09OX1BMQVlfTU9ERV9QQVJJU0Vf",
            "RVJSENv6+////////wESKAobRUNfSU5WQUxJRF9QQVJBTVNfUkVDT1JFX0lE",
            "ENf3+////////wESGgoNRUNfSEFTSElEX0VSUhD09vv///////8BEiEKFEVD",
            "X0hBU0hJRF9FTkNPREVfRVJSEPP2+////////wESIQoURUNfSEFTSElEX0RF",
            "Q09ERV9FUlIQ8vb7////////ARInChpFQ19DT05GX1JPT01fSURfQlVDS0VU",
            "X0VSUhCP9vv///////8BEhYKEEVDX1NES19TRU5EX0ZBSUwQkb8FEhMKDUVD",
            "X1NES19VTklOSVQQkr8FEhgKEkVDX1NES19SRVNfVElNRU9VVBCTvwUSFQoP",
            "RUNfU0RLX05PX0xPR0lOEJS/BRIbChVFQ19TREtfTk9fQ0hFQ0tfTE9HSU4Q",
            "lb8FEhkKE0VDX1NES19TT0NLRVRfRVJST1IQlr8FEhkKE0VDX1NES19TT0NL",
            "RVRfQ0xPU0UQl78FEhQKDkVDX1NES19OT19ST09NEJi/BRIeChhFQ19TREtf",
            "RU5DT0RFX1BBUkFNX0ZBSUwQmb8FEhsKFUVDX1NES19JTlZBTElEX1BBUkFN",
            "UxCavwUqWgoMTmV0d29ya1N0YXRlEhIKDkNPTU1PTl9PRkZMSU5FEAASEQoN",
            "Q09NTU9OX09OTElORRABEhEKDVJFTEFZX09GRkxJTkUQAhIQCgxSRUxBWV9P",
            "TkxJTkUQAypNCg5DcmVhdGVSb29tVHlwZRIRCg1DT01NT05fQ1JFQVRFEAAS",
            "EAoMTUFUQ0hfQ1JFQVRFEAESFgoSVEhJUkRfUEFSVFlfQ1JFQVRFEAIqJQoO",
            "RnJhbWVTeW5jU3RhdGUSCAoEU1RPUBAAEgkKBVNUQVJUEAEqLwoMSm9pblJv",
            "b21UeXBlEg8KC0NPTU1PTl9KT0lOEAASDgoKTUFUQ0hfSk9JThABKoYBChBD",
            "aGFuZ2VSb29tT3B0aW9uEg0KCVJPT01fTkFNRRAAEgkKBU9XTkVSEAESDQoJ",
            "SVNfVklFV0VEEAISDgoKSVNfSU5WSVRFRBADEg4KCklTX1BSSVZBVEUQBBIV",
            "ChFDVVNUT01fUFJPUEVSVElFUxAFEhIKDklTX0ZPUkJJRF9KT0lOEAYqQgoL",
            "TWF0Y2hTdGF0dXMSCwoHUEVORElORxAAEgwKCE1BVENISU5HEAESCwoHU1VD",
            "Q0VTUxADEgsKB1RJTUVPVVQQBCpKChJNYXRjaFBsYWNlbWVudFR5cGUSDAoI",
            "TVBfTUdPQkUQABIKCgZNUF9HU0UQARIaCg1NUF9USElSRFBBUlRZEP//////",
            "/////wEqowEKD1BsYWNlbWVudFN0YXR1cxINCglQU19VTktOT1cQABIOCgpQ",
            "U19QRU5ESU5HEAISEAoMUFNfRlVMRklMTEVEEAMSEAoMUFNfQ0FOQ0VMTEVE",
            "EAQSEAoMUFNfVElNRURfT1VUEAUSDQoJUFNfRkFJTEVEEAYSEwoPUFNfVElN",
            "RURfT1VUX01REGQSFwoTUFNfUExBQ0VfTUFUQ0hfRkFJTBBlKkMKCU1hdGNo",
            "VHlwZRIRCg1QTEFZRVJfU0lNUExFEAASDwoLUk9PTV9TSU1QTEUQARISCg5Q",
            "TEFZRVJfQ09NUExFWBACKtUBChJHYW1lU3ZyRm9yd2FyZFR5cGUSHAoYRV9H",
            "U19GT1JXQVJEVFlQRV9ERUZBVUxUEAASJgoiRV9HU19GT1JXQVJEVFlQRV9O",
            "T1RJRllfQ09OTkVDVElPThABEiYKIkVfR1NfRk9SV0FSRFRZUEVfTk9USUZZ",
            "X1JPT01fRVZFTlQQAhIlCiFFX0dTX0ZPUldBUkRUWVBFX05PVElGWV9DT01f",
            "RVZFTlQQAxIqCiZFX0dTX0ZPUldBUkRUWVBFX0NMSUVOVF9TRU5EVE9fR0FN",
            "RVNWUhAEKi4KCUdyb3VwVHlwZRIRCg1HUk9VUF9MSU1JVEVEEAASDgoKR1JP",
            "VVBfTUFOWRABKmsKEUNoYW5nZUdyb3VwT3B0aW9uEg4KCkdST1VQX05BTUUQ",
            "ABIPCgtHUk9VUF9PV05FUhABEhsKF0dST1VQX0NVU1RPTV9QUk9QRVJUSUVT",
            "EAISGAoUR1JPVVBfSVNfRk9SQklEX0pPSU4QAypQCg1Hcm91cFJlY3ZUeXBl",
            "Eg4KCkdST1VQX05PTkUQABINCglHUk9VUF9BTEwQARIQCgxHUk9VUF9PVEhF",
            "UlMQAhIOCgpHUk9VUF9TT01FEANiBnByb3RvMw=="));
      descriptor = pbr::FileDescriptor.FromGeneratedCode(descriptorData,
          new pbr::FileDescriptor[] { },
          new pbr::GeneratedClrTypeInfo(new[] {typeof(global::com.unity.mgobe.ConnectionType), typeof(global::com.unity.mgobe.EventType), typeof(global::com.unity.mgobe.ServerSendClientBstWrap2Type), typeof(global::com.unity.mgobe.ProtoCmd), typeof(global::com.unity.mgobe.QAppProtoErrCode), typeof(global::com.unity.mgobe.NetworkState), typeof(global::com.unity.mgobe.CreateRoomType), typeof(global::com.unity.mgobe.FrameSyncState), typeof(global::com.unity.mgobe.JoinRoomType), typeof(global::com.unity.mgobe.ChangeRoomOption), typeof(global::com.unity.mgobe.MatchStatus), typeof(global::com.unity.mgobe.MatchPlacementType), typeof(global::com.unity.mgobe.PlacementStatus), typeof(global::com.unity.mgobe.MatchType), typeof(global::com.unity.mgobe.GameSvrForwardType), typeof(global::com.unity.mgobe.GroupType), typeof(global::com.unity.mgobe.ChangeGroupOption), typeof(global::com.unity.mgobe.GroupRecvType), }, new pbr::GeneratedClrTypeInfo[] {
            new pbr::GeneratedClrTypeInfo(typeof(global::com.unity.mgobe.ClientSendServerReqWrap1), global::com.unity.mgobe.ClientSendServerReqWrap1.Parser, new[]{ "Version", "AppName", "Cmd", "Seq", "ClientIp", "ServiceIp", "Business", "AuthKey", "AuthType", "AuthIp", "GameId", "Uid", "PlayerId", "Body" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::com.unity.mgobe.ServerSendClientBstWrap1), global::com.unity.mgobe.ServerSendClientBstWrap1.Parser, new[]{ "Version", "AppName", "Cmd", "Seq", "ClientIp", "ServiceIp", "Business", "AuthKey", "AuthType", "AuthIp", "GameId", "Uid", "PlayerId", "Body" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::com.unity.mgobe.ClientSendServerRspWrap1), global::com.unity.mgobe.ClientSendServerRspWrap1.Parser, new[]{ "Seq", "ErrCode", "ErrMsg", "Body" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::com.unity.mgobe.ClientSendServerReqWrap2), global::com.unity.mgobe.ClientSendServerReqWrap2.Parser, new[]{ "Cmd", "Body" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::com.unity.mgobe.ClientSendServerRspWrap2), global::com.unity.mgobe.ClientSendServerRspWrap2.Parser, new[]{ "Body" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::com.unity.mgobe.EventInfo), global::com.unity.mgobe.EventInfo.Parser, new[]{ "EventType", "Seq", "Body" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::com.unity.mgobe.EventNetworkState), global::com.unity.mgobe.EventNetworkState.Parser, new[]{ "GameId", "PlayerId", "NetworkState" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::com.unity.mgobe.HeartBeatReq), global::com.unity.mgobe.HeartBeatReq.Parser, new[]{ "ConType", "RouteId" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::com.unity.mgobe.HeartBeatRsp), global::com.unity.mgobe.HeartBeatRsp.Parser, null, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::com.unity.mgobe.ServerSendClientBstWrap2), global::com.unity.mgobe.ServerSendClientBstWrap2.Parser, new[]{ "Type", "Msg" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::com.unity.mgobe.NOUSEServerSendClientBstRspWrap2), global::com.unity.mgobe.NOUSEServerSendClientBstRspWrap2.Parser, null, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::com.unity.mgobe.CheckLoginReq), global::com.unity.mgobe.CheckLoginReq.Parser, new[]{ "Token", "RouteId" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::com.unity.mgobe.CheckLoginRsp), global::com.unity.mgobe.CheckLoginRsp.Parser, null, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::com.unity.mgobe.PushBodyType), global::com.unity.mgobe.PushBodyType.Parser, new[]{ "PushMsg" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::com.unity.mgobe.LoginReq), global::com.unity.mgobe.LoginReq.Parser, new[]{ "GameId", "OpenId", "Platform", "Channel", "Nonce", "Timestamp", "Sign", "DeviceId", "Mac", "Imei" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::com.unity.mgobe.LoginRsp), global::com.unity.mgobe.LoginRsp.Parser, new[]{ "Token", "PlayerId", "ExpireTime", "SdkConfig" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::com.unity.mgobe.SdkConfig), global::com.unity.mgobe.SdkConfig.Parser, new[]{ "PingInterval", "ReportInterval", "ServerTime", "EnableUdp", "DisableReport", "DisableReqReport", "DisableFrameReport", "MinReportSize" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::com.unity.mgobe.LogoutReq), global::com.unity.mgobe.LogoutReq.Parser, null, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::com.unity.mgobe.LogoutRsp), global::com.unity.mgobe.LogoutRsp.Parser, null, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::com.unity.mgobe.StartFrameSyncReq), global::com.unity.mgobe.StartFrameSyncReq.Parser, null, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::com.unity.mgobe.StartFrameSyncRsp), global::com.unity.mgobe.StartFrameSyncRsp.Parser, null, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::com.unity.mgobe.StopFrameSyncReq), global::com.unity.mgobe.StopFrameSyncReq.Parser, null, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::com.unity.mgobe.StopFrameSyncRsp), global::com.unity.mgobe.StopFrameSyncRsp.Parser, null, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::com.unity.mgobe.FrameItem), global::com.unity.mgobe.FrameItem.Parser, new[]{ "PlayerId", "Data", "Timestamp" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::com.unity.mgobe.SendFrameReq), global::com.unity.mgobe.SendFrameReq.Parser, new[]{ "RoomId", "Item" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::com.unity.mgobe.SendFrameRsp), global::com.unity.mgobe.SendFrameRsp.Parser, null, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::com.unity.mgobe.FrameExtInfo), global::com.unity.mgobe.FrameExtInfo.Parser, new[]{ "Seed" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::com.unity.mgobe.Frame), global::com.unity.mgobe.Frame.Parser, new[]{ "Id", "Items", "Ext" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::com.unity.mgobe.RequestFrameReq), global::com.unity.mgobe.RequestFrameReq.Parser, new[]{ "RoomId", "BeginFrameId", "EndFrameId", "SupportPartial" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::com.unity.mgobe.RequestFrameRsp), global::com.unity.mgobe.RequestFrameRsp.Parser, new[]{ "Frames", "IsPartial" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::com.unity.mgobe.PlayerInfo), global::com.unity.mgobe.PlayerInfo.Parser, new[]{ "Id", "Name", "TeamId", "CustomPlayerStatus", "CustomProfile", "CommonNetworkState", "RelayNetworkState", "IsRobot", "MatchAttributes" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::com.unity.mgobe.TeamInfo), global::com.unity.mgobe.TeamInfo.Parser, new[]{ "Id", "Name", "MinPlayers", "MaxPlayers" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::com.unity.mgobe.RoomInfo), global::com.unity.mgobe.RoomInfo.Parser, new[]{ "Id", "Name", "Type", "CreateType", "MaxPlayers", "Owner", "IsPrivate", "CustomProperties", "PlayerList", "TeamList", "FrameSyncState", "FrameRate", "RouteId", "CreateTime", "StartGameTime", "IsForbidJoin" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::com.unity.mgobe.CreateRoomReq), global::com.unity.mgobe.CreateRoomReq.Parser, new[]{ "RoomName", "RoomType", "CreateType", "MaxPlayers", "IsPrivate", "CustomProperties", "PlayerInfo", "Region", "Owner", "PlayerList", "TeamList" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::com.unity.mgobe.CreateRoomRsp), global::com.unity.mgobe.CreateRoomRsp.Parser, new[]{ "RoomInfo" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::com.unity.mgobe.JoinRoomReq), global::com.unity.mgobe.JoinRoomReq.Parser, new[]{ "RoomId", "TeamId", "JoinType", "PlayerInfo" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::com.unity.mgobe.JoinRoomRsp), global::com.unity.mgobe.JoinRoomRsp.Parser, new[]{ "RoomInfo" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::com.unity.mgobe.LeaveRoomReq), global::com.unity.mgobe.LeaveRoomReq.Parser, null, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::com.unity.mgobe.LeaveRoomRsp), global::com.unity.mgobe.LeaveRoomRsp.Parser, new[]{ "RoomInfo" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::com.unity.mgobe.DismissRoomReq), global::com.unity.mgobe.DismissRoomReq.Parser, null, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::com.unity.mgobe.DismissRoomRsp), global::com.unity.mgobe.DismissRoomRsp.Parser, null, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::com.unity.mgobe.ChangeRoomReq), global::com.unity.mgobe.ChangeRoomReq.Parser, new[]{ "RoomName", "Owner", "IsPrivate", "CustomProperties", "IsForbidJoin", "ChangeRoomOptionList" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::com.unity.mgobe.ChangeRoomRsp), global::com.unity.mgobe.ChangeRoomRsp.Parser, new[]{ "RoomInfo" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::com.unity.mgobe.SvrChangeRoomReq), global::com.unity.mgobe.SvrChangeRoomReq.Parser, new[]{ "RoomName", "Owner", "IsPrivate", "CustomProperties", "IsForbidJoin", "RoomId", "ChangeRoomOptionList" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::com.unity.mgobe.SvrChangeRoomRsp), global::com.unity.mgobe.SvrChangeRoomRsp.Parser, new[]{ "RoomInfo" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::com.unity.mgobe.RemovePlayerReq), global::com.unity.mgobe.RemovePlayerReq.Parser, new[]{ "RemovePlayerId" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::com.unity.mgobe.RemovePlayerRsp), global::com.unity.mgobe.RemovePlayerRsp.Parser, new[]{ "RoomInfo" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::com.unity.mgobe.SvrRemovePlayerReq), global::com.unity.mgobe.SvrRemovePlayerReq.Parser, new[]{ "RoomId", "RemovePlayerId" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::com.unity.mgobe.SvrRemovePlayerRsp), global::com.unity.mgobe.SvrRemovePlayerRsp.Parser, new[]{ "RoomInfo" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::com.unity.mgobe.GetRoomByRoomIdReq), global::com.unity.mgobe.GetRoomByRoomIdReq.Parser, new[]{ "RoomId" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::com.unity.mgobe.GetRoomByRoomIdRsp), global::com.unity.mgobe.GetRoomByRoomIdRsp.Parser, new[]{ "RoomInfo" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::com.unity.mgobe.SendToClientReq), global::com.unity.mgobe.SendToClientReq.Parser, new[]{ "RoomId", "RecvPlayerList", "Msg" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::com.unity.mgobe.SendToClientRsp), global::com.unity.mgobe.SendToClientRsp.Parser, null, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::com.unity.mgobe.ChangeCustomPlayerStatusReq), global::com.unity.mgobe.ChangeCustomPlayerStatusReq.Parser, new[]{ "CustomPlayerStatus" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::com.unity.mgobe.ChangeCustomPlayerStatusRsp), global::com.unity.mgobe.ChangeCustomPlayerStatusRsp.Parser, new[]{ "RoomInfo" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::com.unity.mgobe.SvrChangeCustomPlayerStatusReq), global::com.unity.mgobe.SvrChangeCustomPlayerStatusReq.Parser, new[]{ "CustomPlayerStatus" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::com.unity.mgobe.SvrChangeCustomPlayerStatusRsp), global::com.unity.mgobe.SvrChangeCustomPlayerStatusRsp.Parser, new[]{ "RoomInfo" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::com.unity.mgobe.ChangePlayerNetworkStateReq), global::com.unity.mgobe.ChangePlayerNetworkStateReq.Parser, new[]{ "NetworkState" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::com.unity.mgobe.ChangePlayerNetworkStateRsp), global::com.unity.mgobe.ChangePlayerNetworkStateRsp.Parser, new[]{ "RoomInfo" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::com.unity.mgobe.GetRoomListReq), global::com.unity.mgobe.GetRoomListReq.Parser, new[]{ "GameId", "PageNo", "PageSize", "RoomType", "IsDesc" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::com.unity.mgobe.GetRoomListRsp), global::com.unity.mgobe.GetRoomListRsp.Parser, new[]{ "GameId", "RoomList", "Total" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::com.unity.mgobe.MatchRoomSimpleReq), global::com.unity.mgobe.MatchRoomSimpleReq.Parser, new[]{ "RoomType", "MaxPlayers", "PlayerInfo" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::com.unity.mgobe.MatchRoomSimpleRsp), global::com.unity.mgobe.MatchRoomSimpleRsp.Parser, new[]{ "RoomInfo" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::com.unity.mgobe.MatchRoomComplexReq), global::com.unity.mgobe.MatchRoomComplexReq.Parser, null, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::com.unity.mgobe.MatchRoomComplexRsp), global::com.unity.mgobe.MatchRoomComplexRsp.Parser, null, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::com.unity.mgobe.MatchPlayersSimpleReq), global::com.unity.mgobe.MatchPlayersSimpleReq.Parser, null, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::com.unity.mgobe.MatchPlayersSimpleRsp), global::com.unity.mgobe.MatchPlayersSimpleRsp.Parser, null, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::com.unity.mgobe.MatchAttribute), global::com.unity.mgobe.MatchAttribute.Parser, new[]{ "Name", "Value" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::com.unity.mgobe.MatchPlayerInfo), global::com.unity.mgobe.MatchPlayerInfo.Parser, new[]{ "Id", "Name", "CustomPlayerStatus", "CustomProfile", "MatchAttributes", "MatchStatus", "TeamId", "Region", "TeamLeader", "SdkVersion", "GroupId", "TeamType", "RequestId" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::com.unity.mgobe.MatchGroupPlayerInfo), global::com.unity.mgobe.MatchGroupPlayerInfo.Parser, new[]{ "Id", "Name", "CustomPlayerStatus", "CustomProfile", "MatchAttributes", "MatchStatus", "TeamId", "Region", "TeamLeader", "SdkVersion", "GroupId", "TeamType", "RequestId" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::com.unity.mgobe.MatchGroupInfo), global::com.unity.mgobe.MatchGroupInfo.Parser, new[]{ "Id", "Leader", "PlayerIdList", "PlayerInfoList", "MatchAttributes", "Region", "SdkVersion", "TeamId", "TeamType", "RequestId", "StartMatchTime", "IsRobot" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::com.unity.mgobe.MatchTeamInfo), global::com.unity.mgobe.MatchTeamInfo.Parser, new[]{ "TeamId", "TeamName", "TeamLeader", "Members", "MatchAttributes", "MemberSdkVersions", "GroupIds", "GroupSdkVersions", "TeamType" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::com.unity.mgobe.ProgressPlayerInfo), global::com.unity.mgobe.ProgressPlayerInfo.Parser, new[]{ "PlayerId", "TeamName", "MatchAttributes", "StartMatchTime" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::com.unity.mgobe.MatchmakerTeam), global::com.unity.mgobe.MatchmakerTeam.Parser, new[]{ "Name", "Players" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::com.unity.mgobe.MatchmakerData), global::com.unity.mgobe.MatchmakerData.Parser, new[]{ "MatchId", "Teams" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::com.unity.mgobe.MatchPlacementInfo), global::com.unity.mgobe.MatchPlacementInfo.Parser, new[]{ "GameId", "MatchCode", "MatchId", "Type", "CreateRoomReq", "MatchmakerDataJson", "Status", "ResultBody" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::com.unity.mgobe.MgobePlacementJob), global::com.unity.mgobe.MgobePlacementJob.Parser, new[]{ "CreateRoomReq" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::com.unity.mgobe.MgobePlacementResult), global::com.unity.mgobe.MgobePlacementResult.Parser, new[]{ "RoomInfo" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::com.unity.mgobe.GsePlacementJob), global::com.unity.mgobe.GsePlacementJob.Parser, new[]{ "CreateRoomReq", "MatchmakerData" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::com.unity.mgobe.GsePlacementResult), global::com.unity.mgobe.GsePlacementResult.Parser, new[]{ "GseGameSession" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::com.unity.mgobe.ThirdpartyPlacementJob), global::com.unity.mgobe.ThirdpartyPlacementJob.Parser, null, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::com.unity.mgobe.ThirdpartyPlacementResult), global::com.unity.mgobe.ThirdpartyPlacementResult.Parser, null, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::com.unity.mgobe.GsePlayerLatency), global::com.unity.mgobe.GsePlayerLatency.Parser, new[]{ "LatencyInMilliseconds", "PlayerId", "RegionIdentifier" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::com.unity.mgobe.GseGameProperty), global::com.unity.mgobe.GseGameProperty.Parser, new[]{ "Key", "Value" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::com.unity.mgobe.GsePlacedPlayerSession), global::com.unity.mgobe.GsePlacedPlayerSession.Parser, new[]{ "PlayerId", "PlayerSessionId" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::com.unity.mgobe.GseGameSession), global::com.unity.mgobe.GseGameSession.Parser, new[]{ "PlacementId", "GameServerSessionQueueName", "PlayerLatencies", "Status", "DnsName", "GameServerSessionId", "GameServerSessionName", "GameServerSessionRegion", "GameProperties", "MaximumPlayerSessionCount", "GameServerSessionData", "IpAddress", "Port", "MatchmakerData", "PlacedPlayerSessions", "StartTime", "EndTime" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::com.unity.mgobe.PlaceMatchReq), global::com.unity.mgobe.PlaceMatchReq.Parser, new[]{ "Seq", "GameId", "MatchId", "Type", "JobBody", "MatchCode" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::com.unity.mgobe.PlaceMatchRsp), global::com.unity.mgobe.PlaceMatchRsp.Parser, new[]{ "MatchPlacementResult" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::com.unity.mgobe.MatchPlacementResult), global::com.unity.mgobe.MatchPlacementResult.Parser, new[]{ "Seq", "GameId", "MatchId", "Type", "Status", "ResultBody", "ErrCode", "MatchCode" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::com.unity.mgobe.UpdateMatchPlacementResultReq), global::com.unity.mgobe.UpdateMatchPlacementResultReq.Parser, new[]{ "MatchPlacementResult" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::com.unity.mgobe.UpdateMatchPlacementResultRsp), global::com.unity.mgobe.UpdateMatchPlacementResultRsp.Parser, null, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::com.unity.mgobe.CmqPlacementResult), global::com.unity.mgobe.CmqPlacementResult.Parser, new[]{ "PlacementId", "PlacementType", "ResultBody" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::com.unity.mgobe.MatchPlayersReq), global::com.unity.mgobe.MatchPlayersReq.Parser, new[]{ "MatchCode", "PlayerInfo" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::com.unity.mgobe.MatchPlayersRsp), global::com.unity.mgobe.MatchPlayersRsp.Parser, new[]{ "MatchCode" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::com.unity.mgobe.MatchGroupReq), global::com.unity.mgobe.MatchGroupReq.Parser, new[]{ "MatchCode", "PlayerInfoList" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::com.unity.mgobe.MatchGroupRsp), global::com.unity.mgobe.MatchGroupRsp.Parser, new[]{ "MatchCode" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::com.unity.mgobe.DescribeMatchReq), global::com.unity.mgobe.DescribeMatchReq.Parser, new[]{ "RequestIdList" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::com.unity.mgobe.MatchProgress), global::com.unity.mgobe.MatchProgress.Parser, new[]{ "RequestId", "PlayerIdList", "PlayerInfoList", "Status", "EventType", "PlayerInfoSuccessList", "TeamInfoList", "CompletedTime", "StartMatchTime", "GameSessionConnectionInfo" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::com.unity.mgobe.DescribeMatchRsp), global::com.unity.mgobe.DescribeMatchRsp.Parser, new[]{ "MatchProgressList" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::com.unity.mgobe.CancelPlayerMatchReq), global::com.unity.mgobe.CancelPlayerMatchReq.Parser, new[]{ "MatchType" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::com.unity.mgobe.CancelPlayerMatchRsp), global::com.unity.mgobe.CancelPlayerMatchRsp.Parser, null, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::com.unity.mgobe.ApiMatchGroupReq), global::com.unity.mgobe.ApiMatchGroupReq.Parser, new[]{ "MatchCode", "PlayerInfoList", "RequestId" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::com.unity.mgobe.ApiMatchGroupRsp), global::com.unity.mgobe.ApiMatchGroupRsp.Parser, new[]{ "RequestId" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::com.unity.mgobe.ApiDescribeMatchReq), global::com.unity.mgobe.ApiDescribeMatchReq.Parser, new[]{ "RequestIdList" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::com.unity.mgobe.ApiDescribeMatchRsp), global::com.unity.mgobe.ApiDescribeMatchRsp.Parser, new[]{ "MatchProgressList", "GameId", "MatchCode", "StartMatchTime" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::com.unity.mgobe.GameSessionConnectionInfo), global::com.unity.mgobe.GameSessionConnectionInfo.Parser, new[]{ "DnsName", "IpAddress", "MatchedPlayerSessions", "Port" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::com.unity.mgobe.MatchedPlayerSession), global::com.unity.mgobe.MatchedPlayerSession.Parser, new[]{ "PlayerId", "PlayerSessionId" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::com.unity.mgobe.StartMatchPlacement), global::com.unity.mgobe.StartMatchPlacement.Parser, new[]{ "Region", "PlacementId", "QueueName", "MaximumPlayerSessionCount", "DesiredPlayerSessions", "GameProperties", "MatchMakerData" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::com.unity.mgobe.DesiredPlayerSession), global::com.unity.mgobe.DesiredPlayerSession.Parser, new[]{ "PlayerId", "PlayerData" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::com.unity.mgobe.GameProperty), global::com.unity.mgobe.GameProperty.Parser, new[]{ "Key", "Value" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::com.unity.mgobe.ApiCancelPlayerMatchReq), global::com.unity.mgobe.ApiCancelPlayerMatchReq.Parser, new[]{ "MatchType", "RequestIdList" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::com.unity.mgobe.ApiCancelPlayerMatchRsp), global::com.unity.mgobe.ApiCancelPlayerMatchRsp.Parser, new[]{ "RequestIdList" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::com.unity.mgobe.CreateRoomBst), global::com.unity.mgobe.CreateRoomBst.Parser, new[]{ "RoomInfo" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::com.unity.mgobe.DestroyRoomBst), global::com.unity.mgobe.DestroyRoomBst.Parser, new[]{ "RoomInfo" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::com.unity.mgobe.JoinRoomBst), global::com.unity.mgobe.JoinRoomBst.Parser, new[]{ "RoomInfo", "JoinPlayerId" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::com.unity.mgobe.LeaveRoomBst), global::com.unity.mgobe.LeaveRoomBst.Parser, new[]{ "RoomInfo", "LeavePlayerId" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::com.unity.mgobe.RemovePlayerBst), global::com.unity.mgobe.RemovePlayerBst.Parser, new[]{ "RoomInfo", "RemovePlayerId" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::com.unity.mgobe.DismissRoomBst), global::com.unity.mgobe.DismissRoomBst.Parser, new[]{ "RoomInfo" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::com.unity.mgobe.ChangeRoomBst), global::com.unity.mgobe.ChangeRoomBst.Parser, new[]{ "RoomInfo" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::com.unity.mgobe.RecvFromClientBst), global::com.unity.mgobe.RecvFromClientBst.Parser, new[]{ "RoomId", "SendPlayerId", "Msg" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::com.unity.mgobe.ChangeCustomPlayerStatusBst), global::com.unity.mgobe.ChangeCustomPlayerStatusBst.Parser, new[]{ "ChangePlayerId", "CustomPlayerStatus", "RoomInfo" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::com.unity.mgobe.ChangePlayerNetworkStateBst), global::com.unity.mgobe.ChangePlayerNetworkStateBst.Parser, new[]{ "ChangePlayerId", "NetworkState", "RoomInfo", "GroupIdList" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::com.unity.mgobe.MatchTimeoutBst), global::com.unity.mgobe.MatchTimeoutBst.Parser, new[]{ "MatchType", "ErrCode" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::com.unity.mgobe.CancelMatchBst), global::com.unity.mgobe.CancelMatchBst.Parser, new[]{ "MatchCode", "PlayerId" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::com.unity.mgobe.MatchPlayersBst), global::com.unity.mgobe.MatchPlayersBst.Parser, new[]{ "MatchType", "RoomInfo" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::com.unity.mgobe.StartFrameSyncBst), global::com.unity.mgobe.StartFrameSyncBst.Parser, new[]{ "RoomInfo" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::com.unity.mgobe.StopFrameSyncBst), global::com.unity.mgobe.StopFrameSyncBst.Parser, new[]{ "RoomInfo" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::com.unity.mgobe.RecvFrameBst), global::com.unity.mgobe.RecvFrameBst.Parser, new[]{ "Frame" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::com.unity.mgobe.GameSvrCommunication), global::com.unity.mgobe.GameSvrCommunication.Parser, new[]{ "Type", "Body" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::com.unity.mgobe.NotifyRelayConnectionReq), global::com.unity.mgobe.NotifyRelayConnectionReq.Parser, new[]{ "RoomId", "Ip", "Port" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::com.unity.mgobe.NotifyRoomEventReq), global::com.unity.mgobe.NotifyRoomEventReq.Parser, new[]{ "Cmd", "Msg" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::com.unity.mgobe.SendToGameSvrReq), global::com.unity.mgobe.SendToGameSvrReq.Parser, new[]{ "RoomId", "PlayerId", "Data" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::com.unity.mgobe.SendToGameSvrRsp), global::com.unity.mgobe.SendToGameSvrRsp.Parser, null, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::com.unity.mgobe.RecvFromGameSvrBst), global::com.unity.mgobe.RecvFromGameSvrBst.Parser, new[]{ "RoomId", "RecvPlayerIdList", "Data" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::com.unity.mgobe.ClientRecvFromGameSvrRsp), global::com.unity.mgobe.ClientRecvFromGameSvrRsp.Parser, null, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::com.unity.mgobe.GroupInfo), global::com.unity.mgobe.GroupInfo.Parser, new[]{ "Id", "Name", "Type", "MaxPlayers", "Owner", "CustomProperties", "CreateTime", "IsForbidJoin", "IsPersistent", "GroupPlayerList" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::com.unity.mgobe.GroupPlayerInfo), global::com.unity.mgobe.GroupPlayerInfo.Parser, new[]{ "Id", "Name", "CustomGroupPlayerStatus", "CustomGroupPlayerProfile", "CommonGroupNetworkState" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::com.unity.mgobe.CreateGroupReq), global::com.unity.mgobe.CreateGroupReq.Parser, new[]{ "GroupName", "GroupType", "MaxPlayers", "CustomProperties", "PlayerInfo", "IsForbidJoin", "IsPersistent" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::com.unity.mgobe.CreateGroupRsp), global::com.unity.mgobe.CreateGroupRsp.Parser, new[]{ "GroupInfo" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::com.unity.mgobe.JoinGroupReq), global::com.unity.mgobe.JoinGroupReq.Parser, new[]{ "GroupId", "PlayerInfo" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::com.unity.mgobe.JoinGroupRsp), global::com.unity.mgobe.JoinGroupRsp.Parser, new[]{ "GroupInfo" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::com.unity.mgobe.LeaveGroupReq), global::com.unity.mgobe.LeaveGroupReq.Parser, new[]{ "GroupId" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::com.unity.mgobe.LeaveGroupRsp), global::com.unity.mgobe.LeaveGroupRsp.Parser, new[]{ "GroupInfo" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::com.unity.mgobe.DismissGroupReq), global::com.unity.mgobe.DismissGroupReq.Parser, new[]{ "GroupId" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::com.unity.mgobe.DismissGroupRsp), global::com.unity.mgobe.DismissGroupRsp.Parser, null, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::com.unity.mgobe.ChangeGroupReq), global::com.unity.mgobe.ChangeGroupReq.Parser, new[]{ "GroupId", "GroupName", "Owner", "CustomProperties", "IsForbidJoin", "ChangeGroupOptionList" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::com.unity.mgobe.ChangeGroupRsp), global::com.unity.mgobe.ChangeGroupRsp.Parser, new[]{ "GroupInfo" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::com.unity.mgobe.RemoveGroupPlayerReq), global::com.unity.mgobe.RemoveGroupPlayerReq.Parser, new[]{ "GroupId", "RemovePlayerId" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::com.unity.mgobe.RemoveGroupPlayerRsp), global::com.unity.mgobe.RemoveGroupPlayerRsp.Parser, new[]{ "GroupInfo" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::com.unity.mgobe.GetGroupByGroupIdReq), global::com.unity.mgobe.GetGroupByGroupIdReq.Parser, new[]{ "GroupId" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::com.unity.mgobe.GetGroupByGroupIdRsp), global::com.unity.mgobe.GetGroupByGroupIdRsp.Parser, new[]{ "GroupInfo" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::com.unity.mgobe.GetMyGroupsReq), global::com.unity.mgobe.GetMyGroupsReq.Parser, null, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::com.unity.mgobe.GetMyGroupsRsp), global::com.unity.mgobe.GetMyGroupsRsp.Parser, new[]{ "GroupInfoList" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::com.unity.mgobe.ChangeCustomGroupPlayerStatusReq), global::com.unity.mgobe.ChangeCustomGroupPlayerStatusReq.Parser, new[]{ "GroupId", "CustomGroupPlayerStatus" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::com.unity.mgobe.ChangeCustomGroupPlayerStatusRsp), global::com.unity.mgobe.ChangeCustomGroupPlayerStatusRsp.Parser, new[]{ "GroupInfo" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::com.unity.mgobe.SendToGroupClientReq), global::com.unity.mgobe.SendToGroupClientReq.Parser, new[]{ "GroupId", "RecvPlayerList", "Msg", "RecvType" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::com.unity.mgobe.SendToGroupClientRsp), global::com.unity.mgobe.SendToGroupClientRsp.Parser, null, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::com.unity.mgobe.GroupPlayers), global::com.unity.mgobe.GroupPlayers.Parser, new[]{ "GroupId", "PlayerIdList" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::com.unity.mgobe.ChangeGroupPlayerNetworkReq), global::com.unity.mgobe.ChangeGroupPlayerNetworkReq.Parser, new[]{ "NetworkState", "PlayerId", "GameId", "Seq" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::com.unity.mgobe.ChangeGroupPlayerNetworkRsp), global::com.unity.mgobe.ChangeGroupPlayerNetworkRsp.Parser, new[]{ "GroupPlayers" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::com.unity.mgobe.JoinGroupBst), global::com.unity.mgobe.JoinGroupBst.Parser, new[]{ "GroupInfo", "JoinPlayerId" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::com.unity.mgobe.LeaveGroupBst), global::com.unity.mgobe.LeaveGroupBst.Parser, new[]{ "GroupInfo", "LeavePlayerId" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::com.unity.mgobe.DismissGroupBst), global::com.unity.mgobe.DismissGroupBst.Parser, new[]{ "GroupInfo" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::com.unity.mgobe.ChangeGroupBst), global::com.unity.mgobe.ChangeGroupBst.Parser, new[]{ "GroupInfo" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::com.unity.mgobe.RemoveGroupPlayerBst), global::com.unity.mgobe.RemoveGroupPlayerBst.Parser, new[]{ "GroupInfo", "RemovePlayerId" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::com.unity.mgobe.ChangeGroupPlayerNetworkStateBst), global::com.unity.mgobe.ChangeGroupPlayerNetworkStateBst.Parser, new[]{ "GroupInfo", "ChangePlayerId", "NetworkState" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::com.unity.mgobe.ChangeCustomGroupPlayerStatusBst), global::com.unity.mgobe.ChangeCustomGroupPlayerStatusBst.Parser, new[]{ "GroupInfo", "ChangePlayerId", "CustomGroupPlayerStatus" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::com.unity.mgobe.RecvFromGroupClientBst), global::com.unity.mgobe.RecvFromGroupClientBst.Parser, new[]{ "GroupId", "SendPlayerId", "Msg" }, null, null, null)
          }));
    }
    #endregion

  }
  #region Enums
  public enum ConnectionType {
    /// <summary>
    ////通用
    /// </summary>
    [pbr::OriginalName("COMMON")] Common = 0,
    /// <summary>
    ////帧同步或状态同步
    /// </summary>
    [pbr::OriginalName("RELAY")] Relay = 1,
  }

  /// <summary>
  ////CMQ通知事件类型
  /// </summary>
  public enum EventType {
    /// <summary>
    ////未设置类型
    /// </summary>
    [pbr::OriginalName("ET_Unknown")] EtUnknown = 0,
    /// <summary>
    ////网络事件通知
    /// </summary>
    [pbr::OriginalName("ET_NetworkState")] EtNetworkState = 1,
  }

  public enum ServerSendClientBstWrap2Type {
    /// <summary>
    //// 通用 (0-99)
    /// </summary>
    [pbr::OriginalName("E_PUSH_TYPE_TEST")] EPushTypeTest = 0,
    [pbr::OriginalName("E_PUSH_TYPE_RELAY")] EPushTypeRelay = 1,
    /// <summary>
    //// 后端自定义服务gamesvr推送
    /// </summary>
    [pbr::OriginalName("E_PUSH_TYPE_GAMESVR")] EPushTypeGamesvr = 2,
    /// <summary>
    //// 房间管理Push信息 (100-199)
    /// </summary>
    [pbr::OriginalName("E_PUSH_TYPE_JOIN_ROOM")] EPushTypeJoinRoom = 100,
    /// <summary>
    //// 离开房间广播
    /// </summary>
    [pbr::OriginalName("E_PUSH_TYPE_LEAVE_ROOM")] EPushTypeLeaveRoom = 101,
    /// <summary>
    //// 解散房间广播
    /// </summary>
    [pbr::OriginalName("E_PUSH_TYPE_DISMISS_ROOM")] EPushTypeDismissRoom = 102,
    /// <summary>
    //// 移除用户广播
    /// </summary>
    [pbr::OriginalName("E_PUSH_TYPE_REMOVE_PLAYER")] EPushTypeRemovePlayer = 103,
    /// <summary>
    //// 修改房间属性广播
    /// </summary>
    [pbr::OriginalName("E_PUSH_TYPE_MODIFY_ROOM_PROPERTY")] EPushTypeModifyRoomProperty = 104,
    /// <summary>
    //// 网络状态广播 &amp; 队组复用
    /// </summary>
    [pbr::OriginalName("E_PUSH_TYPE_NETWORK_STATE")] EPushTypeNetworkState = 105,
    /// <summary>
    //// 房间聊天广播
    /// </summary>
    [pbr::OriginalName("E_PUSH_TYPE_ROOM_CHAT")] EPushTypeRoomChat = 106,
    /// <summary>
    //// 更改用户状态广播
    /// </summary>
    [pbr::OriginalName("E_PUSH_TYPE_PLAYER_STATE")] EPushTypePlayerState = 107,
    /// <summary>
    //// 开始游戏广播
    /// </summary>
    [pbr::OriginalName("E_PUSH_TYPE_START_GAME")] EPushTypeStartGame = 108,
    /// <summary>
    //// 结束游戏广播
    /// </summary>
    [pbr::OriginalName("E_PUSH_TYPE_STOP_GAME")] EPushTypeStopGame = 109,
    /// <summary>
    //// 创建房间 - 自定义服务逻辑
    /// </summary>
    [pbr::OriginalName("E_PUSH_TYPE_CREATE_ROOM")] EPushTypeCreateRoom = 110,
    /// <summary>
    //// 销毁房间 - 自定义服务逻辑
    /// </summary>
    [pbr::OriginalName("E_PUSH_TYPE_DESTROY_ROOM")] EPushTypeDestroyRoom = 111,
    /// <summary>
    //// 匹配Push信息 (200-299)
    /// </summary>
    [pbr::OriginalName("E_PUSH_TYPE_MATCH_SUCCESS")] EPushTypeMatchSuccess = 200,
    /// <summary>
    //// 匹配超时广播
    /// </summary>
    [pbr::OriginalName("E_PUSH_TYPE_MATCH_TIMEOUT")] EPushTypeMatchTimeout = 201,
    /// <summary>
    //// 玩家取消匹配广播
    /// </summary>
    [pbr::OriginalName("E_PUSH_TYPE_MATCH_CANCEL")] EPushTypeMatchCancel = 202,
    /// <summary>
    //// 队组广播
    /// </summary>
    [pbr::OriginalName("E_PUSH_TYPE_JOIN_GROUP")] EPushTypeJoinGroup = 500,
    /// <summary>
    //// 退出队组广播
    /// </summary>
    [pbr::OriginalName("E_PUSH_TYPE_LEAVE_GROUP")] EPushTypeLeaveGroup = 501,
    /// <summary>
    //// 解散队组广播
    /// </summary>
    [pbr::OriginalName("E_PUSH_TYPE_DISMISS_GROUP")] EPushTypeDismissGroup = 502,
    /// <summary>
    //// 修改队组广播
    /// </summary>
    [pbr::OriginalName("E_PUSH_TYPE_MODIFY_GROUP_PROPERTY")] EPushTypeModifyGroupProperty = 503,
    /// <summary>
    //// 移除队组内玩家广播
    /// </summary>
    [pbr::OriginalName("E_PUSH_TYPE_REMOVE_GROUP_PLAYER")] EPushTypeRemoveGroupPlayer = 504,
    /// <summary>
    //// 队组内玩家自定义状态变化广播
    /// </summary>
    [pbr::OriginalName("E_PUSH_TYPE_GROUP_PLAYER_STATE")] EPushTypeGroupPlayerState = 505,
    /// <summary>
    //// 收到对组内其他玩家消息广播
    /// </summary>
    [pbr::OriginalName("E_PUSH_TYPE_GROUP_CHAT")] EPushTypeGroupChat = 506,
  }

  /// <summary>
  //// 对外命令字枚举类型（分段），由access_svr在diapatch层转换成string再透传到后端
  /// </summary>
  public enum ProtoCmd {
    /// <summary>
    //////////接入层 （100-999）//////////
    /// </summary>
    [pbr::OriginalName("E_CMD_INVALID")] ECmdInvalid = 0,
    /// <summary>
    //// 应用层心跳包
    /// </summary>
    [pbr::OriginalName("E_CMD_HEART_BEAT_REQ")] ECmdHeartBeatReq = 100,
    /// <summary>
    //// 检查登陆
    /// </summary>
    [pbr::OriginalName("E_CMD_CHECK_LOGIN_REQ")] ECmdCheckLoginReq = 101,
    /// <summary>
    //// 登录通知房间
    /// </summary>
    [pbr::OriginalName("E_CMD_LOGIN_TO_ROOM_REQ")] ECmdLoginToRoomReq = 102,
    /// <summary>
    //// 转发包到Relay
    /// </summary>
    [pbr::OriginalName("E_CMD_FORWARD_TO_RELAY_REQ")] ECmdForwardToRelayReq = 103,
    /// <summary>
    //////////用户中心 （1000-1999）/////////
    /// </summary>
    [pbr::OriginalName("E_CMD_LOGIN_REQ")] ECmdLoginReq = 1000,
    /// <summary>
    //// 登出
    /// </summary>
    [pbr::OriginalName("E_CMD_LOGOUT_REQ")] ECmdLogoutReq = 1001,
    /// <summary>
    //// 鉴权
    /// </summary>
    [pbr::OriginalName("E_CMD_AUTH_REQ")] ECmdAuthReq = 1002,
    /// <summary>
    //// 根据用户ID查询用户
    /// </summary>
    [pbr::OriginalName("E_CMD_QUERY_BY_PLAYER_ID_REQ")] ECmdQueryByPlayerIdReq = 1003,
    /// <summary>
    //// 根据game_id player_id 询用户
    /// </summary>
    [pbr::OriginalName("E_CMD_QUERY_BY_GAME_ID_REQ")] ECmdQueryByGameIdReq = 1004,
    /// <summary>
    //////////房间类 （2000-2999）///////
    /// </summary>
    [pbr::OriginalName("E_CMD_GET_ROOM_DETAIL_REQ")] ECmdGetRoomDetailReq = 2001,
    /// <summary>
    //// 加入指定房间
    /// </summary>
    [pbr::OriginalName("E_CMD_JOIN_ROOM_REQ")] ECmdJoinRoomReq = 2002,
    /// <summary>
    //// 退出房间
    /// </summary>
    [pbr::OriginalName("E_CMD_QUIT_ROOM_REQ")] ECmdQuitRoomReq = 2003,
    /// <summary>
    //// 创建房间
    /// </summary>
    [pbr::OriginalName("E_CMD_CREATE_ROOM_REQ")] ECmdCreateRoomReq = 2004,
    /// <summary>
    //// 销毁房间
    /// </summary>
    [pbr::OriginalName("E_CMD_DESTORY_ROOM_REQ")] ECmdDestoryRoomReq = 2005,
    /// <summary>
    //// 踢人
    /// </summary>
    [pbr::OriginalName("E_CMD_REMOVE_MEMBER_REQ")] ECmdRemoveMemberReq = 2006,
    /// <summary>
    //// 更改房间属性
    /// </summary>
    [pbr::OriginalName("E_CMD_CHANGE_ROOM_PROPERTIS_REQ")] ECmdChangeRoomPropertisReq = 2007,
    /// <summary>
    //// 解散房间
    /// </summary>
    [pbr::OriginalName("E_CMD_DISSMISS_ROOM_REQ")] ECmdDissmissRoomReq = 2008,
    /// <summary>
    //// 更改用户状态
    /// </summary>
    [pbr::OriginalName("E_CMD_CHANGE_PLAYER_STATE_REQ")] ECmdChangePlayerStateReq = 2009,
    /// <summary>
    //// 更改用户网络状态
    /// </summary>
    [pbr::OriginalName("E_CMD_CHANGE_PLAYER_NETWORK_STATE_REQ")] ECmdChangePlayerNetworkStateReq = 2010,
    /// <summary>
    //// 房间聊天
    /// </summary>
    [pbr::OriginalName("E_CMD_ROOM_CHAT_REQ")] ECmdRoomChatReq = 2011,
    /// <summary>
    //// 开始帧同步
    /// </summary>
    [pbr::OriginalName("E_CMD_START_FRAME_SYNC_REQ")] ECmdStartFrameSyncReq = 2012,
    /// <summary>
    //// 停止帧同步
    /// </summary>
    [pbr::OriginalName("E_CMD_STOP_FRAME_SYNC_REQ")] ECmdStopFrameSyncReq = 2013,
    /// <summary>
    //// 查询房间列表 - 老接口 select_room_list_handler
    /// </summary>
    [pbr::OriginalName("E_CMD_GET_ROOM_LIST_REQ")] ECmdGetRoomListReq = 2014,
    /// <summary>
    //// 服务端踢人
    /// </summary>
    [pbr::OriginalName("E_CMD_SVR_REMOVE_MEMBER_REQ")] ECmdSvrRemoveMemberReq = 2015,
    /// <summary>
    //// 服务端更改房间属性
    /// </summary>
    [pbr::OriginalName("E_CMD_SVR_CHANGE_ROOM_PROPERTIS_REQ")] ECmdSvrChangeRoomPropertisReq = 2016,
    /// <summary>
    //// 服务端更改用户状态
    /// </summary>
    [pbr::OriginalName("E_CMD_SVR_CHANGE_PLAYER_STATE_REQ")] ECmdSvrChangePlayerStateReq = 2017,
    /// <summary>
    //// 查询房间列表 - 新接口 get_room_list_handler
    /// </summary>
    [pbr::OriginalName("E_CMD_GET_ROOM_LIST_V2_REQ")] ECmdGetRoomListV2Req = 2018,
    /// <summary>
    //// 创建房间 - 第三方创房，通过openId发起
    /// </summary>
    [pbr::OriginalName("E_CMD_CREATE_ROOM_FOR_THIRD_PARTY_REQ")] ECmdCreateRoomForThirdPartyReq = 2019,
    /// <summary>
    //////////匹配服务类 （3000-3999）/////////
    /// </summary>
    [pbr::OriginalName("E_CMD_MATCH_ROOM_SIMPLE_REQ")] ECmdMatchRoomSimpleReq = 3001,
    /// <summary>
    //// 简单在线匹配
    /// </summary>
    [pbr::OriginalName("E_CMD_MATCH_USER_SIMPLE_REQ")] ECmdMatchUserSimpleReq = 3002,
    /// <summary>
    //// 取消匹配
    /// </summary>
    [pbr::OriginalName("E_CMD_MATCH_CANCEL_MATCH_REQ")] ECmdMatchCancelMatchReq = 3003,
    /// <summary>
    //// 复杂房间匹配
    /// </summary>
    [pbr::OriginalName("E_CMD_MATCH_ROOM_COMPLEX_REQ")] ECmdMatchRoomComplexReq = 3004,
    /// <summary>
    //// 复杂在线匹配
    /// </summary>
    [pbr::OriginalName("E_CMD_MATCH_PLAYER_COMPLEX_REQ")] ECmdMatchPlayerComplexReq = 3005,
    /// <summary>
    //// 组队匹配
    /// </summary>
    [pbr::OriginalName("E_CMD_MATCH_GROUP_REQ")] ECmdMatchGroupReq = 3006,
    /// <summary>
    //////////帧同步或状态同步 （4000-4999）/////////
    /// </summary>
    [pbr::OriginalName("E_CMD_RELAY_SEND_FRAME_REQ")] ECmdRelaySendFrameReq = 4000,
    /// <summary>
    //// 补帧
    /// </summary>
    [pbr::OriginalName("E_CMD_RELAY_REQUEST_FRAME_REQ")] ECmdRelayRequestFrameReq = 4001,
    /// <summary>
    //// sdk发消息给自定义扩展服务gamesvr
    /// </summary>
    [pbr::OriginalName("E_CMD_RELAY_CLIENT_SENDTO_GAMESVR_REQ")] ECmdRelayClientSendtoGamesvrReq = 4002,
    /// <summary>
    //// 自定义扩展服务gamesvr给客户端发送消息
    /// </summary>
    [pbr::OriginalName("E_CMD_RELAY_CLIENT_RECV_FROM_GAMESVR_REQ")] ECmdRelayClientRecvFromGamesvrReq = 4003,
    /// <summary>
    //////////消息或事件推送（5000-5999）
    /// </summary>
    [pbr::OriginalName("E_CMD_NOTIFY_JOIN_ROOM")] ECmdNotifyJoinRoom = 5000,
    /// <summary>
    //// 退房事件广播（通知回调）
    /// </summary>
    [pbr::OriginalName("E_CMD_NOTIFY_QUIT_ROOM")] ECmdNotifyQuitRoom = 5001,
    /// <summary>
    //// 销毁房间广播（通知回调）
    /// </summary>
    [pbr::OriginalName("E_CMD_NOTIFY_DESTORY_ROOM")] ECmdNotifyDestoryRoom = 5002,
    /// <summary>
    //// 网络状态广播（通知回调）
    /// </summary>
    [pbr::OriginalName("E_CMD_NOTIFY_NET_STATE")] ECmdNotifyNetState = 5003,
    /// <summary>
    //// 踢人广播（通知回调）
    /// </summary>
    [pbr::OriginalName("E_CMD_NOTIFY_KICK_MEMBER")] ECmdNotifyKickMember = 5004,
    /// <summary>
    //////////Ctrl类 （6000-6999）/////////
    /// </summary>
    [pbr::OriginalName("E_CMD_GET_ADDR_BY_ROUTER_ID_REQ")] ECmdGetAddrByRouterIdReq = 6000,
    /// <summary>
    //////////队组类 （7000-7999）///////
    /// </summary>
    [pbr::OriginalName("E_CMD_GET_GROUP_DETAIL_REQ")] ECmdGetGroupDetailReq = 7001,
    /// <summary>
    //// 加入指定队组 JoinGroupReq
    /// </summary>
    [pbr::OriginalName("E_CMD_JOIN_GROUP_REQ")] ECmdJoinGroupReq = 7002,
    /// <summary>
    //// 退出队组 LeaveGroupReq
    /// </summary>
    [pbr::OriginalName("E_CMD_QUIT_GROUP_REQ")] ECmdQuitGroupReq = 7003,
    /// <summary>
    //// 创建队组 CreateGroupReq
    /// </summary>
    [pbr::OriginalName("E_CMD_CREATE_GROUP_REQ")] ECmdCreateGroupReq = 7004,
    /// <summary>
    //// 踢人 RemoveGroupPlayerReq
    /// </summary>
    [pbr::OriginalName("E_CMD_REMOVE_GROUP_MEMBER_REQ")] ECmdRemoveGroupMemberReq = 7005,
    /// <summary>
    //// 更改队组属性 ChangeGroupReq
    /// </summary>
    [pbr::OriginalName("E_CMD_CHANGE_GROUP_PROPERTIES_REQ")] ECmdChangeGroupPropertiesReq = 7006,
    /// <summary>
    //// 解散队组 DismissGroupReq
    /// </summary>
    [pbr::OriginalName("E_CMD_DISMISS_GROUP_REQ")] ECmdDismissGroupReq = 7007,
    /// <summary>
    //// 更改用户状态 ChangeCustomGroupPlayerStatusReq
    /// </summary>
    [pbr::OriginalName("E_CMD_CHANGE_GROUP_PLAYER_STATE_REQ")] ECmdChangeGroupPlayerStateReq = 7008,
    /// <summary>
    //// 更改用户网络状态
    /// </summary>
    [pbr::OriginalName("E_CMD_CHANGE_GROUP_PLAYER_NETWORK_STATE_REQ")] ECmdChangeGroupPlayerNetworkStateReq = 7009,
    /// <summary>
    //// 队组聊天 SendToGroupClientReq 
    /// </summary>
    [pbr::OriginalName("E_CMD_GROUP_CHAT_REQ")] ECmdGroupChatReq = 7010,
    /// <summary>
    //// 查询队组列表 GetMyGroupsReq
    /// </summary>
    [pbr::OriginalName("E_CMD_GET_GROUP_LIST_REQ")] ECmdGetGroupListReq = 7011,
  }

  /// <summary>
  ////QApp协议系统逻辑错误码(号段0~10000),业务错误码(10001~0xFFFFFFFF)
  ////10000～19999 用户中心
  ////20000～29999 房间管理
  ////30000～39999 匹配服务
  ////40000～49999 帧同步服务
  ////50000～59999 调度中心
  ////60000～69999 业务参数错误
  ////-60000～69999  负数 - 系统内部错误，统一提示系统错误
  ////90000～99999 预留给客户端
  /// </summary>
  public enum QAppProtoErrCode {
    /// <summary>
    ////系统框架错误
    /// </summary>
    [pbr::OriginalName("EC_OK")] EcOk = 0,
    /// <summary>
    //// 请求包格式错误
    /// </summary>
    [pbr::OriginalName("EC_REQ_BAD_PKG")] EcReqBadPkg = 1,
    /// <summary>
    //// 非法命令字
    /// </summary>
    [pbr::OriginalName("EC_CMD_INVALID")] EcCmdInvalid = 2,
    /// <summary>
    //// 参数错误
    /// </summary>
    [pbr::OriginalName("EC_PARAMS_INVALID")] EcParamsInvalid = 3,
    /// <summary>
    //// 服务器内部错误
    /// </summary>
    [pbr::OriginalName("EC_INNER_ERROR")] EcInnerError = 4,
    /// <summary>
    //// 后端超时错误
    /// </summary>
    [pbr::OriginalName("EC_TIME_OUT")] EcTimeOut = 5,
    /// <summary>
    //// 服务器繁忙
    /// </summary>
    [pbr::OriginalName("EC_SERVER_BUSY")] EcServerBusy = 6,
    /// <summary>
    //// 没有权限请求
    /// </summary>
    [pbr::OriginalName("EC_NO_RIGHT")] EcNoRight = 7,
    /// <summary>
    ////接入层错误码
    /// </summary>
    [pbr::OriginalName("EC_ACCESS_CMD_INVALID_ERR")] EcAccessCmdInvalidErr = 200,
    /// <summary>
    //// 获取Token失败
    /// </summary>
    [pbr::OriginalName("EC_ACCESS_CMD_GET_TOKEN_ERR")] EcAccessCmdGetTokenErr = 201,
    /// <summary>
    //// Token即将过期
    /// </summary>
    [pbr::OriginalName("EC_ACCESS_CMD_TOKEN_PRE_EXPIRE")] EcAccessCmdTokenPreExpire = 202,
    /// <summary>
    //// Token无效或过期
    /// </summary>
    [pbr::OriginalName("EC_ACCESS_CMD_INVALID_TOKEN")] EcAccessCmdInvalidToken = 203,
    /// <summary>
    //// PUSH序列化包失败
    /// </summary>
    [pbr::OriginalName("EC_ACCESS_PUSH_SERIALIZE_ERR")] EcAccessPushSerializeErr = 204,
    /// <summary>
    //// 登陆用户中心回包解析出错
    /// </summary>
    [pbr::OriginalName("EC_ACCESS_LOGIN_BODY_PARSE_ERR")] EcAccessLoginBodyParseErr = 205,
    /// <summary>
    //// 查找连接信息出错
    /// </summary>
    [pbr::OriginalName("EC_ACCESS_CONN_ERR")] EcAccessConnErr = 206,
    /// <summary>
    //// 获取Relay的RS_IP或RS_PORT出错
    /// </summary>
    [pbr::OriginalName("EC_ACCESS_GET_RS_IP_ERR")] EcAccessGetRsIpErr = 207,
    /// <summary>
    //// 添加COMM连接信息失败
    /// </summary>
    [pbr::OriginalName("EC_ACCESS_ADD_COMM_CONN_ERR")] EcAccessAddCommConnErr = 208,
    /// <summary>
    //// 添加心跳连接信息失败
    /// </summary>
    [pbr::OriginalName("EC_ACCESS_ADD_HEART_CONN_ERR")] EcAccessAddHeartConnErr = 209,
    /// <summary>
    //// 添加Relay连接信息失败
    /// </summary>
    [pbr::OriginalName("EC_ACCESS_ADD_RELAY_CONN_ERR")] EcAccessAddRelayConnErr = 210,
    /// <summary>
    //// 心跳包解析出错
    /// </summary>
    [pbr::OriginalName("EC_ACCESS_HEART_BODY_PARSE_ERR")] EcAccessHeartBodyParseErr = 211,
    /// <summary>
    //// 获取COMM连接信息失效
    /// </summary>
    [pbr::OriginalName("EC_ACCESS_GET_COMM_CONNECT_ERR")] EcAccessGetCommConnectErr = 212,
    /// <summary>
    //// 获取RELAY连接信息失效
    /// </summary>
    [pbr::OriginalName("EC_ACCESS_GET_RELAY_CONNECT_ERR")] EcAccessGetRelayConnectErr = 213,
    /// <summary>
    //// 连接信息为空
    /// </summary>
    [pbr::OriginalName("EC_ACCESS_ACCESS_INFO_EMPTY")] EcAccessAccessInfoEmpty = 214,
    /// <summary>
    //// 用户已经登录，不能重复登录
    /// </summary>
    [pbr::OriginalName("EC_ACCESS_PLAYER_DUPLICATE_LOGIN")] EcAccessPlayerDuplicateLogin = 215,
    /// <summary>
    //// 转发SVR名字错误，不是relay_svr或state_svr
    /// </summary>
    [pbr::OriginalName("EC_ACCESS_NOE_RELAY_OR_STATE_SVR")] EcAccessNoeRelayOrStateSvr = 216,
    /// <summary>
    ////用户中心错误（10000～19999）
    /// </summary>
    [pbr::OriginalName("EC_PLAYER_GAME_NOT_EXIST")] EcPlayerGameNotExist = 10000,
    /// <summary>
    //// 查询secret_key失败
    /// </summary>
    [pbr::OriginalName("EC_PLAYER_SECRET_KEY_FAIL")] EcPlayerSecretKeyFail = 10001,
    /// <summary>
    //// sign校验失败
    /// </summary>
    [pbr::OriginalName("EC_PLAYER_SIGN_ERR")] EcPlayerSignErr = 10002,
    /// <summary>
    //// 重复请求
    /// </summary>
    [pbr::OriginalName("EC_PLAYER_DUPLICATE_REQ")] EcPlayerDuplicateReq = 10003,
    /// <summary>
    //// timestamp非法
    /// </summary>
    [pbr::OriginalName("EC_PLAYER_TIMESTAMP_INVALID")] EcPlayerTimestampInvalid = 10004,
    /// <summary>
    //// 查询用户信息失败
    /// </summary>
    [pbr::OriginalName("EC_PLAYER_QUERY_PLAYER_FAIL")] EcPlayerQueryPlayerFail = 10005,
    /// <summary>
    //// 新增用户信息失败
    /// </summary>
    [pbr::OriginalName("EC_PLAYER_ADD_PLAYER_FAIL")] EcPlayerAddPlayerFail = 10006,
    /// <summary>
    //// 查询game信息失败
    /// </summary>
    [pbr::OriginalName("EC_PLAYER_QUERY_GAME_FAIL")] EcPlayerQueryGameFail = 10007,
    /// <summary>
    //// 用户记录数不正确
    /// </summary>
    [pbr::OriginalName("EC_PLAYER_RECORD_NUM_ERR")] EcPlayerRecordNumErr = 10008,
    /// <summary>
    //// 查询token失败
    /// </summary>
    [pbr::OriginalName("EC_PLAYER_GET_TOKEN_FAIL")] EcPlayerGetTokenFail = 10009,
    /// <summary>
    //// token不存在
    /// </summary>
    [pbr::OriginalName("EC_PLAYER_TOKEN_NOT_EXIST")] EcPlayerTokenNotExist = 10010,
    /// <summary>
    //// token非法
    /// </summary>
    [pbr::OriginalName("EC_PLAYER_TOKEN_INVALID")] EcPlayerTokenInvalid = 10011,
    /// <summary>
    //// 清除token缓存失败
    /// </summary>
    [pbr::OriginalName("EC_PLAYER_CLEAR_TOKEN_FAIL")] EcPlayerClearTokenFail = 10012,
    /// <summary>
    //// 获取分布式锁失败
    /// </summary>
    [pbr::OriginalName("EC_PLAYER_LOCK_FAIL")] EcPlayerLockFail = 10013,
    /// <summary>
    //// 释放分布式锁失败
    /// </summary>
    [pbr::OriginalName("EC_PLAYER_UNLOCK_FAIL")] EcPlayerUnlockFail = 10014,
    /// <summary>
    //// 保存token缓存失败
    /// </summary>
    [pbr::OriginalName("EC_PLAYER_SAVE_TOKEN_FAIL")] EcPlayerSaveTokenFail = 10015,
    /// <summary>
    //// 游戏已停止服务
    /// </summary>
    [pbr::OriginalName("EC_PLAYER_GAME_OUT_OF_SERVICE")] EcPlayerGameOutOfService = 10016,
    /// <summary>
    ////房间管理类错误（20000-29999）
    /// </summary>
    [pbr::OriginalName("EC_ROOM_CREATE_NO_PERMISSION")] EcRoomCreateNoPermission = 20000,
    /// <summary>
    //// 销毁房间无权限
    /// </summary>
    [pbr::OriginalName("EC_ROOM_DESTORY_NO_PERMISSION")] EcRoomDestoryNoPermission = 20001,
    /// <summary>
    //// 无权限加入房间
    /// </summary>
    [pbr::OriginalName("EC_ROOM_JOIN_NO_PERMISSION")] EcRoomJoinNoPermission = 20002,
    /// <summary>
    //// 无踢人权限
    /// </summary>
    [pbr::OriginalName("EC_ROOM_REMOVE_PLAYER_NO_PERMISSION")] EcRoomRemovePlayerNoPermission = 20003,
    /// <summary>
    //// 无修改房间属性权限
    /// </summary>
    [pbr::OriginalName("EC_ROOM_MODIFY_PROPERTIES_NO_PEMISSION")] EcRoomModifyPropertiesNoPemission = 20004,
    /// <summary>
    //// 无解散房间权限
    /// </summary>
    [pbr::OriginalName("EC_ROOM_DISSMISS_NO_PERMISSION")] EcRoomDissmissNoPermission = 20005,
    /// <summary>
    //// 无踢出自己权限
    /// </summary>
    [pbr::OriginalName("EC_ROOM_REMOVE_SELF_NO_PERMISSION")] EcRoomRemoveSelfNoPermission = 20006,
    /// <summary>
    //// 检查登录失败
    /// </summary>
    [pbr::OriginalName("EC_ROOM_CHECK_LOGIN_SESSION_ERR")] EcRoomCheckLoginSessionErr = 20007,
    /// <summary>
    //// 被踢玩家不在房间中
    /// </summary>
    [pbr::OriginalName("EC_ROOM_REMOVE_PLAYER_NOT_IN_ROOM")] EcRoomRemovePlayerNotInRoom = 20008,
    /// <summary>
    //// 用户已经在房间内，不能操作创建房间、加房等操作
    /// </summary>
    [pbr::OriginalName("EC_ROOM_PLAYER_ALREADY_IN_ROOM")] EcRoomPlayerAlreadyInRoom = 20010,
    /// <summary>
    //// 用户目前不在房间内，不能操作更改房间属性、踢人等操作
    /// </summary>
    [pbr::OriginalName("EC_ROOM_PLAYER_NOT_IN_ROOM")] EcRoomPlayerNotInRoom = 20011,
    /// <summary>
    //// 房间内用户数已经达到最大人数不能再加入了
    /// </summary>
    [pbr::OriginalName("EC_ROOM_PLAYERS_EXCEED_LIMIT")] EcRoomPlayersExceedLimit = 20012,
    /// <summary>
    //// 房间不允许加入用户
    /// </summary>
    [pbr::OriginalName("EC_ROOM_JOIN_NOT_ALLOW")] EcRoomJoinNotAllow = 20013,
    /// <summary>
    //// 最大用户数值设置非法
    /// </summary>
    [pbr::OriginalName("EC_ROOM_MAX_PLAYERS_INVALID")] EcRoomMaxPlayersInvalid = 20014,
    /// <summary>
    //// 创建房间失败
    /// </summary>
    [pbr::OriginalName("EC_ROOM_CREATE_FAIL")] EcRoomCreateFail = 20015,
    /// <summary>
    //// 用户在房间中掉线，不能开始游戏等操作
    /// </summary>
    [pbr::OriginalName("EC_ROOM_PLAYER_OFFLINE")] EcRoomPlayerOffline = 20016,
    /// <summary>
    //// 页号、页数大小参数不合法，可能实际大小没这么大
    /// </summary>
    [pbr::OriginalName("EC_ROOM_PARAM_PAGE_INVALID")] EcRoomParamPageInvalid = 20017,
    /// <summary>
    //// 查询用户信息失败
    /// </summary>
    [pbr::OriginalName("EC_ROOM_GET_PLAYER_INFO_ERR")] EcRoomGetPlayerInfoErr = 20050,
    /// <summary>
    //// 获取房间信息失败
    /// </summary>
    [pbr::OriginalName("EC_ROOM_GET_ROOM_INFO_ERR")] EcRoomGetRoomInfoErr = 20051,
    /// <summary>
    //// 修改房主失败
    /// </summary>
    [pbr::OriginalName("EC_ROOM_MODIFY_OWNER_ERR")] EcRoomModifyOwnerErr = 20052,
    /// <summary>
    //// 房间数量超过限制
    /// </summary>
    [pbr::OriginalName("EC_ROOM_MAX_ROOM_NUMBER_EXCEED_LIMIT")] EcRoomMaxRoomNumberExceedLimit = 20053,
    /// <summary>
    //// 删除用户房间映射表信息失败
    /// </summary>
    [pbr::OriginalName("EC_ROOM_REMOVE_REDIS_PLAYER_ROOM_MATCH_ERR")] EcRoomRemoveRedisPlayerRoomMatchErr = -20052,
    /// <summary>
    //// 删除房间信息表信息失败
    /// </summary>
    [pbr::OriginalName("EC_ROOM_REMOVE_REDIS_ROOM_INFO_ERR")] EcRoomRemoveRedisRoomInfoErr = -20053,
    /// <summary>
    //// 数据库更新失败
    /// </summary>
    [pbr::OriginalName("EC_ROOM_REDIS_UPDATE_ERR")] EcRoomRedisUpdateErr = -20054,
    /// <summary>
    //// 获取锁失败
    /// </summary>
    [pbr::OriginalName("EC_ROOM_REDIS_GET_LOCK_ERR")] EcRoomRedisGetLockErr = -20055,
    /// <summary>
    //// 检查锁失败，一般是过期
    /// </summary>
    [pbr::OriginalName("EC_ROOM_REDIS_CHECK_LOCK_ERR")] EcRoomRedisCheckLockErr = -20056,
    /// <summary>
    //// 删除锁失败
    /// </summary>
    [pbr::OriginalName("EC_ROOM_REDIS_DEL_LOCK_ERR")] EcRoomRedisDelLockErr = -20057,
    /// <summary>
    //// 查询用户信息失败
    /// </summary>
    [pbr::OriginalName("EC_ROOM_QUERY_PLAYER_ERR")] EcRoomQueryPlayerErr = 20060,
    /// <summary>
    //// 游戏信息失败
    /// </summary>
    [pbr::OriginalName("EC_ROOM_QUERY_GAME_ERR")] EcRoomQueryGameErr = 20061,
    /// <summary>
    //// 用户信息不存在
    /// </summary>
    [pbr::OriginalName("EC_ROOM_PLAYER_INFO_NOT_EXIST")] EcRoomPlayerInfoNotExist = 20062,
    /// <summary>
    //// 游戏信息不存在
    /// </summary>
    [pbr::OriginalName("EC_ROOM_GAME_INFO_NOT_EXIST")] EcRoomGameInfoNotExist = 20063,
    /// <summary>
    //// mysql数据库插入历史房间信息失败
    /// </summary>
    [pbr::OriginalName("EC_ROOM_HISTORY_INFO_INSERT_ERR")] EcRoomHistoryInfoInsertErr = -20064,
    /// <summary>
    //// 查询不到accessRegion信息
    /// </summary>
    [pbr::OriginalName("EC_ROOM_REGION_INFO_NOT_EXIST")] EcRoomRegionInfoNotExist = 20065,
    /// <summary>
    //// 查询地域信息失败
    /// </summary>
    [pbr::OriginalName("EC_ROOM_QUERY_REGION_ERR")] EcRoomQueryRegionErr = 20066,
    /// <summary>
    //// 操作冲突 需要重试 20070-20079
    /// </summary>
    [pbr::OriginalName("EC_ROOM_MODIFY_PLAYER_BUSY")] EcRoomModifyPlayerBusy = 20070,
    /// <summary>
    //// 房间信息不存在
    /// </summary>
    [pbr::OriginalName("EC_ROOM_INFO_UNEXIST")] EcRoomInfoUnexist = 20080,
    /// <summary>
    //// ctrlsvr分配relaysvr失败
    /// </summary>
    [pbr::OriginalName("EC_ROOM_ALLOCATE_RELAYSVR_IP_PORT_ERR")] EcRoomAllocateRelaysvrIpPortErr = 20090,
    /// <summary>
    ////teams
    /// </summary>
    [pbr::OriginalName("EC_ROOM_INVALID_PARAMS_TEAM_ID")] EcRoomInvalidParamsTeamId = 20100,
    /// <summary>
    //// 房间团队人员已满
    /// </summary>
    [pbr::OriginalName("EC_ROOM_TEAM_MEMBER_LIMIT_EXCEED")] EcRoomTeamMemberLimitExceed = 20101,
    /// <summary>
    //// room service op 20200
    /// </summary>
    [pbr::OriginalName("EC_ROOM_ALLOCATE_SERVICE_FAIL")] EcRoomAllocateServiceFail = -20200,
    /// <summary>
    ////匹配服务类错误 （30000～39999）
    /// </summary>
    [pbr::OriginalName("EC_MATCH_NO_ROOM")] EcMatchNoRoom = 30000,
    /// <summary>
    //// 匹配超时
    /// </summary>
    [pbr::OriginalName("EC_MATCH_TIMEOUT")] EcMatchTimeout = 30001,
    /// <summary>
    //// 匹配逻辑错误
    /// </summary>
    [pbr::OriginalName("EC_MATCH_LOGIC_ERR")] EcMatchLogicErr = 30002,
    /// <summary>
    //// 匹配失败
    /// </summary>
    [pbr::OriginalName("EC_MATCH_ERR")] EcMatchErr = 30010,
    /// <summary>
    //// 用户已经在匹配中
    /// </summary>
    [pbr::OriginalName("EC_MATCH_PLAYER_IS_IN_MATCH")] EcMatchPlayerIsInMatch = 30011,
    /// <summary>
    //// 用户不在匹配状态
    /// </summary>
    [pbr::OriginalName("EC_MATCH_PLAYER_NOT_IN_MATCH")] EcMatchPlayerNotInMatch = 30012,
    /// <summary>
    //// 获取匹配信息失败
    /// </summary>
    [pbr::OriginalName("EC_MATCH_GET_MATCH_INFO_ERR")] EcMatchGetMatchInfoErr = 30013,
    /// <summary>
    //// 更新匹配信息失败
    /// </summary>
    [pbr::OriginalName("EC_MATCH_UPDATE_MATCH_INFO_ERR")] EcMatchUpdateMatchInfoErr = 30014,
    /// <summary>
    //// 取消匹配失败
    /// </summary>
    [pbr::OriginalName("EC_MATCH_CANCEL_FAILED")] EcMatchCancelFailed = 30015,
    /// <summary>
    //// 查询匹配队列信息失败
    /// </summary>
    [pbr::OriginalName("EC_MATCH_GET_PLAYER_LIST_INFO_ERR")] EcMatchGetPlayerListInfoErr = 30016,
    /// <summary>
    //// 匹配创建房间失败
    /// </summary>
    [pbr::OriginalName("EC_MATCH_CREATE_ROOM_ERR")] EcMatchCreateRoomErr = 30041,
    /// <summary>
    //// 匹配加入房间失败
    /// </summary>
    [pbr::OriginalName("EC_MATCH_JOIN_ROOM_ERR")] EcMatchJoinRoomErr = 30042,
    /// <summary>
    //// 匹配无效参数
    /// </summary>
    [pbr::OriginalName("EC_MATCH_INVALID_PARAMS")] EcMatchInvalidParams = 30043,
    /// <summary>
    //// 匹配小组人数超过队伍上限
    /// </summary>
    [pbr::OriginalName("EC_MATCH_GROUP_NUM_EXCEED_LIMIT")] EcMatchGroupNumExceedLimit = 30044,
    /// <summary>
    //// 匹配小组中玩家ID重复
    /// </summary>
    [pbr::OriginalName("EC_MATCH_PLAYER_ID_IS_REPEATED")] EcMatchPlayerIdIsRepeated = 30045,
    /// <summary>
    //// 匹配创房 有玩家已经在房间中
    /// </summary>
    [pbr::OriginalName("EC_MATCH_CREATE_ROOM_PLAYER_ALREADY_IN_ROOM")] EcMatchCreateRoomPlayerAlreadyInRoom = 30050,
    /// <summary>
    //// 查询用户信息失败
    /// </summary>
    [pbr::OriginalName("EC_MATCH_QUERY_PLAYER_ERR")] EcMatchQueryPlayerErr = 30100,
    /// <summary>
    //// 用户信息不存在
    /// </summary>
    [pbr::OriginalName("EC_MATCH_PLAYER_INFO_NOT_EXIST")] EcMatchPlayerInfoNotExist = 30101,
    /// <summary>
    //// 查询游戏信息失败
    /// </summary>
    [pbr::OriginalName("EC_MATCH_QUERY_GAME_ERR")] EcMatchQueryGameErr = 30102,
    /// <summary>
    //// 游戏信息不存在
    /// </summary>
    [pbr::OriginalName("EC_MATCH_GAME_INFO_NOT_EXIST")] EcMatchGameInfoNotExist = 30103,
    /// <summary>
    //// 查询大区信息失败
    /// </summary>
    [pbr::OriginalName("EC_MATCH_QUERY_REGION_ERR")] EcMatchQueryRegionErr = 30104,
    /// <summary>
    //// 无大区信息
    /// </summary>
    [pbr::OriginalName("EC_MATCH_REGION_INFO_NOT_EXIST")] EcMatchRegionInfoNotExist = 30105,
    /// <summary>
    //// 团队匹配失败
    /// </summary>
    [pbr::OriginalName("EC_MATCH_TEAM_FAIL")] EcMatchTeamFail = 30106,
    /// <summary>
    //// 匹配规则不可用
    /// </summary>
    [pbr::OriginalName("EC_MATCH_PLAY_RULE_NOT_RUNNING")] EcMatchPlayRuleNotRunning = 30107,
    /// <summary>
    //// 匹配参数不完整
    /// </summary>
    [pbr::OriginalName("EC_MATCH_PLAY_ATTR_NOT_FOUND")] EcMatchPlayAttrNotFound = 30108,
    /// <summary>
    //// 匹配规则不存在
    /// </summary>
    [pbr::OriginalName("EC_MATCH_PLAY_RULE_NOT_FOUND")] EcMatchPlayRuleNotFound = 30109,
    /// <summary>
    //// 匹配规则获取属性匹配区间失败
    /// </summary>
    [pbr::OriginalName("EC_MATCH_PLAY_RULE_ATTR_SEGMENT_NOT_FOUND")] EcMatchPlayRuleAttrSegmentNotFound = 30110,
    /// <summary>
    //// 匹配规则算法错误
    /// </summary>
    [pbr::OriginalName("EC_MATCH_PLAY_RULE_FUNC_ERR")] EcMatchPlayRuleFuncErr = 30111,
    /// <summary>
    //// 匹配获取玩家属性失败
    /// </summary>
    [pbr::OriginalName("EC_MATCH_GET_PLAYER_ATTR_FAIL")] EcMatchGetPlayerAttrFail = 30112,
    /// <summary>
    //// 匹配获取队伍属性失败
    /// </summary>
    [pbr::OriginalName("EC_MATCH_GET_TEAM_ATTR_FAIL")] EcMatchGetTeamAttrFail = 30113,
    /// <summary>
    //// 玩家属性无法决定队伍类别
    /// </summary>
    [pbr::OriginalName("EC_MATCH_NONE_TEAM_TYPE_FIT")] EcMatchNoneTeamTypeFit = 30114,
    /// <summary>
    //// 玩家伍类别非法
    /// </summary>
    [pbr::OriginalName("EC_MATCH_TEAM_TYPE_INVALID")] EcMatchTeamTypeInvalid = 30115,
    /// <summary>
    //// 玩家属性不存在
    /// </summary>
    [pbr::OriginalName("EC_MATCH_PLAYER_ATTR_NOT_FOUND")] EcMatchPlayerAttrNotFound = 30116,
    /// <summary>
    //// 匹配请求ID不存在
    /// </summary>
    [pbr::OriginalName("EC_MATCH_REQUEST_ID_NOT_EXIST")] EcMatchRequestIdNotExist = 30117,
    /// <summary>
    //// 匹配请求ID已经存在
    /// </summary>
    [pbr::OriginalName("EC_MATCH_REQUEST_ID_IS_EXIST")] EcMatchRequestIdIsExist = 30118,
    /// <summary>
    //// 队伍匹配失败
    /// </summary>
    [pbr::OriginalName("EC_MATCH_TEAM_MATCH_FAIL")] EcMatchTeamMatchFail = 30119,
    /// <summary>
    //// 匹配机器人Group不正确
    /// </summary>
    [pbr::OriginalName("EC_MATCH_ROBOT_GROUP_NOT_RIGHT")] EcMatchRobotGroupNotRight = 30120,
    /// <summary>
    //// 匹配机器人Team不正确
    /// </summary>
    [pbr::OriginalName("EC_MATCH_ROBOT_TEAM_NOT_RIGHT")] EcMatchRobotTeamNotRight = 30121,
    /// <summary>
    //// 匹配内部逻辑错误
    /// </summary>
    [pbr::OriginalName("EC_MATCH_INNER_LOGIC_ERR")] EcMatchInnerLogicErr = -30150,
    /// <summary>
    //// 匹配内部参数错误
    /// </summary>
    [pbr::OriginalName("EC_MATCH_INNER_PARAMS_ERR")] EcMatchInnerParamsErr = -30160,
    /// <summary>
    //// 匹配房间 添加节点失败
    /// </summary>
    [pbr::OriginalName("EC_MATCH_ROOM_INNER_ADD_NODE_ERR")] EcMatchRoomInnerAddNodeErr = -30170,
    /// <summary>
    //// 匹配房间 删除节点失败
    /// </summary>
    [pbr::OriginalName("EC_MATCH_ROOM_INNER_DEL_NODE_ERR")] EcMatchRoomInnerDelNodeErr = -30171,
    /// <summary>
    //// 匹配不是GSE类型 查询匹配结果失败
    /// </summary>
    [pbr::OriginalName("EC_MATCH_RESULT_TYPE_NOT_GSE")] EcMatchResultTypeNotGse = -30172,
    /// <summary>
    //// 匹配已经取消
    /// </summary>
    [pbr::OriginalName("EC_MATCH_REQUEST_CANCELED")] EcMatchRequestCanceled = 30173,
    /// <summary>
    ////帧同步服务类错误（40000-49999）
    /// </summary>
    [pbr::OriginalName("EC_RELAY_ALREADY_EXISTS")] EcRelayAlreadyExists = 40000,
    /// <summary>
    ////服务不存在
    /// </summary>
    [pbr::OriginalName("EC_RELAY_NOT_EXISTS")] EcRelayNotExists = 40001,
    /// <summary>
    ////data长度超限制
    /// </summary>
    [pbr::OriginalName("EC_RELAY_DATA_EXCEED_LIMITED")] EcRelayDataExceedLimited = 40002,
    /// <summary>
    ////成员已存在
    /// </summary>
    [pbr::OriginalName("EC_RELAY_MEMBER_ALREADY_EXISTS")] EcRelayMemberAlreadyExists = 40003,
    /// <summary>
    ////成员不存在
    /// </summary>
    [pbr::OriginalName("EC_RELAY_MEMBER_NOT_EXISTS")] EcRelayMemberNotExists = 40004,
    /// <summary>
    ////状态异常
    /// </summary>
    [pbr::OriginalName("EC_RELAY_STATE_INVALID")] EcRelayStateInvalid = 40005,
    /// <summary>
    ////帧率非法
    /// </summary>
    [pbr::OriginalName("EC_RELAY_INVALID_FRAME_RATE")] EcRelayInvalidFrameRate = 40006,
    /// <summary>
    ////开局状态下，G不允许修改帧率
    /// </summary>
    [pbr::OriginalName("EC_RELAY_SET_FRAME_RATE_FORBIDDEN")] EcRelaySetFrameRateForbidden = 40007,
    /// <summary>
    ////没任何成员
    /// </summary>
    [pbr::OriginalName("EC_RELAY_NO_MEMBERS")] EcRelayNoMembers = 40008,
    /// <summary>
    ////自定义扩展服务（gamesvr）未开通
    /// </summary>
    [pbr::OriginalName("EC_RELAY_GAMESVR_SERVICE_NOT_OPEN")] EcRelayGamesvrServiceNotOpen = 40009,
    /// <summary>
    ////请求分配pod失败
    /// </summary>
    [pbr::OriginalName("EC_RELAY_REQ_POD_FAIL")] EcRelayReqPodFail = 40010,
    /// <summary>
    ////无可用的pod
    /// </summary>
    [pbr::OriginalName("EC_RELAY_NO_AVAILABLE_POD")] EcRelayNoAvailablePod = 40011,
    /// <summary>
    ////查询帧缓存失败
    /// </summary>
    [pbr::OriginalName("EC_RELAY_GET_FRAME_CACHE_FAIL")] EcRelayGetFrameCacheFail = 40012,
    /// <summary>
    ////共享内存缓存错误
    /// </summary>
    [pbr::OriginalName("EC_RELAY_HKV_CACHE_ERROR")] EcRelayHkvCacheError = 40015,
    /// <summary>
    ////redis缓存错误
    /// </summary>
    [pbr::OriginalName("EC_RELAY_REDIS_CACHE_ERROR")] EcRelayRedisCacheError = 40016,
    /// <summary>
    ////通知relayworker失败
    /// </summary>
    [pbr::OriginalName("EC_RELAY_NOTIFY_RELAYWORKER_FAIL")] EcRelayNotifyRelayworkerFail = 40018,
    /// <summary>
    ////重置房间对局失败
    /// </summary>
    [pbr::OriginalName("EC_RELAY_RESET_RELAY_ROOM_FAIL")] EcRelayResetRelayRoomFail = 40019,
    /// <summary>
    ////清理房间对局数据失败
    /// </summary>
    [pbr::OriginalName("EC_RELAY_CLEAN_RELAY_ROOM_FAIL")] EcRelayCleanRelayRoomFail = 40020,
    /// <summary>
    ////没权限，401开头是权限相关错误
    /// </summary>
    [pbr::OriginalName("EC_RELAY_NO_PERMISSION")] EcRelayNoPermission = 40100,
    /// <summary>
    ////通知自定义服务gamesvr失败， 402开头，是自定义gamesvr相关的错误
    /// </summary>
    [pbr::OriginalName("EC_RELAY_NOTIFY_GAMESVR_FAIL")] EcRelayNotifyGamesvrFail = 40200,
    /// <summary>
    ////转发到自定义逻辑svr失败
    /// </summary>
    [pbr::OriginalName("EC_RELAY_FORWARD_TO_GAMESVR_FAIL")] EcRelayForwardToGamesvrFail = 40201,
    /// <summary>
    ////转发到client-sdk失败
    /// </summary>
    [pbr::OriginalName("EC_RELAY_FORWARD_TO_CLIENT_FAIL")] EcRelayForwardToClientFail = 40202,
    /// <summary>
    //// 队组错误码
    /// </summary>
    [pbr::OriginalName("EC_GROUP_OPERATION_FAILED")] EcGroupOperationFailed = 70000,
    /// <summary>
    //// 队组名称参数错误
    /// </summary>
    [pbr::OriginalName("EC_INVALID_PARAMS_GROUP_NAME")] EcInvalidParamsGroupName = 70001,
    /// <summary>
    //// 队组类型参数错误
    /// </summary>
    [pbr::OriginalName("EC_INVALID_PARAMS_GROUP_TYPE")] EcInvalidParamsGroupType = 70002,
    /// <summary>
    //// 队组自定义属性参数错误
    /// </summary>
    [pbr::OriginalName("EC_INVALID_PARAMS_GROUP_CUSTOM_PROPERTIES")] EcInvalidParamsGroupCustomProperties = 70003,
    /// <summary>
    //// 队组玩家名称参数错误
    /// </summary>
    [pbr::OriginalName("EC_INVALID_PARAMS_GROUP_PLAYER_NAME")] EcInvalidParamsGroupPlayerName = 70004,
    /// <summary>
    //// 队组玩家自定义状态参数错误
    /// </summary>
    [pbr::OriginalName("EC_INVALID_PARAMS_GROUP_PLAYER_CUSTOM_STATUS")] EcInvalidParamsGroupPlayerCustomStatus = 70005,
    /// <summary>
    //// 队组玩家自定义属性参数错误
    /// </summary>
    [pbr::OriginalName("EC_INVALID_PARAMS_GROUP_PLAYER_CUSTOM_PROPERTIES")] EcInvalidParamsGroupPlayerCustomProperties = 70006,
    /// <summary>
    //// 无权限修改队组队长
    /// </summary>
    [pbr::OriginalName("EC_GROUP_MODIFY_OWNER_NO_PERMISSION")] EcGroupModifyOwnerNoPermission = 70007,
    /// <summary>
    //// 队组id参数错误
    /// </summary>
    [pbr::OriginalName("EC_INVALID_PARAMS_GROUP_ID")] EcInvalidParamsGroupId = 70008,
    /// <summary>
    //// 无效的修改选项
    /// </summary>
    [pbr::OriginalName("EC_INVALID_CHANGE_OPTION")] EcInvalidChangeOption = 70009,
    /// <summary>
    //// 队组 owner 参数错误
    /// </summary>
    [pbr::OriginalName("EC_INVALID_PARAMS_GROUP_OWNER")] EcInvalidParamsGroupOwner = 70010,
    /// <summary>
    //// 玩家已经在队组中
    /// </summary>
    [pbr::OriginalName("EC_PLAYER_IS_EXIST_GROUP")] EcPlayerIsExistGroup = 70011,
    /// <summary>
    //// 玩家不在该队组中
    /// </summary>
    [pbr::OriginalName("EC_PLAYER_IS_NOT_EXIST_GROUP")] EcPlayerIsNotExistGroup = 70012,
    /// <summary>
    //// 被移除的玩家Id为空
    /// </summary>
    [pbr::OriginalName("EC_REMOVE_PLAYER_ID_IS_EMPTY")] EcRemovePlayerIdIsEmpty = 70013,
    /// <summary>
    //// 没有权限移除玩家
    /// </summary>
    [pbr::OriginalName("EC_GROUP_REMOVE_PLAYER_NO_PERMISSION")] EcGroupRemovePlayerNoPermission = 70014,
    /// <summary>
    //// 队组接收消息类型参数错误
    /// </summary>
    [pbr::OriginalName("EC_INVALID_PARAMS_GROUP_RECV_TYPE")] EcInvalidParamsGroupRecvType = 70015,
    /// <summary>
    //// 队组接收消息的玩家中存在不在队组中的玩家
    /// </summary>
    [pbr::OriginalName("EC_INVALID_PARAMS_RECV_PLAYER_ID")] EcInvalidParamsRecvPlayerId = 70016,
    /// <summary>
    //// 消息长度超过限制
    /// </summary>
    [pbr::OriginalName("EC_INVALID_PARAMS_MESSAGE_LENGTH")] EcInvalidParamsMessageLength = 70017,
    /// <summary>
    //// 最大玩家数量参数错误
    /// </summary>
    [pbr::OriginalName("EC_INVALID_PARAMS_MAX_PLAYER")] EcInvalidParamsMaxPlayer = 70018,
    /// <summary>
    //// 持久化队组数量超过限制
    /// </summary>
    [pbr::OriginalName("PERSISTENCE_GROUP_NUM_EXCEED_THE_LIMIT")] PersistenceGroupNumExceedTheLimit = 70019,
    /// <summary>
    //// 玩家不在队组中不允许操作
    /// </summary>
    [pbr::OriginalName("EC_INVALID_PARAMS_PLAYER_NOT_IN_GROUP")] EcInvalidParamsPlayerNotInGroup = 70020,
    /// <summary>
    //// 没有队组操作权限
    /// </summary>
    [pbr::OriginalName("NO_GROUP_OPERATION_PERMISSION")] NoGroupOperationPermission = 70021,
    /// <summary>
    //// 队组禁止玩家加入
    /// </summary>
    [pbr::OriginalName("EC_OPERATION_FAILED_GROUP_FORBID_JOIN")] EcOperationFailedGroupForbidJoin = 70022,
    /// <summary>
    //// 发送消息频率达到限制
    /// </summary>
    [pbr::OriginalName("EC_GROUP_CHAT_FREQUENCY_LIMIT")] EcGroupChatFrequencyLimit = 70023,
    /// <summary>
    //// 对组中人数超过限制
    /// </summary>
    [pbr::OriginalName("EC_GROUP_PLAYER_NUM_LIMIT_EXCEED")] EcGroupPlayerNumLimitExceed = 70024,
    /// <summary>
    //// 玩家加入的对组个数超过限制
    /// </summary>
    [pbr::OriginalName("EC_PLAYER_GROUP_NUM_LIMIT_EXCEED")] EcPlayerGroupNumLimitExceed = 70025,
    /// <summary>
    //// 队组不存在
    /// </summary>
    [pbr::OriginalName("EC_GROUP_NOT_EXIST")] EcGroupNotExist = 70026,
    /// <summary>
    ////公共段参数错误 60000~65999
    /// </summary>
    [pbr::OriginalName("EC_INVALID_PARAMS")] EcInvalidParams = 60000,
    /// <summary>
    ///////匹配
    /// </summary>
    [pbr::OriginalName("EC_INVALID_PARAMS_PLAY_MODE_VERSION")] EcInvalidParamsPlayModeVersion = 60001,
    /// <summary>
    //// 玩法协议规则类型错误
    /// </summary>
    [pbr::OriginalName("EC_INVALID_PARAMS_PLAY_MODE_RULETYPE")] EcInvalidParamsPlayModeRuletype = 60002,
    /// <summary>
    //// 玩法协议规则表达式错误
    /// </summary>
    [pbr::OriginalName("EC_INVALID_PARAMS_PLAY_MODE_EXPRESSION")] EcInvalidParamsPlayModeExpression = 60003,
    /// <summary>
    //// 玩法协议规则团队表达式错误
    /// </summary>
    [pbr::OriginalName("EC_INVALID_PARAMS_PLAY_MODE_TEAM")] EcInvalidParamsPlayModeTeam = 60004,
    /// <summary>
    /////// msg queue 参数错误
    /// </summary>
    [pbr::OriginalName("EC_INVALID_PARAMS_MSGQ_ENCODE")] EcInvalidParamsMsgqEncode = 60020,
    /// <summary>
    //// 消息队列 消息decode 参数错误
    /// </summary>
    [pbr::OriginalName("EC_INVALID_PARAMS_MSGQ_DECODE")] EcInvalidParamsMsgqDecode = 60021,
    /// <summary>
    ///////CheckReq para check - 对外
    /// </summary>
    [pbr::OriginalName("EC_INVALID_PARAMS_GAME_ID")] EcInvalidParamsGameId = 61000,
    /// <summary>
    //// 参数错误 player_info
    /// </summary>
    [pbr::OriginalName("EC_INVALID_PARAMS_PLAYER_INFO")] EcInvalidParamsPlayerInfo = 61001,
    /// <summary>
    //// 参数错误 max_players
    /// </summary>
    [pbr::OriginalName("EC_INVALID_PARAMS_MAX_PLAYERS")] EcInvalidParamsMaxPlayers = 61002,
    /// <summary>
    //// 参数错误 room_type
    /// </summary>
    [pbr::OriginalName("EC_INVALID_PARAMS_ROOM_TYPE")] EcInvalidParamsRoomType = 61003,
    /// <summary>
    //// 参数错误 player_id
    /// </summary>
    [pbr::OriginalName("EC_INVALID_PARAMS_PLAYER_ID")] EcInvalidParamsPlayerId = 61004,
    /// <summary>
    //// 参数错误 match_type
    /// </summary>
    [pbr::OriginalName("EC_INVALID_PARAMS_MATCH_TYPE")] EcInvalidParamsMatchType = 61005,
    /// <summary>
    //// 参数错误 match_code
    /// </summary>
    [pbr::OriginalName("EC_INVALID_PARAMS_MATCH_CODE")] EcInvalidParamsMatchCode = 61006,
    /// <summary>
    //// 参数错误 open_id
    /// </summary>
    [pbr::OriginalName("EC_INVALID_PARAMS_OPEN_ID")] EcInvalidParamsOpenId = 61007,
    /// <summary>
    //// 参数错误 platform
    /// </summary>
    [pbr::OriginalName("EC_INVALID_PARAMS_PLATFORM")] EcInvalidParamsPlatform = 61008,
    /// <summary>
    //// 参数错误 timestamp
    /// </summary>
    [pbr::OriginalName("EC_INVALID_PARAMS_TIMESTAMP")] EcInvalidParamsTimestamp = 61009,
    /// <summary>
    //// 参数错误 sign
    /// </summary>
    [pbr::OriginalName("EC_INVALID_PARAMS_SIGN")] EcInvalidParamsSign = 61010,
    /// <summary>
    //// 参数错误 nonce
    /// </summary>
    [pbr::OriginalName("EC_INVALID_PARAMS_NONCE")] EcInvalidParamsNonce = 61011,
    /// <summary>
    //// 参数错误 token
    /// </summary>
    [pbr::OriginalName("EC_INVALID_PARAMS_TOKEN")] EcInvalidParamsToken = 61012,
    /// <summary>
    //// 参数错误 network_state
    /// </summary>
    [pbr::OriginalName("EC_INVALID_PARAMS_NETWORK_STATE")] EcInvalidParamsNetworkState = 61013,
    /// <summary>
    //// 参数错误 room_name
    /// </summary>
    [pbr::OriginalName("EC_INVALID_PARAMS_ROOM_NAME")] EcInvalidParamsRoomName = 61014,
    /// <summary>
    //// 参数错误 create_room_type
    /// </summary>
    [pbr::OriginalName("EC_INVALID_PARAMS_CREATE_ROOM_TYPE")] EcInvalidParamsCreateRoomType = 61015,
    /// <summary>
    //// 参数错误 device_id
    /// </summary>
    [pbr::OriginalName("EC_INVALID_PARAMS_DEVICE_ID")] EcInvalidParamsDeviceId = 61016,
    /// <summary>
    //// 参数错误 page_no
    /// </summary>
    [pbr::OriginalName("EC_INVALID_PARAMS_PAGE_NO")] EcInvalidParamsPageNo = 61017,
    /// <summary>
    //// 参数错误 page_size
    /// </summary>
    [pbr::OriginalName("EC_INVALID_PARAMS_PAGE_SIZE")] EcInvalidParamsPageSize = 61018,
    /// <summary>
    //// 参数错误 player list
    /// </summary>
    [pbr::OriginalName("EC_INVALID_PARAMS_PLAYER_LIST")] EcInvalidParamsPlayerList = 61019,
    /// <summary>
    //// 参数错误 message
    /// </summary>
    [pbr::OriginalName("EC_INVALID_PARAMS_MESSAGE")] EcInvalidParamsMessage = 61020,
    /// <summary>
    //// 参数错误 change_room_option_list
    /// </summary>
    [pbr::OriginalName("EC_INVALID_CHANGE_ROOM_OPTION")] EcInvalidChangeRoomOption = 61021,
    /// <summary>
    //// 参数错误 region
    /// </summary>
    [pbr::OriginalName("EC_INVALID_PARAMS_REGION")] EcInvalidParamsRegion = 61022,
    /// <summary>
    //// 参数错误 owner
    /// </summary>
    [pbr::OriginalName("EC_INVALID_PARAMS_OWNER")] EcInvalidParamsOwner = 61023,
    /// <summary>
    //// 参数错误 owner_open_id
    /// </summary>
    [pbr::OriginalName("EC_INVALID_PARAMS_OWNER_OPEN_ID")] EcInvalidParamsOwnerOpenId = 61024,
    /// <summary>
    ////EC_INVALID_PARAMS_OPEN_ID                   = 61025; /// 参数错误 open_id 非法
    /// </summary>
    [pbr::OriginalName("EC_INVALID_PARAMS_OPEN_ID_DUPLICATE")] EcInvalidParamsOpenIdDuplicate = 61026,
    /// <summary>
    //// 参数错误 create_type
    /// </summary>
    [pbr::OriginalName("EC_INVALID_PARAMS_ROOM_CREATE_TYPE")] EcInvalidParamsRoomCreateType = 61027,
    /// <summary>
    //// 系统错误 -6600~-69999
    ////myspp框架抛出-1000
    /// </summary>
    [pbr::OriginalName("EC_MYSPP_SYSTEM_ERR")] EcMysppSystemErr = -1000,
    /// <summary>
    ///////redis
    /// </summary>
    [pbr::OriginalName("EC_REDIS_KEY_NOT_EXIST")] EcRedisKeyNotExist = -66000,
    /// <summary>
    //// redis set 类操作失败
    /// </summary>
    [pbr::OriginalName("EC_REDIS_SET_OP_ERR")] EcRedisSetOpErr = -66001,
    /// <summary>
    //// redis get 类操作失败
    /// </summary>
    [pbr::OriginalName("EC_REDIS_GET_OP_ERR")] EcRedisGetOpErr = -66002,
    /// <summary>
    //// redis del 类操作失败
    /// </summary>
    [pbr::OriginalName("EC_REDIS_DEL_OP_ERR")] EcRedisDelOpErr = -66003,
    /// <summary>
    //// redis 操作异常
    /// </summary>
    [pbr::OriginalName("EC_REDIS_EXPIRE_OP_ERR")] EcRedisExpireOpErr = -66004,
    /// <summary>
    //// redis 加锁 类操作失败
    /// </summary>
    [pbr::OriginalName("EC_REDIS_LOCK_OP_ERR")] EcRedisLockOpErr = -66005,
    /// <summary>
    //// redis 加锁冲突 类操作失败
    /// </summary>
    [pbr::OriginalName("EC_REDIS_LOCK_ALREADY_EXIST")] EcRedisLockAlreadyExist = -66006,
    /// <summary>
    //// redis list 操作失败
    /// </summary>
    [pbr::OriginalName("EC_REDIS_LIST_OP_ERR")] EcRedisListOpErr = -66020,
    /// <summary>
    //// redis list pop 空结果
    /// </summary>
    [pbr::OriginalName("EC_REDIS_LIST_POP_EMPTY")] EcRedisListPopEmpty = -66021,
    /// <summary>
    //// redis 实例池获取实例失败
    /// </summary>
    [pbr::OriginalName("EC_REDIS_POOL_GET_INSTANCE_FAIL")] EcRedisPoolGetInstanceFail = -66022,
    /// <summary>
    //// redis set内为空
    /// </summary>
    [pbr::OriginalName("EC_REDIS_SET_IS_EMPTY")] EcRedisSetIsEmpty = -66023,
    /// <summary>
    //// redis 操作参数不合法
    /// </summary>
    [pbr::OriginalName("EC_REDIS_OP_INVALID_PARAMS")] EcRedisOpInvalidParams = -66024,
    /// <summary>
    ///////mysql
    /// </summary>
    [pbr::OriginalName("EC_MYSQL_NO_ROW_FOUND")] EcMysqlNoRowFound = -66100,
    /// <summary>
    //// 查询为空
    /// </summary>
    [pbr::OriginalName("EC_MYSQL_MULTI_ROW_FOUND")] EcMysqlMultiRowFound = -66101,
    /// <summary>
    //// 插入失败
    /// </summary>
    [pbr::OriginalName("EC_MYSQL_INSERT_FAIL")] EcMysqlInsertFail = -66102,
    /// <summary>
    //// 失败
    /// </summary>
    [pbr::OriginalName("EC_MYSQL_DELETE_FAIL")] EcMysqlDeleteFail = -66103,
    /// <summary>
    //// 失败
    /// </summary>
    [pbr::OriginalName("EC_MYSQL_UPDATE_FAIL")] EcMysqlUpdateFail = -66104,
    /// <summary>
    //// 失败
    /// </summary>
    [pbr::OriginalName("EC_MYSQL_QUERYS_FAIL")] EcMysqlQuerysFail = -66105,
    /// <summary>
    ///////pb
    /// </summary>
    [pbr::OriginalName("EC_PB_SERIALIZE_TO_STR_ERR")] EcPbSerializeToStrErr = -66200,
    /// <summary>
    //// 反序列化失败
    /// </summary>
    [pbr::OriginalName("EC_PB_PARSE_FROM_STR_ERR")] EcPbParseFromStrErr = -66201,
    /// <summary>
    ///////json
    /// </summary>
    [pbr::OriginalName("EC_DATA_FORMAT_ERR")] EcDataFormatErr = -66210,
    /// <summary>
    //// JSON数据格式转化失败
    /// </summary>
    [pbr::OriginalName("EC_JSON_FORMAT_ERR")] EcJsonFormatErr = -66211,
    /// <summary>
    //// 玩法数据格式转化失败
    /// </summary>
    [pbr::OriginalName("EC_JSON_PLAY_MODE_FORMAT_ERR")] EcJsonPlayModeFormatErr = -66212,
    /// <summary>
    //// 玩法数据格式转化失败
    /// </summary>
    [pbr::OriginalName("EC_JSON_PLAY_MODE_PARISE_ERR")] EcJsonPlayModePariseErr = -66213,
    /// <summary>
    /////// 对内接口参数错误
    /// </summary>
    [pbr::OriginalName("EC_INVALID_PARAMS_RECORE_ID")] EcInvalidParamsRecoreId = -66601,
    /// <summary>
    ///////libs
    /// </summary>
    [pbr::OriginalName("EC_HASHID_ERR")] EcHashidErr = -66700,
    /// <summary>
    //// hashcode编码失败
    /// </summary>
    [pbr::OriginalName("EC_HASHID_ENCODE_ERR")] EcHashidEncodeErr = -66701,
    /// <summary>
    //// hashcode解码失败
    /// </summary>
    [pbr::OriginalName("EC_HASHID_DECODE_ERR")] EcHashidDecodeErr = -66702,
    /// <summary>
    ///////conf
    /// </summary>
    [pbr::OriginalName("EC_CONF_ROOM_ID_BUCKET_ERR")] EcConfRoomIdBucketErr = -66801,
    /// <summary>
    ////90000～99999 预留给客户端
    ///////客户端错误
    /// </summary>
    [pbr::OriginalName("EC_SDK_SEND_FAIL")] EcSdkSendFail = 90001,
    /// <summary>
    //// SDK 未初始化
    /// </summary>
    [pbr::OriginalName("EC_SDK_UNINIT")] EcSdkUninit = 90002,
    /// <summary>
    //// 消息响应超时
    /// </summary>
    [pbr::OriginalName("EC_SDK_RES_TIMEOUT")] EcSdkResTimeout = 90003,
    /// <summary>
    //// 登录态错误
    /// </summary>
    [pbr::OriginalName("EC_SDK_NO_LOGIN")] EcSdkNoLogin = 90004,
    /// <summary>
    //// 帧同步鉴权错误
    /// </summary>
    [pbr::OriginalName("EC_SDK_NO_CHECK_LOGIN")] EcSdkNoCheckLogin = 90005,
    /// <summary>
    //// 网络错误
    /// </summary>
    [pbr::OriginalName("EC_SDK_SOCKET_ERROR")] EcSdkSocketError = 90006,
    /// <summary>
    //// Socket 断开
    /// </summary>
    [pbr::OriginalName("EC_SDK_SOCKET_CLOSE")] EcSdkSocketClose = 90007,
    /// <summary>
    //// 无房间
    /// </summary>
    [pbr::OriginalName("EC_SDK_NO_ROOM")] EcSdkNoRoom = 90008,
    /// <summary>
    //// 编码失败
    /// </summary>
    [pbr::OriginalName("EC_SDK_ENCODE_PARAM_FAIL")] EcSdkEncodeParamFail = 90009,
    /// <summary>
    //// 参数错误
    /// </summary>
    [pbr::OriginalName("EC_SDK_INVALID_PARAMS")] EcSdkInvalidParams = 90010,
  }

  /// <summary>
  //////////////////////////////////房间管理////////////////////////////////////////////////////////////////
  //// 网络状态
  /// </summary>
  public enum NetworkState {
    /// <summary>
    //// 房间管理玩家掉线
    /// </summary>
    [pbr::OriginalName("COMMON_OFFLINE")] CommonOffline = 0,
    /// <summary>
    //// 房间管理玩家在线
    /// </summary>
    [pbr::OriginalName("COMMON_ONLINE")] CommonOnline = 1,
    /// <summary>
    //// 游戏中玩家掉线
    /// </summary>
    [pbr::OriginalName("RELAY_OFFLINE")] RelayOffline = 2,
    /// <summary>
    //// 游戏中玩家在线
    /// </summary>
    [pbr::OriginalName("RELAY_ONLINE")] RelayOnline = 3,
  }

  /// <summary>
  //// 创建房间方式
  /// </summary>
  public enum CreateRoomType {
    /// <summary>
    //// 手动创建
    /// </summary>
    [pbr::OriginalName("COMMON_CREATE")] CommonCreate = 0,
    /// <summary>
    //// 匹配创建
    /// </summary>
    [pbr::OriginalName("MATCH_CREATE")] MatchCreate = 1,
    /// <summary>
    //// 第三方平台创建
    /// </summary>
    [pbr::OriginalName("THIRD_PARTY_CREATE")] ThirdPartyCreate = 2,
  }

  /// <summary>
  //// 帧同步状态
  /// </summary>
  public enum FrameSyncState {
    /// <summary>
    //// 未开始帧同步
    /// </summary>
    [pbr::OriginalName("STOP")] Stop = 0,
    /// <summary>
    //// 已开始帧同步
    /// </summary>
    [pbr::OriginalName("START")] Start = 1,
  }

  /// <summary>
  ///
  ///加入房间方式
  /// </summary>
  public enum JoinRoomType {
    /// <summary>
    //// 游戏界面点击加入游戏
    /// </summary>
    [pbr::OriginalName("COMMON_JOIN")] CommonJoin = 0,
    /// <summary>
    //// 匹配方式加入游戏
    /// </summary>
    [pbr::OriginalName("MATCH_JOIN")] MatchJoin = 1,
  }

  /// <summary>
  ///
  ///需要修改的房间属性
  /// </summary>
  public enum ChangeRoomOption {
    [pbr::OriginalName("ROOM_NAME")] RoomName = 0,
    [pbr::OriginalName("OWNER")] Owner = 1,
    [pbr::OriginalName("IS_VIEWED")] IsViewed = 2,
    [pbr::OriginalName("IS_INVITED")] IsInvited = 3,
    [pbr::OriginalName("IS_PRIVATE")] IsPrivate = 4,
    [pbr::OriginalName("CUSTOM_PROPERTIES")] CustomProperties = 5,
    [pbr::OriginalName("IS_FORBID_JOIN")] IsForbidJoin = 6,
  }

  /// <summary>
  /// 个人或团队的匹配状态
  /// </summary>
  public enum MatchStatus {
    [pbr::OriginalName("PENDING")] Pending = 0,
    [pbr::OriginalName("MATCHING")] Matching = 1,
    [pbr::OriginalName("SUCCESS")] Success = 3,
    [pbr::OriginalName("TIMEOUT")] Timeout = 4,
  }

  /// <summary>
  ///
  ///匹配结果放置的类别
  ///[rm-sdk-para]
  /// </summary>
  public enum MatchPlacementType {
    /// <summary>
    //// [rm-sdk-para] bk：小游戏创房
    /// </summary>
    [pbr::OriginalName("MP_MGOBE")] MpMgobe = 0,
    /// <summary>
    //// [rm-sdk-para] bk：GSE创建game-session
    /// </summary>
    [pbr::OriginalName("MP_GSE")] MpGse = 1,
    /// <summary>
    //// [rm-sdk-para] bk：第三方push
    /// </summary>
    [pbr::OriginalName("MP_THIRDPARTY")] MpThirdparty = -1,
  }

  /// <summary>
  ///
  ///placement 过程状态
  ///[rm-sdk-para]
  /// </summary>
  public enum PlacementStatus {
    /// <summary>
    //// 复用 gse placement 状态 0-6
    /// </summary>
    [pbr::OriginalName("PS_UNKNOW")] PsUnknow = 0,
    [pbr::OriginalName("PS_PENDING")] PsPending = 2,
    [pbr::OriginalName("PS_FULFILLED")] PsFulfilled = 3,
    [pbr::OriginalName("PS_CANCELLED")] PsCancelled = 4,
    [pbr::OriginalName("PS_TIMED_OUT")] PsTimedOut = 5,
    [pbr::OriginalName("PS_FAILED")] PsFailed = 6,
    /// <summary>
    //// 异步等待超时 mgobe 侧增加的，100开始
    /// </summary>
    [pbr::OriginalName("PS_TIMED_OUT_MQ")] PsTimedOutMq = 100,
    [pbr::OriginalName("PS_PLACE_MATCH_FAIL")] PsPlaceMatchFail = 101,
  }

  public enum MatchType {
    /// <summary>
    //// 简单玩家匹配 - match_user_simple
    /// </summary>
    [pbr::OriginalName("PLAYER_SIMPLE")] PlayerSimple = 0,
    /// <summary>
    ////简单房间匹配 - match_room_simple
    /// </summary>
    [pbr::OriginalName("ROOM_SIMPLE")] RoomSimple = 1,
    /// <summary>
    ////复杂玩家匹配 - match_user_complex
    /// </summary>
    [pbr::OriginalName("PLAYER_COMPLEX")] PlayerComplex = 2,
  }

  /// <summary>
  ////=>gamesvr的请求，外层使用命令字GameSvrComm
  /// </summary>
  public enum GameSvrForwardType {
    /// <summary>
    //// The first enum value must be zero in proto3.
    /// </summary>
    [pbr::OriginalName("E_GS_FORWARDTYPE_DEFAULT")] EGsForwardtypeDefault = 0,
    /// <summary>
    //// 通知svr信息
    /// </summary>
    [pbr::OriginalName("E_GS_FORWARDTYPE_NOTIFY_CONNECTION")] EGsForwardtypeNotifyConnection = 1,
    /// <summary>
    //// room相关的操作事件通知
    /// </summary>
    [pbr::OriginalName("E_GS_FORWARDTYPE_NOTIFY_ROOM_EVENT")] EGsForwardtypeNotifyRoomEvent = 2,
    /// <summary>
    //// 其他事件通知（预留）
    /// </summary>
    [pbr::OriginalName("E_GS_FORWARDTYPE_NOTIFY_COM_EVENT")] EGsForwardtypeNotifyComEvent = 3,
    /// <summary>
    //// 转发client->gamesvr的消息
    /// </summary>
    [pbr::OriginalName("E_GS_FORWARDTYPE_CLIENT_SENDTO_GAMESVR")] EGsForwardtypeClientSendtoGamesvr = 4,
  }

  /// <summary>
  //// 队组类型
  /// </summary>
  public enum GroupType {
    /// <summary>
    //// 玩家只能同时存在于1个该类型队组。
    /// </summary>
    [pbr::OriginalName("GROUP_LIMITED")] GroupLimited = 0,
    /// <summary>
    //// 玩家可以同时存在于多个该类型队组
    /// </summary>
    [pbr::OriginalName("GROUP_MANY")] GroupMany = 1,
  }

  /// <summary>
  //// 需要修改的队组属性
  /// </summary>
  public enum ChangeGroupOption {
    [pbr::OriginalName("GROUP_NAME")] GroupName = 0,
    [pbr::OriginalName("GROUP_OWNER")] GroupOwner = 1,
    [pbr::OriginalName("GROUP_CUSTOM_PROPERTIES")] GroupCustomProperties = 2,
    [pbr::OriginalName("GROUP_IS_FORBID_JOIN")] GroupIsForbidJoin = 3,
  }

  /// <summary>
  //// 对组消息接收类型
  /// </summary>
  public enum GroupRecvType {
    /// <summary>
    /// [rm] 无
    /// </summary>
    [pbr::OriginalName("GROUP_NONE")] GroupNone = 0,
    /// <summary>
    //// 对组内全部玩家
    /// </summary>
    [pbr::OriginalName("GROUP_ALL")] GroupAll = 1,
    /// <summary>
    //// 队组内除自己外全部玩家
    /// </summary>
    [pbr::OriginalName("GROUP_OTHERS")] GroupOthers = 2,
    /// <summary>
    //// 对组内部分玩家（根据 recv_player_list）
    /// </summary>
    [pbr::OriginalName("GROUP_SOME")] GroupSome = 3,
  }

  #endregion

  #region Messages
  /// <summary>
  ////Header - 二进制格式： 0x2 + htonl(整个包长(4字节)) + QAppRequest/QAppResponse+0x3  = 6bytes
  /// </summary>
  public sealed partial class ClientSendServerReqWrap1 : pb::IMessage<ClientSendServerReqWrap1> {
    private static readonly pb::MessageParser<ClientSendServerReqWrap1> _parser = new pb::MessageParser<ClientSendServerReqWrap1>(() => new ClientSendServerReqWrap1());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<ClientSendServerReqWrap1> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::com.unity.mgobe.ProtoReflection.Descriptor.MessageTypes[0]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ClientSendServerReqWrap1() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ClientSendServerReqWrap1(ClientSendServerReqWrap1 other) : this() {
      version_ = other.version_;
      appName_ = other.appName_;
      cmd_ = other.cmd_;
      seq_ = other.seq_;
      clientIp_ = other.clientIp_;
      serviceIp_ = other.serviceIp_;
      business_ = other.business_;
      authKey_ = other.authKey_;
      authType_ = other.authType_;
      authIp_ = other.authIp_;
      gameId_ = other.gameId_;
      uid_ = other.uid_;
      playerId_ = other.playerId_;
      body_ = other.body_;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ClientSendServerReqWrap1 Clone() {
      return new ClientSendServerReqWrap1(this);
    }

    /// <summary>Field number for the "version" field.</summary>
    public const int VersionFieldNumber = 1;
    private string version_ = "";
    /// <summary>
    ////版本号, 默认为1,, 必填
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string Version {
      get { return version_; }
      set {
        version_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "app_name" field.</summary>
    public const int AppNameFieldNumber = 2;
    private string appName_ = "";
    /// <summary>
    ////被调方业务名称, 非必填
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string AppName {
      get { return appName_; }
      set {
        appName_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "cmd" field.</summary>
    public const int CmdFieldNumber = 3;
    private string cmd_ = "";
    /// <summary>
    ////请求命令字, 必填
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string Cmd {
      get { return cmd_; }
      set {
        cmd_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "seq" field.</summary>
    public const int SeqFieldNumber = 4;
    private string seq_ = "";
    /// <summary>
    ////请求序列号, 可使用uuid生成串, 必填
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string Seq {
      get { return seq_; }
      set {
        seq_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "client_ip" field.</summary>
    public const int ClientIpFieldNumber = 5;
    private string clientIp_ = "";
    /// <summary>
    ////客户端ip, 非必填
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string ClientIp {
      get { return clientIp_; }
      set {
        clientIp_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "service_ip" field.</summary>
    public const int ServiceIpFieldNumber = 6;
    private string serviceIp_ = "";
    /// <summary>
    ////服务端ip, 非必填
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string ServiceIp {
      get { return serviceIp_; }
      set {
        serviceIp_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "business" field.</summary>
    public const int BusinessFieldNumber = 7;
    private string business_ = "";
    /// <summary>
    ////调用方, 非必填
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string Business {
      get { return business_; }
      set {
        business_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "auth_key" field.</summary>
    public const int AuthKeyFieldNumber = 8;
    private string authKey_ = "";
    /// <summary>
    ////鉴权key, 传token值, sdk必填
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string AuthKey {
      get { return authKey_; }
      set {
        authKey_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "auth_type" field.</summary>
    public const int AuthTypeFieldNumber = 9;
    private uint authType_;
    /// <summary>
    ////鉴权类型
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public uint AuthType {
      get { return authType_; }
      set {
        authType_ = value;
      }
    }

    /// <summary>Field number for the "auth_ip" field.</summary>
    public const int AuthIpFieldNumber = 10;
    private string authIp_ = "";
    /// <summary>
    ////调用方ip
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string AuthIp {
      get { return authIp_; }
      set {
        authIp_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "game_id" field.</summary>
    public const int GameIdFieldNumber = 11;
    private string gameId_ = "";
    /// <summary>
    ////游戏ID，必填
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string GameId {
      get { return gameId_; }
      set {
        gameId_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "uid" field.</summary>
    public const int UidFieldNumber = 12;
    private ulong uid_;
    /// <summary>
    ////用户唯一标示  --待定
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ulong Uid {
      get { return uid_; }
      set {
        uid_ = value;
      }
    }

    /// <summary>Field number for the "player_id" field.</summary>
    public const int PlayerIdFieldNumber = 13;
    private string playerId_ = "";
    /// <summary>
    ////后端生成的玩家ID, 接入层负责校验合法性, 必填
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string PlayerId {
      get { return playerId_; }
      set {
        playerId_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "body" field.</summary>
    public const int BodyFieldNumber = 14;
    private pb::ByteString body_ = pb::ByteString.Empty;
    /// <summary>
    ////参见 AccessReq, 必填
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pb::ByteString Body {
      get { return body_; }
      set {
        body_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as ClientSendServerReqWrap1);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(ClientSendServerReqWrap1 other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (Version != other.Version) return false;
      if (AppName != other.AppName) return false;
      if (Cmd != other.Cmd) return false;
      if (Seq != other.Seq) return false;
      if (ClientIp != other.ClientIp) return false;
      if (ServiceIp != other.ServiceIp) return false;
      if (Business != other.Business) return false;
      if (AuthKey != other.AuthKey) return false;
      if (AuthType != other.AuthType) return false;
      if (AuthIp != other.AuthIp) return false;
      if (GameId != other.GameId) return false;
      if (Uid != other.Uid) return false;
      if (PlayerId != other.PlayerId) return false;
      if (Body != other.Body) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (Version.Length != 0) hash ^= Version.GetHashCode();
      if (AppName.Length != 0) hash ^= AppName.GetHashCode();
      if (Cmd.Length != 0) hash ^= Cmd.GetHashCode();
      if (Seq.Length != 0) hash ^= Seq.GetHashCode();
      if (ClientIp.Length != 0) hash ^= ClientIp.GetHashCode();
      if (ServiceIp.Length != 0) hash ^= ServiceIp.GetHashCode();
      if (Business.Length != 0) hash ^= Business.GetHashCode();
      if (AuthKey.Length != 0) hash ^= AuthKey.GetHashCode();
      if (AuthType != 0) hash ^= AuthType.GetHashCode();
      if (AuthIp.Length != 0) hash ^= AuthIp.GetHashCode();
      if (GameId.Length != 0) hash ^= GameId.GetHashCode();
      if (Uid != 0UL) hash ^= Uid.GetHashCode();
      if (PlayerId.Length != 0) hash ^= PlayerId.GetHashCode();
      if (Body.Length != 0) hash ^= Body.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (Version.Length != 0) {
        output.WriteRawTag(10);
        output.WriteString(Version);
      }
      if (AppName.Length != 0) {
        output.WriteRawTag(18);
        output.WriteString(AppName);
      }
      if (Cmd.Length != 0) {
        output.WriteRawTag(26);
        output.WriteString(Cmd);
      }
      if (Seq.Length != 0) {
        output.WriteRawTag(34);
        output.WriteString(Seq);
      }
      if (ClientIp.Length != 0) {
        output.WriteRawTag(42);
        output.WriteString(ClientIp);
      }
      if (ServiceIp.Length != 0) {
        output.WriteRawTag(50);
        output.WriteString(ServiceIp);
      }
      if (Business.Length != 0) {
        output.WriteRawTag(58);
        output.WriteString(Business);
      }
      if (AuthKey.Length != 0) {
        output.WriteRawTag(66);
        output.WriteString(AuthKey);
      }
      if (AuthType != 0) {
        output.WriteRawTag(72);
        output.WriteUInt32(AuthType);
      }
      if (AuthIp.Length != 0) {
        output.WriteRawTag(82);
        output.WriteString(AuthIp);
      }
      if (GameId.Length != 0) {
        output.WriteRawTag(90);
        output.WriteString(GameId);
      }
      if (Uid != 0UL) {
        output.WriteRawTag(96);
        output.WriteUInt64(Uid);
      }
      if (PlayerId.Length != 0) {
        output.WriteRawTag(106);
        output.WriteString(PlayerId);
      }
      if (Body.Length != 0) {
        output.WriteRawTag(114);
        output.WriteBytes(Body);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (Version.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(Version);
      }
      if (AppName.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(AppName);
      }
      if (Cmd.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(Cmd);
      }
      if (Seq.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(Seq);
      }
      if (ClientIp.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(ClientIp);
      }
      if (ServiceIp.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(ServiceIp);
      }
      if (Business.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(Business);
      }
      if (AuthKey.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(AuthKey);
      }
      if (AuthType != 0) {
        size += 1 + pb::CodedOutputStream.ComputeUInt32Size(AuthType);
      }
      if (AuthIp.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(AuthIp);
      }
      if (GameId.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(GameId);
      }
      if (Uid != 0UL) {
        size += 1 + pb::CodedOutputStream.ComputeUInt64Size(Uid);
      }
      if (PlayerId.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(PlayerId);
      }
      if (Body.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeBytesSize(Body);
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(ClientSendServerReqWrap1 other) {
      if (other == null) {
        return;
      }
      if (other.Version.Length != 0) {
        Version = other.Version;
      }
      if (other.AppName.Length != 0) {
        AppName = other.AppName;
      }
      if (other.Cmd.Length != 0) {
        Cmd = other.Cmd;
      }
      if (other.Seq.Length != 0) {
        Seq = other.Seq;
      }
      if (other.ClientIp.Length != 0) {
        ClientIp = other.ClientIp;
      }
      if (other.ServiceIp.Length != 0) {
        ServiceIp = other.ServiceIp;
      }
      if (other.Business.Length != 0) {
        Business = other.Business;
      }
      if (other.AuthKey.Length != 0) {
        AuthKey = other.AuthKey;
      }
      if (other.AuthType != 0) {
        AuthType = other.AuthType;
      }
      if (other.AuthIp.Length != 0) {
        AuthIp = other.AuthIp;
      }
      if (other.GameId.Length != 0) {
        GameId = other.GameId;
      }
      if (other.Uid != 0UL) {
        Uid = other.Uid;
      }
      if (other.PlayerId.Length != 0) {
        PlayerId = other.PlayerId;
      }
      if (other.Body.Length != 0) {
        Body = other.Body;
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 10: {
            Version = input.ReadString();
            break;
          }
          case 18: {
            AppName = input.ReadString();
            break;
          }
          case 26: {
            Cmd = input.ReadString();
            break;
          }
          case 34: {
            Seq = input.ReadString();
            break;
          }
          case 42: {
            ClientIp = input.ReadString();
            break;
          }
          case 50: {
            ServiceIp = input.ReadString();
            break;
          }
          case 58: {
            Business = input.ReadString();
            break;
          }
          case 66: {
            AuthKey = input.ReadString();
            break;
          }
          case 72: {
            AuthType = input.ReadUInt32();
            break;
          }
          case 82: {
            AuthIp = input.ReadString();
            break;
          }
          case 90: {
            GameId = input.ReadString();
            break;
          }
          case 96: {
            Uid = input.ReadUInt64();
            break;
          }
          case 106: {
            PlayerId = input.ReadString();
            break;
          }
          case 114: {
            Body = input.ReadBytes();
            break;
          }
        }
      }
    }

  }

  public sealed partial class ServerSendClientBstWrap1 : pb::IMessage<ServerSendClientBstWrap1> {
    private static readonly pb::MessageParser<ServerSendClientBstWrap1> _parser = new pb::MessageParser<ServerSendClientBstWrap1>(() => new ServerSendClientBstWrap1());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<ServerSendClientBstWrap1> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::com.unity.mgobe.ProtoReflection.Descriptor.MessageTypes[1]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ServerSendClientBstWrap1() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ServerSendClientBstWrap1(ServerSendClientBstWrap1 other) : this() {
      version_ = other.version_;
      appName_ = other.appName_;
      cmd_ = other.cmd_;
      seq_ = other.seq_;
      clientIp_ = other.clientIp_;
      serviceIp_ = other.serviceIp_;
      business_ = other.business_;
      authKey_ = other.authKey_;
      authType_ = other.authType_;
      authIp_ = other.authIp_;
      gameId_ = other.gameId_;
      uid_ = other.uid_;
      playerId_ = other.playerId_;
      body_ = other.body_;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ServerSendClientBstWrap1 Clone() {
      return new ServerSendClientBstWrap1(this);
    }

    /// <summary>Field number for the "version" field.</summary>
    public const int VersionFieldNumber = 1;
    private string version_ = "";
    /// <summary>
    ////版本号, 默认为1,, 必填
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string Version {
      get { return version_; }
      set {
        version_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "app_name" field.</summary>
    public const int AppNameFieldNumber = 2;
    private string appName_ = "";
    /// <summary>
    ////被调方业务名称, 非必填
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string AppName {
      get { return appName_; }
      set {
        appName_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "cmd" field.</summary>
    public const int CmdFieldNumber = 3;
    private string cmd_ = "";
    /// <summary>
    ////请求命令字, 必填
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string Cmd {
      get { return cmd_; }
      set {
        cmd_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "seq" field.</summary>
    public const int SeqFieldNumber = 4;
    private string seq_ = "";
    /// <summary>
    ////请求序列号, 可使用uuid生成串, 必填
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string Seq {
      get { return seq_; }
      set {
        seq_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "client_ip" field.</summary>
    public const int ClientIpFieldNumber = 5;
    private string clientIp_ = "";
    /// <summary>
    ////客户端ip, 非必填
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string ClientIp {
      get { return clientIp_; }
      set {
        clientIp_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "service_ip" field.</summary>
    public const int ServiceIpFieldNumber = 6;
    private string serviceIp_ = "";
    /// <summary>
    ////服务端ip, 非必填
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string ServiceIp {
      get { return serviceIp_; }
      set {
        serviceIp_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "business" field.</summary>
    public const int BusinessFieldNumber = 7;
    private string business_ = "";
    /// <summary>
    ////调用方, 非必填
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string Business {
      get { return business_; }
      set {
        business_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "auth_key" field.</summary>
    public const int AuthKeyFieldNumber = 8;
    private string authKey_ = "";
    /// <summary>
    ////鉴权key, 传token值, sdk必填
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string AuthKey {
      get { return authKey_; }
      set {
        authKey_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "auth_type" field.</summary>
    public const int AuthTypeFieldNumber = 9;
    private uint authType_;
    /// <summary>
    ////鉴权类型
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public uint AuthType {
      get { return authType_; }
      set {
        authType_ = value;
      }
    }

    /// <summary>Field number for the "auth_ip" field.</summary>
    public const int AuthIpFieldNumber = 10;
    private string authIp_ = "";
    /// <summary>
    ////调用方ip
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string AuthIp {
      get { return authIp_; }
      set {
        authIp_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "game_id" field.</summary>
    public const int GameIdFieldNumber = 11;
    private string gameId_ = "";
    /// <summary>
    ////游戏ID，必填
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string GameId {
      get { return gameId_; }
      set {
        gameId_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "uid" field.</summary>
    public const int UidFieldNumber = 12;
    private ulong uid_;
    /// <summary>
    ////用户唯一标示  --待定
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ulong Uid {
      get { return uid_; }
      set {
        uid_ = value;
      }
    }

    /// <summary>Field number for the "player_id" field.</summary>
    public const int PlayerIdFieldNumber = 13;
    private string playerId_ = "";
    /// <summary>
    ////后端生成的玩家ID, 接入层负责校验合法性, 必填
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string PlayerId {
      get { return playerId_; }
      set {
        playerId_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "body" field.</summary>
    public const int BodyFieldNumber = 14;
    private pb::ByteString body_ = pb::ByteString.Empty;
    /// <summary>
    ////参见 AccessReq, 必填
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pb::ByteString Body {
      get { return body_; }
      set {
        body_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as ServerSendClientBstWrap1);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(ServerSendClientBstWrap1 other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (Version != other.Version) return false;
      if (AppName != other.AppName) return false;
      if (Cmd != other.Cmd) return false;
      if (Seq != other.Seq) return false;
      if (ClientIp != other.ClientIp) return false;
      if (ServiceIp != other.ServiceIp) return false;
      if (Business != other.Business) return false;
      if (AuthKey != other.AuthKey) return false;
      if (AuthType != other.AuthType) return false;
      if (AuthIp != other.AuthIp) return false;
      if (GameId != other.GameId) return false;
      if (Uid != other.Uid) return false;
      if (PlayerId != other.PlayerId) return false;
      if (Body != other.Body) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (Version.Length != 0) hash ^= Version.GetHashCode();
      if (AppName.Length != 0) hash ^= AppName.GetHashCode();
      if (Cmd.Length != 0) hash ^= Cmd.GetHashCode();
      if (Seq.Length != 0) hash ^= Seq.GetHashCode();
      if (ClientIp.Length != 0) hash ^= ClientIp.GetHashCode();
      if (ServiceIp.Length != 0) hash ^= ServiceIp.GetHashCode();
      if (Business.Length != 0) hash ^= Business.GetHashCode();
      if (AuthKey.Length != 0) hash ^= AuthKey.GetHashCode();
      if (AuthType != 0) hash ^= AuthType.GetHashCode();
      if (AuthIp.Length != 0) hash ^= AuthIp.GetHashCode();
      if (GameId.Length != 0) hash ^= GameId.GetHashCode();
      if (Uid != 0UL) hash ^= Uid.GetHashCode();
      if (PlayerId.Length != 0) hash ^= PlayerId.GetHashCode();
      if (Body.Length != 0) hash ^= Body.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (Version.Length != 0) {
        output.WriteRawTag(10);
        output.WriteString(Version);
      }
      if (AppName.Length != 0) {
        output.WriteRawTag(18);
        output.WriteString(AppName);
      }
      if (Cmd.Length != 0) {
        output.WriteRawTag(26);
        output.WriteString(Cmd);
      }
      if (Seq.Length != 0) {
        output.WriteRawTag(34);
        output.WriteString(Seq);
      }
      if (ClientIp.Length != 0) {
        output.WriteRawTag(42);
        output.WriteString(ClientIp);
      }
      if (ServiceIp.Length != 0) {
        output.WriteRawTag(50);
        output.WriteString(ServiceIp);
      }
      if (Business.Length != 0) {
        output.WriteRawTag(58);
        output.WriteString(Business);
      }
      if (AuthKey.Length != 0) {
        output.WriteRawTag(66);
        output.WriteString(AuthKey);
      }
      if (AuthType != 0) {
        output.WriteRawTag(72);
        output.WriteUInt32(AuthType);
      }
      if (AuthIp.Length != 0) {
        output.WriteRawTag(82);
        output.WriteString(AuthIp);
      }
      if (GameId.Length != 0) {
        output.WriteRawTag(90);
        output.WriteString(GameId);
      }
      if (Uid != 0UL) {
        output.WriteRawTag(96);
        output.WriteUInt64(Uid);
      }
      if (PlayerId.Length != 0) {
        output.WriteRawTag(106);
        output.WriteString(PlayerId);
      }
      if (Body.Length != 0) {
        output.WriteRawTag(114);
        output.WriteBytes(Body);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (Version.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(Version);
      }
      if (AppName.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(AppName);
      }
      if (Cmd.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(Cmd);
      }
      if (Seq.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(Seq);
      }
      if (ClientIp.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(ClientIp);
      }
      if (ServiceIp.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(ServiceIp);
      }
      if (Business.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(Business);
      }
      if (AuthKey.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(AuthKey);
      }
      if (AuthType != 0) {
        size += 1 + pb::CodedOutputStream.ComputeUInt32Size(AuthType);
      }
      if (AuthIp.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(AuthIp);
      }
      if (GameId.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(GameId);
      }
      if (Uid != 0UL) {
        size += 1 + pb::CodedOutputStream.ComputeUInt64Size(Uid);
      }
      if (PlayerId.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(PlayerId);
      }
      if (Body.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeBytesSize(Body);
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(ServerSendClientBstWrap1 other) {
      if (other == null) {
        return;
      }
      if (other.Version.Length != 0) {
        Version = other.Version;
      }
      if (other.AppName.Length != 0) {
        AppName = other.AppName;
      }
      if (other.Cmd.Length != 0) {
        Cmd = other.Cmd;
      }
      if (other.Seq.Length != 0) {
        Seq = other.Seq;
      }
      if (other.ClientIp.Length != 0) {
        ClientIp = other.ClientIp;
      }
      if (other.ServiceIp.Length != 0) {
        ServiceIp = other.ServiceIp;
      }
      if (other.Business.Length != 0) {
        Business = other.Business;
      }
      if (other.AuthKey.Length != 0) {
        AuthKey = other.AuthKey;
      }
      if (other.AuthType != 0) {
        AuthType = other.AuthType;
      }
      if (other.AuthIp.Length != 0) {
        AuthIp = other.AuthIp;
      }
      if (other.GameId.Length != 0) {
        GameId = other.GameId;
      }
      if (other.Uid != 0UL) {
        Uid = other.Uid;
      }
      if (other.PlayerId.Length != 0) {
        PlayerId = other.PlayerId;
      }
      if (other.Body.Length != 0) {
        Body = other.Body;
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 10: {
            Version = input.ReadString();
            break;
          }
          case 18: {
            AppName = input.ReadString();
            break;
          }
          case 26: {
            Cmd = input.ReadString();
            break;
          }
          case 34: {
            Seq = input.ReadString();
            break;
          }
          case 42: {
            ClientIp = input.ReadString();
            break;
          }
          case 50: {
            ServiceIp = input.ReadString();
            break;
          }
          case 58: {
            Business = input.ReadString();
            break;
          }
          case 66: {
            AuthKey = input.ReadString();
            break;
          }
          case 72: {
            AuthType = input.ReadUInt32();
            break;
          }
          case 82: {
            AuthIp = input.ReadString();
            break;
          }
          case 90: {
            GameId = input.ReadString();
            break;
          }
          case 96: {
            Uid = input.ReadUInt64();
            break;
          }
          case 106: {
            PlayerId = input.ReadString();
            break;
          }
          case 114: {
            Body = input.ReadBytes();
            break;
          }
        }
      }
    }

  }

  /// <summary>
  ////统一回包，err_code和err_msg为框架错误信息，业务错误码在body中
  /// </summary>
  public sealed partial class ClientSendServerRspWrap1 : pb::IMessage<ClientSendServerRspWrap1> {
    private static readonly pb::MessageParser<ClientSendServerRspWrap1> _parser = new pb::MessageParser<ClientSendServerRspWrap1>(() => new ClientSendServerRspWrap1());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<ClientSendServerRspWrap1> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::com.unity.mgobe.ProtoReflection.Descriptor.MessageTypes[2]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ClientSendServerRspWrap1() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ClientSendServerRspWrap1(ClientSendServerRspWrap1 other) : this() {
      seq_ = other.seq_;
      errCode_ = other.errCode_;
      errMsg_ = other.errMsg_;
      body_ = other.body_;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ClientSendServerRspWrap1 Clone() {
      return new ClientSendServerRspWrap1(this);
    }

    /// <summary>Field number for the "seq" field.</summary>
    public const int SeqFieldNumber = 1;
    private string seq_ = "";
    /// <summary>
    ////请求序列号
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string Seq {
      get { return seq_; }
      set {
        seq_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "err_code" field.</summary>
    public const int ErrCodeFieldNumber = 2;
    private int errCode_;
    /// <summary>
    ////错误码(0~10000为系统错误)
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int ErrCode {
      get { return errCode_; }
      set {
        errCode_ = value;
      }
    }

    /// <summary>Field number for the "err_msg" field.</summary>
    public const int ErrMsgFieldNumber = 3;
    private string errMsg_ = "";
    /// <summary>
    ////错误信息
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string ErrMsg {
      get { return errMsg_; }
      set {
        errMsg_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "body" field.</summary>
    public const int BodyFieldNumber = 4;
    private pb::ByteString body_ = pb::ByteString.Empty;
    /// <summary>
    ////参见 AccessRsp
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pb::ByteString Body {
      get { return body_; }
      set {
        body_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as ClientSendServerRspWrap1);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(ClientSendServerRspWrap1 other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (Seq != other.Seq) return false;
      if (ErrCode != other.ErrCode) return false;
      if (ErrMsg != other.ErrMsg) return false;
      if (Body != other.Body) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (Seq.Length != 0) hash ^= Seq.GetHashCode();
      if (ErrCode != 0) hash ^= ErrCode.GetHashCode();
      if (ErrMsg.Length != 0) hash ^= ErrMsg.GetHashCode();
      if (Body.Length != 0) hash ^= Body.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (Seq.Length != 0) {
        output.WriteRawTag(10);
        output.WriteString(Seq);
      }
      if (ErrCode != 0) {
        output.WriteRawTag(16);
        output.WriteInt32(ErrCode);
      }
      if (ErrMsg.Length != 0) {
        output.WriteRawTag(26);
        output.WriteString(ErrMsg);
      }
      if (Body.Length != 0) {
        output.WriteRawTag(34);
        output.WriteBytes(Body);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (Seq.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(Seq);
      }
      if (ErrCode != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(ErrCode);
      }
      if (ErrMsg.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(ErrMsg);
      }
      if (Body.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeBytesSize(Body);
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(ClientSendServerRspWrap1 other) {
      if (other == null) {
        return;
      }
      if (other.Seq.Length != 0) {
        Seq = other.Seq;
      }
      if (other.ErrCode != 0) {
        ErrCode = other.ErrCode;
      }
      if (other.ErrMsg.Length != 0) {
        ErrMsg = other.ErrMsg;
      }
      if (other.Body.Length != 0) {
        Body = other.Body;
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 10: {
            Seq = input.ReadString();
            break;
          }
          case 16: {
            ErrCode = input.ReadInt32();
            break;
          }
          case 26: {
            ErrMsg = input.ReadString();
            break;
          }
          case 34: {
            Body = input.ReadBytes();
            break;
          }
        }
      }
    }

  }

  /// <summary>
  ////转发层body
  /// </summary>
  public sealed partial class ClientSendServerReqWrap2 : pb::IMessage<ClientSendServerReqWrap2> {
    private static readonly pb::MessageParser<ClientSendServerReqWrap2> _parser = new pb::MessageParser<ClientSendServerReqWrap2>(() => new ClientSendServerReqWrap2());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<ClientSendServerReqWrap2> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::com.unity.mgobe.ProtoReflection.Descriptor.MessageTypes[3]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ClientSendServerReqWrap2() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ClientSendServerReqWrap2(ClientSendServerReqWrap2 other) : this() {
      cmd_ = other.cmd_;
      body_ = other.body_;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ClientSendServerReqWrap2 Clone() {
      return new ClientSendServerReqWrap2(this);
    }

    /// <summary>Field number for the "cmd" field.</summary>
    public const int CmdFieldNumber = 1;
    private global::com.unity.mgobe.ProtoCmd cmd_ = 0;
    /// <summary>
    ////业务命令字
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::com.unity.mgobe.ProtoCmd Cmd {
      get { return cmd_; }
      set {
        cmd_ = value;
      }
    }

    /// <summary>Field number for the "body" field.</summary>
    public const int BodyFieldNumber = 2;
    private pb::ByteString body_ = pb::ByteString.Empty;
    /// <summary>
    ////业务body, 有各个业务自行定义
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pb::ByteString Body {
      get { return body_; }
      set {
        body_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as ClientSendServerReqWrap2);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(ClientSendServerReqWrap2 other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (Cmd != other.Cmd) return false;
      if (Body != other.Body) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (Cmd != 0) hash ^= Cmd.GetHashCode();
      if (Body.Length != 0) hash ^= Body.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (Cmd != 0) {
        output.WriteRawTag(8);
        output.WriteEnum((int) Cmd);
      }
      if (Body.Length != 0) {
        output.WriteRawTag(18);
        output.WriteBytes(Body);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (Cmd != 0) {
        size += 1 + pb::CodedOutputStream.ComputeEnumSize((int) Cmd);
      }
      if (Body.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeBytesSize(Body);
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(ClientSendServerReqWrap2 other) {
      if (other == null) {
        return;
      }
      if (other.Cmd != 0) {
        Cmd = other.Cmd;
      }
      if (other.Body.Length != 0) {
        Body = other.Body;
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 8: {
            Cmd = (global::com.unity.mgobe.ProtoCmd) input.ReadEnum();
            break;
          }
          case 18: {
            Body = input.ReadBytes();
            break;
          }
        }
      }
    }

  }

  public sealed partial class ClientSendServerRspWrap2 : pb::IMessage<ClientSendServerRspWrap2> {
    private static readonly pb::MessageParser<ClientSendServerRspWrap2> _parser = new pb::MessageParser<ClientSendServerRspWrap2>(() => new ClientSendServerRspWrap2());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<ClientSendServerRspWrap2> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::com.unity.mgobe.ProtoReflection.Descriptor.MessageTypes[4]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ClientSendServerRspWrap2() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ClientSendServerRspWrap2(ClientSendServerRspWrap2 other) : this() {
      body_ = other.body_;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ClientSendServerRspWrap2 Clone() {
      return new ClientSendServerRspWrap2(this);
    }

    /// <summary>Field number for the "body" field.</summary>
    public const int BodyFieldNumber = 1;
    private pb::ByteString body_ = pb::ByteString.Empty;
    /// <summary>
    ////业务回包, 由各业务自行定义
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pb::ByteString Body {
      get { return body_; }
      set {
        body_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as ClientSendServerRspWrap2);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(ClientSendServerRspWrap2 other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (Body != other.Body) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (Body.Length != 0) hash ^= Body.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (Body.Length != 0) {
        output.WriteRawTag(10);
        output.WriteBytes(Body);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (Body.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeBytesSize(Body);
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(ClientSendServerRspWrap2 other) {
      if (other == null) {
        return;
      }
      if (other.Body.Length != 0) {
        Body = other.Body;
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 10: {
            Body = input.ReadBytes();
            break;
          }
        }
      }
    }

  }

  /// <summary>
  ////CMQ事件消息结构
  /// </summary>
  public sealed partial class EventInfo : pb::IMessage<EventInfo> {
    private static readonly pb::MessageParser<EventInfo> _parser = new pb::MessageParser<EventInfo>(() => new EventInfo());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<EventInfo> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::com.unity.mgobe.ProtoReflection.Descriptor.MessageTypes[5]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public EventInfo() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public EventInfo(EventInfo other) : this() {
      eventType_ = other.eventType_;
      seq_ = other.seq_;
      body_ = other.body_;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public EventInfo Clone() {
      return new EventInfo(this);
    }

    /// <summary>Field number for the "event_type" field.</summary>
    public const int EventTypeFieldNumber = 1;
    private global::com.unity.mgobe.EventType eventType_ = 0;
    /// <summary>
    ////事件类型
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::com.unity.mgobe.EventType EventType {
      get { return eventType_; }
      set {
        eventType_ = value;
      }
    }

    /// <summary>Field number for the "seq" field.</summary>
    public const int SeqFieldNumber = 2;
    private string seq_ = "";
    /// <summary>
    ////请求序列号
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string Seq {
      get { return seq_; }
      set {
        seq_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "body" field.</summary>
    public const int BodyFieldNumber = 3;
    private pb::ByteString body_ = pb::ByteString.Empty;
    /// <summary>
    ////事件消息体
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pb::ByteString Body {
      get { return body_; }
      set {
        body_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as EventInfo);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(EventInfo other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (EventType != other.EventType) return false;
      if (Seq != other.Seq) return false;
      if (Body != other.Body) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (EventType != 0) hash ^= EventType.GetHashCode();
      if (Seq.Length != 0) hash ^= Seq.GetHashCode();
      if (Body.Length != 0) hash ^= Body.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (EventType != 0) {
        output.WriteRawTag(8);
        output.WriteEnum((int) EventType);
      }
      if (Seq.Length != 0) {
        output.WriteRawTag(18);
        output.WriteString(Seq);
      }
      if (Body.Length != 0) {
        output.WriteRawTag(26);
        output.WriteBytes(Body);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (EventType != 0) {
        size += 1 + pb::CodedOutputStream.ComputeEnumSize((int) EventType);
      }
      if (Seq.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(Seq);
      }
      if (Body.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeBytesSize(Body);
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(EventInfo other) {
      if (other == null) {
        return;
      }
      if (other.EventType != 0) {
        EventType = other.EventType;
      }
      if (other.Seq.Length != 0) {
        Seq = other.Seq;
      }
      if (other.Body.Length != 0) {
        Body = other.Body;
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 8: {
            EventType = (global::com.unity.mgobe.EventType) input.ReadEnum();
            break;
          }
          case 18: {
            Seq = input.ReadString();
            break;
          }
          case 26: {
            Body = input.ReadBytes();
            break;
          }
        }
      }
    }

  }

  /// <summary>
  ////NetworkState事件类型，body消息
  /// </summary>
  public sealed partial class EventNetworkState : pb::IMessage<EventNetworkState> {
    private static readonly pb::MessageParser<EventNetworkState> _parser = new pb::MessageParser<EventNetworkState>(() => new EventNetworkState());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<EventNetworkState> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::com.unity.mgobe.ProtoReflection.Descriptor.MessageTypes[6]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public EventNetworkState() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public EventNetworkState(EventNetworkState other) : this() {
      gameId_ = other.gameId_;
      playerId_ = other.playerId_;
      networkState_ = other.networkState_;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public EventNetworkState Clone() {
      return new EventNetworkState(this);
    }

    /// <summary>Field number for the "game_id" field.</summary>
    public const int GameIdFieldNumber = 1;
    private string gameId_ = "";
    /// <summary>
    ////游戏ID
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string GameId {
      get { return gameId_; }
      set {
        gameId_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "player_id" field.</summary>
    public const int PlayerIdFieldNumber = 2;
    private string playerId_ = "";
    /// <summary>
    ////玩家ID
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string PlayerId {
      get { return playerId_; }
      set {
        playerId_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "network_state" field.</summary>
    public const int NetworkStateFieldNumber = 3;
    private global::com.unity.mgobe.NetworkState networkState_ = 0;
    /// <summary>
    ////网络状态
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::com.unity.mgobe.NetworkState NetworkState {
      get { return networkState_; }
      set {
        networkState_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as EventNetworkState);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(EventNetworkState other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (GameId != other.GameId) return false;
      if (PlayerId != other.PlayerId) return false;
      if (NetworkState != other.NetworkState) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (GameId.Length != 0) hash ^= GameId.GetHashCode();
      if (PlayerId.Length != 0) hash ^= PlayerId.GetHashCode();
      if (NetworkState != 0) hash ^= NetworkState.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (GameId.Length != 0) {
        output.WriteRawTag(10);
        output.WriteString(GameId);
      }
      if (PlayerId.Length != 0) {
        output.WriteRawTag(18);
        output.WriteString(PlayerId);
      }
      if (NetworkState != 0) {
        output.WriteRawTag(24);
        output.WriteEnum((int) NetworkState);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (GameId.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(GameId);
      }
      if (PlayerId.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(PlayerId);
      }
      if (NetworkState != 0) {
        size += 1 + pb::CodedOutputStream.ComputeEnumSize((int) NetworkState);
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(EventNetworkState other) {
      if (other == null) {
        return;
      }
      if (other.GameId.Length != 0) {
        GameId = other.GameId;
      }
      if (other.PlayerId.Length != 0) {
        PlayerId = other.PlayerId;
      }
      if (other.NetworkState != 0) {
        NetworkState = other.NetworkState;
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 10: {
            GameId = input.ReadString();
            break;
          }
          case 18: {
            PlayerId = input.ReadString();
            break;
          }
          case 24: {
            NetworkState = (global::com.unity.mgobe.NetworkState) input.ReadEnum();
            break;
          }
        }
      }
    }

  }

  /// <summary>
  ////心跳包body
  /// </summary>
  public sealed partial class HeartBeatReq : pb::IMessage<HeartBeatReq> {
    private static readonly pb::MessageParser<HeartBeatReq> _parser = new pb::MessageParser<HeartBeatReq>(() => new HeartBeatReq());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<HeartBeatReq> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::com.unity.mgobe.ProtoReflection.Descriptor.MessageTypes[7]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public HeartBeatReq() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public HeartBeatReq(HeartBeatReq other) : this() {
      conType_ = other.conType_;
      routeId_ = other.routeId_;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public HeartBeatReq Clone() {
      return new HeartBeatReq(this);
    }

    /// <summary>Field number for the "con_type" field.</summary>
    public const int ConTypeFieldNumber = 1;
    private global::com.unity.mgobe.ConnectionType conType_ = 0;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::com.unity.mgobe.ConnectionType ConType {
      get { return conType_; }
      set {
        conType_ = value;
      }
    }

    /// <summary>Field number for the "route_id" field.</summary>
    public const int RouteIdFieldNumber = 2;
    private string routeId_ = "";
    /// <summary>
    ////路由ID
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string RouteId {
      get { return routeId_; }
      set {
        routeId_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as HeartBeatReq);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(HeartBeatReq other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (ConType != other.ConType) return false;
      if (RouteId != other.RouteId) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (ConType != 0) hash ^= ConType.GetHashCode();
      if (RouteId.Length != 0) hash ^= RouteId.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (ConType != 0) {
        output.WriteRawTag(8);
        output.WriteEnum((int) ConType);
      }
      if (RouteId.Length != 0) {
        output.WriteRawTag(18);
        output.WriteString(RouteId);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (ConType != 0) {
        size += 1 + pb::CodedOutputStream.ComputeEnumSize((int) ConType);
      }
      if (RouteId.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(RouteId);
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(HeartBeatReq other) {
      if (other == null) {
        return;
      }
      if (other.ConType != 0) {
        ConType = other.ConType;
      }
      if (other.RouteId.Length != 0) {
        RouteId = other.RouteId;
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 8: {
            ConType = (global::com.unity.mgobe.ConnectionType) input.ReadEnum();
            break;
          }
          case 18: {
            RouteId = input.ReadString();
            break;
          }
        }
      }
    }

  }

  public sealed partial class HeartBeatRsp : pb::IMessage<HeartBeatRsp> {
    private static readonly pb::MessageParser<HeartBeatRsp> _parser = new pb::MessageParser<HeartBeatRsp>(() => new HeartBeatRsp());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<HeartBeatRsp> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::com.unity.mgobe.ProtoReflection.Descriptor.MessageTypes[8]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public HeartBeatRsp() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public HeartBeatRsp(HeartBeatRsp other) : this() {
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public HeartBeatRsp Clone() {
      return new HeartBeatRsp(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as HeartBeatRsp);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(HeartBeatRsp other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(HeartBeatRsp other) {
      if (other == null) {
        return;
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
        }
      }
    }

  }

  /// <summary>
  ////客户端协议
  /// </summary>
  public sealed partial class ServerSendClientBstWrap2 : pb::IMessage<ServerSendClientBstWrap2> {
    private static readonly pb::MessageParser<ServerSendClientBstWrap2> _parser = new pb::MessageParser<ServerSendClientBstWrap2>(() => new ServerSendClientBstWrap2());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<ServerSendClientBstWrap2> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::com.unity.mgobe.ProtoReflection.Descriptor.MessageTypes[9]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ServerSendClientBstWrap2() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ServerSendClientBstWrap2(ServerSendClientBstWrap2 other) : this() {
      type_ = other.type_;
      msg_ = other.msg_;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ServerSendClientBstWrap2 Clone() {
      return new ServerSendClientBstWrap2(this);
    }

    /// <summary>Field number for the "type" field.</summary>
    public const int TypeFieldNumber = 1;
    private global::com.unity.mgobe.ServerSendClientBstWrap2Type type_ = 0;
    /// <summary>
    ////推送类型
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::com.unity.mgobe.ServerSendClientBstWrap2Type Type {
      get { return type_; }
      set {
        type_ = value;
      }
    }

    /// <summary>Field number for the "msg" field.</summary>
    public const int MsgFieldNumber = 2;
    private pb::ByteString msg_ = pb::ByteString.Empty;
    /// <summary>
    ////推送消息，由各业务定义
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pb::ByteString Msg {
      get { return msg_; }
      set {
        msg_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as ServerSendClientBstWrap2);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(ServerSendClientBstWrap2 other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (Type != other.Type) return false;
      if (Msg != other.Msg) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (Type != 0) hash ^= Type.GetHashCode();
      if (Msg.Length != 0) hash ^= Msg.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (Type != 0) {
        output.WriteRawTag(8);
        output.WriteEnum((int) Type);
      }
      if (Msg.Length != 0) {
        output.WriteRawTag(18);
        output.WriteBytes(Msg);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (Type != 0) {
        size += 1 + pb::CodedOutputStream.ComputeEnumSize((int) Type);
      }
      if (Msg.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeBytesSize(Msg);
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(ServerSendClientBstWrap2 other) {
      if (other == null) {
        return;
      }
      if (other.Type != 0) {
        Type = other.Type;
      }
      if (other.Msg.Length != 0) {
        Msg = other.Msg;
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 8: {
            Type = (global::com.unity.mgobe.ServerSendClientBstWrap2Type) input.ReadEnum();
            break;
          }
          case 18: {
            Msg = input.ReadBytes();
            break;
          }
        }
      }
    }

  }

  /// <summary>
  ////客户端协议
  /// </summary>
  public sealed partial class NOUSEServerSendClientBstRspWrap2 : pb::IMessage<NOUSEServerSendClientBstRspWrap2> {
    private static readonly pb::MessageParser<NOUSEServerSendClientBstRspWrap2> _parser = new pb::MessageParser<NOUSEServerSendClientBstRspWrap2>(() => new NOUSEServerSendClientBstRspWrap2());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<NOUSEServerSendClientBstRspWrap2> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::com.unity.mgobe.ProtoReflection.Descriptor.MessageTypes[10]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public NOUSEServerSendClientBstRspWrap2() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public NOUSEServerSendClientBstRspWrap2(NOUSEServerSendClientBstRspWrap2 other) : this() {
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public NOUSEServerSendClientBstRspWrap2 Clone() {
      return new NOUSEServerSendClientBstRspWrap2(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as NOUSEServerSendClientBstRspWrap2);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(NOUSEServerSendClientBstRspWrap2 other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(NOUSEServerSendClientBstRspWrap2 other) {
      if (other == null) {
        return;
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
        }
      }
    }

  }

  /// <summary>
  ////检查是否登陆
  /// </summary>
  public sealed partial class CheckLoginReq : pb::IMessage<CheckLoginReq> {
    private static readonly pb::MessageParser<CheckLoginReq> _parser = new pb::MessageParser<CheckLoginReq>(() => new CheckLoginReq());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<CheckLoginReq> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::com.unity.mgobe.ProtoReflection.Descriptor.MessageTypes[11]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public CheckLoginReq() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public CheckLoginReq(CheckLoginReq other) : this() {
      token_ = other.token_;
      routeId_ = other.routeId_;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public CheckLoginReq Clone() {
      return new CheckLoginReq(this);
    }

    /// <summary>Field number for the "token" field.</summary>
    public const int TokenFieldNumber = 1;
    private string token_ = "";
    /// <summary>
    ////客户端token
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string Token {
      get { return token_; }
      set {
        token_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "route_id" field.</summary>
    public const int RouteIdFieldNumber = 2;
    private string routeId_ = "";
    /// <summary>
    ////路由ID
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string RouteId {
      get { return routeId_; }
      set {
        routeId_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as CheckLoginReq);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(CheckLoginReq other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (Token != other.Token) return false;
      if (RouteId != other.RouteId) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (Token.Length != 0) hash ^= Token.GetHashCode();
      if (RouteId.Length != 0) hash ^= RouteId.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (Token.Length != 0) {
        output.WriteRawTag(10);
        output.WriteString(Token);
      }
      if (RouteId.Length != 0) {
        output.WriteRawTag(18);
        output.WriteString(RouteId);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (Token.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(Token);
      }
      if (RouteId.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(RouteId);
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(CheckLoginReq other) {
      if (other == null) {
        return;
      }
      if (other.Token.Length != 0) {
        Token = other.Token;
      }
      if (other.RouteId.Length != 0) {
        RouteId = other.RouteId;
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 10: {
            Token = input.ReadString();
            break;
          }
          case 18: {
            RouteId = input.ReadString();
            break;
          }
        }
      }
    }

  }

  public sealed partial class CheckLoginRsp : pb::IMessage<CheckLoginRsp> {
    private static readonly pb::MessageParser<CheckLoginRsp> _parser = new pb::MessageParser<CheckLoginRsp>(() => new CheckLoginRsp());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<CheckLoginRsp> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::com.unity.mgobe.ProtoReflection.Descriptor.MessageTypes[12]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public CheckLoginRsp() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public CheckLoginRsp(CheckLoginRsp other) : this() {
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public CheckLoginRsp Clone() {
      return new CheckLoginRsp(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as CheckLoginRsp);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(CheckLoginRsp other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(CheckLoginRsp other) {
      if (other == null) {
        return;
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
        }
      }
    }

  }

  /// <summary>
  ////以下定义每个push的body
  /// </summary>
  public sealed partial class PushBodyType : pb::IMessage<PushBodyType> {
    private static readonly pb::MessageParser<PushBodyType> _parser = new pb::MessageParser<PushBodyType>(() => new PushBodyType());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<PushBodyType> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::com.unity.mgobe.ProtoReflection.Descriptor.MessageTypes[13]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public PushBodyType() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public PushBodyType(PushBodyType other) : this() {
      pushMsg_ = other.pushMsg_;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public PushBodyType Clone() {
      return new PushBodyType(this);
    }

    /// <summary>Field number for the "push_msg" field.</summary>
    public const int PushMsgFieldNumber = 1;
    private string pushMsg_ = "";
    /// <summary>
    ////测试消息
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string PushMsg {
      get { return pushMsg_; }
      set {
        pushMsg_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as PushBodyType);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(PushBodyType other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (PushMsg != other.PushMsg) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (PushMsg.Length != 0) hash ^= PushMsg.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (PushMsg.Length != 0) {
        output.WriteRawTag(10);
        output.WriteString(PushMsg);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (PushMsg.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(PushMsg);
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(PushBodyType other) {
      if (other == null) {
        return;
      }
      if (other.PushMsg.Length != 0) {
        PushMsg = other.PushMsg;
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 10: {
            PushMsg = input.ReadString();
            break;
          }
        }
      }
    }

  }

  /// <summary>
  //////////用户中心////////////
  /// </summary>
  public sealed partial class LoginReq : pb::IMessage<LoginReq> {
    private static readonly pb::MessageParser<LoginReq> _parser = new pb::MessageParser<LoginReq>(() => new LoginReq());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<LoginReq> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::com.unity.mgobe.ProtoReflection.Descriptor.MessageTypes[14]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public LoginReq() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public LoginReq(LoginReq other) : this() {
      gameId_ = other.gameId_;
      openId_ = other.openId_;
      platform_ = other.platform_;
      channel_ = other.channel_;
      nonce_ = other.nonce_;
      timestamp_ = other.timestamp_;
      sign_ = other.sign_;
      deviceId_ = other.deviceId_;
      mac_ = other.mac_;
      imei_ = other.imei_;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public LoginReq Clone() {
      return new LoginReq(this);
    }

    /// <summary>Field number for the "game_id" field.</summary>
    public const int GameIdFieldNumber = 1;
    private string gameId_ = "";
    /// <summary>
    ////字段顺序：1、通用gameid roomid playerid  2、相关字段放一起
    ////gameid + open_id => player_id
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string GameId {
      get { return gameId_; }
      set {
        gameId_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "open_id" field.</summary>
    public const int OpenIdFieldNumber = 2;
    private string openId_ = "";
    /// <summary>
    //// 若是微信平台，则是微信用户的openid, 开发商提供
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string OpenId {
      get { return openId_; }
      set {
        openId_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "platform" field.</summary>
    public const int PlatformFieldNumber = 3;
    private ulong platform_;
    /// <summary>
    //// 平台类型 android ios
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ulong Platform {
      get { return platform_; }
      set {
        platform_ = value;
      }
    }

    /// <summary>Field number for the "channel" field.</summary>
    public const int ChannelFieldNumber = 4;
    private ulong channel_;
    /// <summary>
    //// 渠道： 微信、qq、QQ空间
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ulong Channel {
      get { return channel_; }
      set {
        channel_ = value;
      }
    }

    /// <summary>Field number for the "nonce" field.</summary>
    public const int NonceFieldNumber = 5;
    private ulong nonce_;
    /// <summary>
    //// 随机正整数
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ulong Nonce {
      get { return nonce_; }
      set {
        nonce_ = value;
      }
    }

    /// <summary>Field number for the "timestamp" field.</summary>
    public const int TimestampFieldNumber = 6;
    private ulong timestamp_;
    /// <summary>
    //// 时间戳
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ulong Timestamp {
      get { return timestamp_; }
      set {
        timestamp_ = value;
      }
    }

    /// <summary>Field number for the "sign" field.</summary>
    public const int SignFieldNumber = 7;
    private string sign_ = "";
    /// <summary>
    //// 签名串
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string Sign {
      get { return sign_; }
      set {
        sign_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "device_id" field.</summary>
    public const int DeviceIdFieldNumber = 8;
    private string deviceId_ = "";
    /// <summary>
    //// 设备ID
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string DeviceId {
      get { return deviceId_; }
      set {
        deviceId_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "mac" field.</summary>
    public const int MacFieldNumber = 9;
    private string mac_ = "";
    /// <summary>
    //// mac地址
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string Mac {
      get { return mac_; }
      set {
        mac_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "imei" field.</summary>
    public const int ImeiFieldNumber = 10;
    private string imei_ = "";
    /// <summary>
    //// 手机序列号
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string Imei {
      get { return imei_; }
      set {
        imei_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as LoginReq);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(LoginReq other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (GameId != other.GameId) return false;
      if (OpenId != other.OpenId) return false;
      if (Platform != other.Platform) return false;
      if (Channel != other.Channel) return false;
      if (Nonce != other.Nonce) return false;
      if (Timestamp != other.Timestamp) return false;
      if (Sign != other.Sign) return false;
      if (DeviceId != other.DeviceId) return false;
      if (Mac != other.Mac) return false;
      if (Imei != other.Imei) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (GameId.Length != 0) hash ^= GameId.GetHashCode();
      if (OpenId.Length != 0) hash ^= OpenId.GetHashCode();
      if (Platform != 0UL) hash ^= Platform.GetHashCode();
      if (Channel != 0UL) hash ^= Channel.GetHashCode();
      if (Nonce != 0UL) hash ^= Nonce.GetHashCode();
      if (Timestamp != 0UL) hash ^= Timestamp.GetHashCode();
      if (Sign.Length != 0) hash ^= Sign.GetHashCode();
      if (DeviceId.Length != 0) hash ^= DeviceId.GetHashCode();
      if (Mac.Length != 0) hash ^= Mac.GetHashCode();
      if (Imei.Length != 0) hash ^= Imei.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (GameId.Length != 0) {
        output.WriteRawTag(10);
        output.WriteString(GameId);
      }
      if (OpenId.Length != 0) {
        output.WriteRawTag(18);
        output.WriteString(OpenId);
      }
      if (Platform != 0UL) {
        output.WriteRawTag(24);
        output.WriteUInt64(Platform);
      }
      if (Channel != 0UL) {
        output.WriteRawTag(32);
        output.WriteUInt64(Channel);
      }
      if (Nonce != 0UL) {
        output.WriteRawTag(40);
        output.WriteUInt64(Nonce);
      }
      if (Timestamp != 0UL) {
        output.WriteRawTag(48);
        output.WriteUInt64(Timestamp);
      }
      if (Sign.Length != 0) {
        output.WriteRawTag(58);
        output.WriteString(Sign);
      }
      if (DeviceId.Length != 0) {
        output.WriteRawTag(66);
        output.WriteString(DeviceId);
      }
      if (Mac.Length != 0) {
        output.WriteRawTag(74);
        output.WriteString(Mac);
      }
      if (Imei.Length != 0) {
        output.WriteRawTag(82);
        output.WriteString(Imei);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (GameId.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(GameId);
      }
      if (OpenId.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(OpenId);
      }
      if (Platform != 0UL) {
        size += 1 + pb::CodedOutputStream.ComputeUInt64Size(Platform);
      }
      if (Channel != 0UL) {
        size += 1 + pb::CodedOutputStream.ComputeUInt64Size(Channel);
      }
      if (Nonce != 0UL) {
        size += 1 + pb::CodedOutputStream.ComputeUInt64Size(Nonce);
      }
      if (Timestamp != 0UL) {
        size += 1 + pb::CodedOutputStream.ComputeUInt64Size(Timestamp);
      }
      if (Sign.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(Sign);
      }
      if (DeviceId.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(DeviceId);
      }
      if (Mac.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(Mac);
      }
      if (Imei.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(Imei);
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(LoginReq other) {
      if (other == null) {
        return;
      }
      if (other.GameId.Length != 0) {
        GameId = other.GameId;
      }
      if (other.OpenId.Length != 0) {
        OpenId = other.OpenId;
      }
      if (other.Platform != 0UL) {
        Platform = other.Platform;
      }
      if (other.Channel != 0UL) {
        Channel = other.Channel;
      }
      if (other.Nonce != 0UL) {
        Nonce = other.Nonce;
      }
      if (other.Timestamp != 0UL) {
        Timestamp = other.Timestamp;
      }
      if (other.Sign.Length != 0) {
        Sign = other.Sign;
      }
      if (other.DeviceId.Length != 0) {
        DeviceId = other.DeviceId;
      }
      if (other.Mac.Length != 0) {
        Mac = other.Mac;
      }
      if (other.Imei.Length != 0) {
        Imei = other.Imei;
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 10: {
            GameId = input.ReadString();
            break;
          }
          case 18: {
            OpenId = input.ReadString();
            break;
          }
          case 24: {
            Platform = input.ReadUInt64();
            break;
          }
          case 32: {
            Channel = input.ReadUInt64();
            break;
          }
          case 40: {
            Nonce = input.ReadUInt64();
            break;
          }
          case 48: {
            Timestamp = input.ReadUInt64();
            break;
          }
          case 58: {
            Sign = input.ReadString();
            break;
          }
          case 66: {
            DeviceId = input.ReadString();
            break;
          }
          case 74: {
            Mac = input.ReadString();
            break;
          }
          case 82: {
            Imei = input.ReadString();
            break;
          }
        }
      }
    }

  }

  public sealed partial class LoginRsp : pb::IMessage<LoginRsp> {
    private static readonly pb::MessageParser<LoginRsp> _parser = new pb::MessageParser<LoginRsp>(() => new LoginRsp());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<LoginRsp> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::com.unity.mgobe.ProtoReflection.Descriptor.MessageTypes[15]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public LoginRsp() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public LoginRsp(LoginRsp other) : this() {
      token_ = other.token_;
      playerId_ = other.playerId_;
      expireTime_ = other.expireTime_;
      sdkConfig_ = other.sdkConfig_ != null ? other.sdkConfig_.Clone() : null;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public LoginRsp Clone() {
      return new LoginRsp(this);
    }

    /// <summary>Field number for the "token" field.</summary>
    public const int TokenFieldNumber = 1;
    private string token_ = "";
    /// <summary>
    //// 签发的token
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string Token {
      get { return token_; }
      set {
        token_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "player_id" field.</summary>
    public const int PlayerIdFieldNumber = 2;
    private string playerId_ = "";
    /// <summary>
    //// 用户id，游戏平台生成
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string PlayerId {
      get { return playerId_; }
      set {
        playerId_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "expire_time" field.</summary>
    public const int ExpireTimeFieldNumber = 3;
    private ulong expireTime_;
    /// <summary>
    //// 过期时间
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ulong ExpireTime {
      get { return expireTime_; }
      set {
        expireTime_ = value;
      }
    }

    /// <summary>Field number for the "sdkConfig" field.</summary>
    public const int SdkConfigFieldNumber = 4;
    private global::com.unity.mgobe.SdkConfig sdkConfig_;
    /// <summary>
    //// 心跳配置
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::com.unity.mgobe.SdkConfig SdkConfig {
      get { return sdkConfig_; }
      set {
        sdkConfig_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as LoginRsp);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(LoginRsp other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (Token != other.Token) return false;
      if (PlayerId != other.PlayerId) return false;
      if (ExpireTime != other.ExpireTime) return false;
      if (!object.Equals(SdkConfig, other.SdkConfig)) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (Token.Length != 0) hash ^= Token.GetHashCode();
      if (PlayerId.Length != 0) hash ^= PlayerId.GetHashCode();
      if (ExpireTime != 0UL) hash ^= ExpireTime.GetHashCode();
      if (sdkConfig_ != null) hash ^= SdkConfig.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (Token.Length != 0) {
        output.WriteRawTag(10);
        output.WriteString(Token);
      }
      if (PlayerId.Length != 0) {
        output.WriteRawTag(18);
        output.WriteString(PlayerId);
      }
      if (ExpireTime != 0UL) {
        output.WriteRawTag(24);
        output.WriteUInt64(ExpireTime);
      }
      if (sdkConfig_ != null) {
        output.WriteRawTag(34);
        output.WriteMessage(SdkConfig);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (Token.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(Token);
      }
      if (PlayerId.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(PlayerId);
      }
      if (ExpireTime != 0UL) {
        size += 1 + pb::CodedOutputStream.ComputeUInt64Size(ExpireTime);
      }
      if (sdkConfig_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(SdkConfig);
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(LoginRsp other) {
      if (other == null) {
        return;
      }
      if (other.Token.Length != 0) {
        Token = other.Token;
      }
      if (other.PlayerId.Length != 0) {
        PlayerId = other.PlayerId;
      }
      if (other.ExpireTime != 0UL) {
        ExpireTime = other.ExpireTime;
      }
      if (other.sdkConfig_ != null) {
        if (sdkConfig_ == null) {
          SdkConfig = new global::com.unity.mgobe.SdkConfig();
        }
        SdkConfig.MergeFrom(other.SdkConfig);
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 10: {
            Token = input.ReadString();
            break;
          }
          case 18: {
            PlayerId = input.ReadString();
            break;
          }
          case 24: {
            ExpireTime = input.ReadUInt64();
            break;
          }
          case 34: {
            if (sdkConfig_ == null) {
              SdkConfig = new global::com.unity.mgobe.SdkConfig();
            }
            input.ReadMessage(SdkConfig);
            break;
          }
        }
      }
    }

  }

  public sealed partial class SdkConfig : pb::IMessage<SdkConfig> {
    private static readonly pb::MessageParser<SdkConfig> _parser = new pb::MessageParser<SdkConfig>(() => new SdkConfig());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<SdkConfig> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::com.unity.mgobe.ProtoReflection.Descriptor.MessageTypes[16]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public SdkConfig() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public SdkConfig(SdkConfig other) : this() {
      pingInterval_ = other.pingInterval_;
      reportInterval_ = other.reportInterval_;
      serverTime_ = other.serverTime_;
      enableUdp_ = other.enableUdp_;
      disableReport_ = other.disableReport_;
      disableReqReport_ = other.disableReqReport_;
      disableFrameReport_ = other.disableFrameReport_;
      minReportSize_ = other.minReportSize_;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public SdkConfig Clone() {
      return new SdkConfig(this);
    }

    /// <summary>Field number for the "ping_interval" field.</summary>
    public const int PingIntervalFieldNumber = 1;
    private uint pingInterval_;
    /// <summary>
    //// 心跳间隔，默认 5000, ms
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public uint PingInterval {
      get { return pingInterval_; }
      set {
        pingInterval_ = value;
      }
    }

    /// <summary>Field number for the "report_interval" field.</summary>
    public const int ReportIntervalFieldNumber = 2;
    private uint reportInterval_;
    /// <summary>
    //// sdk默认上报间隔，默认10000, ms
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public uint ReportInterval {
      get { return reportInterval_; }
      set {
        reportInterval_ = value;
      }
    }

    /// <summary>Field number for the "server_time" field.</summary>
    public const int ServerTimeFieldNumber = 3;
    private ulong serverTime_;
    /// <summary>
    //// 服务端时间戳, ms
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ulong ServerTime {
      get { return serverTime_; }
      set {
        serverTime_ = value;
      }
    }

    /// <summary>Field number for the "enable_udp" field.</summary>
    public const int EnableUdpFieldNumber = 4;
    private bool enableUdp_;
    /// <summary>
    //// 是否使用 UDP
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool EnableUdp {
      get { return enableUdp_; }
      set {
        enableUdp_ = value;
      }
    }

    /// <summary>Field number for the "disable_report" field.</summary>
    public const int DisableReportFieldNumber = 5;
    private bool disableReport_;
    /// <summary>
    //// 是否禁止上报，默认false
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool DisableReport {
      get { return disableReport_; }
      set {
        disableReport_ = value;
      }
    }

    /// <summary>Field number for the "disable_req_report" field.</summary>
    public const int DisableReqReportFieldNumber = 6;
    private bool disableReqReport_;
    /// <summary>
    //// 是否禁止上报接口调用，默认false
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool DisableReqReport {
      get { return disableReqReport_; }
      set {
        disableReqReport_ = value;
      }
    }

    /// <summary>Field number for the "disable_frame_report" field.</summary>
    public const int DisableFrameReportFieldNumber = 7;
    private bool disableFrameReport_;
    /// <summary>
    //// 是否禁止上报帧广播间隔，默认false
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool DisableFrameReport {
      get { return disableFrameReport_; }
      set {
        disableFrameReport_ = value;
      }
    }

    /// <summary>Field number for the "min_report_size" field.</summary>
    public const int MinReportSizeFieldNumber = 8;
    private uint minReportSize_;
    /// <summary>
    //// 最小上报条数，默认10(兼容默认0)
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public uint MinReportSize {
      get { return minReportSize_; }
      set {
        minReportSize_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as SdkConfig);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(SdkConfig other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (PingInterval != other.PingInterval) return false;
      if (ReportInterval != other.ReportInterval) return false;
      if (ServerTime != other.ServerTime) return false;
      if (EnableUdp != other.EnableUdp) return false;
      if (DisableReport != other.DisableReport) return false;
      if (DisableReqReport != other.DisableReqReport) return false;
      if (DisableFrameReport != other.DisableFrameReport) return false;
      if (MinReportSize != other.MinReportSize) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (PingInterval != 0) hash ^= PingInterval.GetHashCode();
      if (ReportInterval != 0) hash ^= ReportInterval.GetHashCode();
      if (ServerTime != 0UL) hash ^= ServerTime.GetHashCode();
      if (EnableUdp != false) hash ^= EnableUdp.GetHashCode();
      if (DisableReport != false) hash ^= DisableReport.GetHashCode();
      if (DisableReqReport != false) hash ^= DisableReqReport.GetHashCode();
      if (DisableFrameReport != false) hash ^= DisableFrameReport.GetHashCode();
      if (MinReportSize != 0) hash ^= MinReportSize.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (PingInterval != 0) {
        output.WriteRawTag(8);
        output.WriteUInt32(PingInterval);
      }
      if (ReportInterval != 0) {
        output.WriteRawTag(16);
        output.WriteUInt32(ReportInterval);
      }
      if (ServerTime != 0UL) {
        output.WriteRawTag(24);
        output.WriteUInt64(ServerTime);
      }
      if (EnableUdp != false) {
        output.WriteRawTag(32);
        output.WriteBool(EnableUdp);
      }
      if (DisableReport != false) {
        output.WriteRawTag(40);
        output.WriteBool(DisableReport);
      }
      if (DisableReqReport != false) {
        output.WriteRawTag(48);
        output.WriteBool(DisableReqReport);
      }
      if (DisableFrameReport != false) {
        output.WriteRawTag(56);
        output.WriteBool(DisableFrameReport);
      }
      if (MinReportSize != 0) {
        output.WriteRawTag(64);
        output.WriteUInt32(MinReportSize);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (PingInterval != 0) {
        size += 1 + pb::CodedOutputStream.ComputeUInt32Size(PingInterval);
      }
      if (ReportInterval != 0) {
        size += 1 + pb::CodedOutputStream.ComputeUInt32Size(ReportInterval);
      }
      if (ServerTime != 0UL) {
        size += 1 + pb::CodedOutputStream.ComputeUInt64Size(ServerTime);
      }
      if (EnableUdp != false) {
        size += 1 + 1;
      }
      if (DisableReport != false) {
        size += 1 + 1;
      }
      if (DisableReqReport != false) {
        size += 1 + 1;
      }
      if (DisableFrameReport != false) {
        size += 1 + 1;
      }
      if (MinReportSize != 0) {
        size += 1 + pb::CodedOutputStream.ComputeUInt32Size(MinReportSize);
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(SdkConfig other) {
      if (other == null) {
        return;
      }
      if (other.PingInterval != 0) {
        PingInterval = other.PingInterval;
      }
      if (other.ReportInterval != 0) {
        ReportInterval = other.ReportInterval;
      }
      if (other.ServerTime != 0UL) {
        ServerTime = other.ServerTime;
      }
      if (other.EnableUdp != false) {
        EnableUdp = other.EnableUdp;
      }
      if (other.DisableReport != false) {
        DisableReport = other.DisableReport;
      }
      if (other.DisableReqReport != false) {
        DisableReqReport = other.DisableReqReport;
      }
      if (other.DisableFrameReport != false) {
        DisableFrameReport = other.DisableFrameReport;
      }
      if (other.MinReportSize != 0) {
        MinReportSize = other.MinReportSize;
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 8: {
            PingInterval = input.ReadUInt32();
            break;
          }
          case 16: {
            ReportInterval = input.ReadUInt32();
            break;
          }
          case 24: {
            ServerTime = input.ReadUInt64();
            break;
          }
          case 32: {
            EnableUdp = input.ReadBool();
            break;
          }
          case 40: {
            DisableReport = input.ReadBool();
            break;
          }
          case 48: {
            DisableReqReport = input.ReadBool();
            break;
          }
          case 56: {
            DisableFrameReport = input.ReadBool();
            break;
          }
          case 64: {
            MinReportSize = input.ReadUInt32();
            break;
          }
        }
      }
    }

  }

  /// <summary>
  //// 接入层负责校验token，这里去掉
  ////string token        = 1; /// 登录成功后签发的token
  /// </summary>
  public sealed partial class LogoutReq : pb::IMessage<LogoutReq> {
    private static readonly pb::MessageParser<LogoutReq> _parser = new pb::MessageParser<LogoutReq>(() => new LogoutReq());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<LogoutReq> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::com.unity.mgobe.ProtoReflection.Descriptor.MessageTypes[17]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public LogoutReq() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public LogoutReq(LogoutReq other) : this() {
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public LogoutReq Clone() {
      return new LogoutReq(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as LogoutReq);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(LogoutReq other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(LogoutReq other) {
      if (other == null) {
        return;
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
        }
      }
    }

  }

  public sealed partial class LogoutRsp : pb::IMessage<LogoutRsp> {
    private static readonly pb::MessageParser<LogoutRsp> _parser = new pb::MessageParser<LogoutRsp>(() => new LogoutRsp());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<LogoutRsp> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::com.unity.mgobe.ProtoReflection.Descriptor.MessageTypes[18]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public LogoutRsp() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public LogoutRsp(LogoutRsp other) : this() {
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public LogoutRsp Clone() {
      return new LogoutRsp(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as LogoutRsp);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(LogoutRsp other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(LogoutRsp other) {
      if (other == null) {
        return;
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
        }
      }
    }

  }

  /// <summary>
  ///////////////////////////////////////////////帧同步服务 or 状态同步/////////////////////////////////////////////
  /// </summary>
  public sealed partial class StartFrameSyncReq : pb::IMessage<StartFrameSyncReq> {
    private static readonly pb::MessageParser<StartFrameSyncReq> _parser = new pb::MessageParser<StartFrameSyncReq>(() => new StartFrameSyncReq());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<StartFrameSyncReq> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::com.unity.mgobe.ProtoReflection.Descriptor.MessageTypes[19]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public StartFrameSyncReq() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public StartFrameSyncReq(StartFrameSyncReq other) : this() {
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public StartFrameSyncReq Clone() {
      return new StartFrameSyncReq(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as StartFrameSyncReq);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(StartFrameSyncReq other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(StartFrameSyncReq other) {
      if (other == null) {
        return;
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
        }
      }
    }

  }

  public sealed partial class StartFrameSyncRsp : pb::IMessage<StartFrameSyncRsp> {
    private static readonly pb::MessageParser<StartFrameSyncRsp> _parser = new pb::MessageParser<StartFrameSyncRsp>(() => new StartFrameSyncRsp());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<StartFrameSyncRsp> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::com.unity.mgobe.ProtoReflection.Descriptor.MessageTypes[20]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public StartFrameSyncRsp() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public StartFrameSyncRsp(StartFrameSyncRsp other) : this() {
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public StartFrameSyncRsp Clone() {
      return new StartFrameSyncRsp(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as StartFrameSyncRsp);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(StartFrameSyncRsp other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(StartFrameSyncRsp other) {
      if (other == null) {
        return;
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
        }
      }
    }

  }

  public sealed partial class StopFrameSyncReq : pb::IMessage<StopFrameSyncReq> {
    private static readonly pb::MessageParser<StopFrameSyncReq> _parser = new pb::MessageParser<StopFrameSyncReq>(() => new StopFrameSyncReq());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<StopFrameSyncReq> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::com.unity.mgobe.ProtoReflection.Descriptor.MessageTypes[21]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public StopFrameSyncReq() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public StopFrameSyncReq(StopFrameSyncReq other) : this() {
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public StopFrameSyncReq Clone() {
      return new StopFrameSyncReq(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as StopFrameSyncReq);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(StopFrameSyncReq other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(StopFrameSyncReq other) {
      if (other == null) {
        return;
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
        }
      }
    }

  }

  public sealed partial class StopFrameSyncRsp : pb::IMessage<StopFrameSyncRsp> {
    private static readonly pb::MessageParser<StopFrameSyncRsp> _parser = new pb::MessageParser<StopFrameSyncRsp>(() => new StopFrameSyncRsp());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<StopFrameSyncRsp> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::com.unity.mgobe.ProtoReflection.Descriptor.MessageTypes[22]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public StopFrameSyncRsp() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public StopFrameSyncRsp(StopFrameSyncRsp other) : this() {
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public StopFrameSyncRsp Clone() {
      return new StopFrameSyncRsp(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as StopFrameSyncRsp);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(StopFrameSyncRsp other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(StopFrameSyncRsp other) {
      if (other == null) {
        return;
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
        }
      }
    }

  }

  public sealed partial class FrameItem : pb::IMessage<FrameItem> {
    private static readonly pb::MessageParser<FrameItem> _parser = new pb::MessageParser<FrameItem>(() => new FrameItem());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<FrameItem> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::com.unity.mgobe.ProtoReflection.Descriptor.MessageTypes[23]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public FrameItem() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public FrameItem(FrameItem other) : this() {
      playerId_ = other.playerId_;
      data_ = other.data_;
      timestamp_ = other.timestamp_;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public FrameItem Clone() {
      return new FrameItem(this);
    }

    /// <summary>Field number for the "player_id" field.</summary>
    public const int PlayerIdFieldNumber = 1;
    private string playerId_ = "";
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string PlayerId {
      get { return playerId_; }
      set {
        playerId_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "data" field.</summary>
    public const int DataFieldNumber = 2;
    private string data_ = "";
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string Data {
      get { return data_; }
      set {
        data_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "timestamp" field.</summary>
    public const int TimestampFieldNumber = 3;
    private ulong timestamp_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ulong Timestamp {
      get { return timestamp_; }
      set {
        timestamp_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as FrameItem);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(FrameItem other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (PlayerId != other.PlayerId) return false;
      if (Data != other.Data) return false;
      if (Timestamp != other.Timestamp) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (PlayerId.Length != 0) hash ^= PlayerId.GetHashCode();
      if (Data.Length != 0) hash ^= Data.GetHashCode();
      if (Timestamp != 0UL) hash ^= Timestamp.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (PlayerId.Length != 0) {
        output.WriteRawTag(10);
        output.WriteString(PlayerId);
      }
      if (Data.Length != 0) {
        output.WriteRawTag(18);
        output.WriteString(Data);
      }
      if (Timestamp != 0UL) {
        output.WriteRawTag(24);
        output.WriteUInt64(Timestamp);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (PlayerId.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(PlayerId);
      }
      if (Data.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(Data);
      }
      if (Timestamp != 0UL) {
        size += 1 + pb::CodedOutputStream.ComputeUInt64Size(Timestamp);
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(FrameItem other) {
      if (other == null) {
        return;
      }
      if (other.PlayerId.Length != 0) {
        PlayerId = other.PlayerId;
      }
      if (other.Data.Length != 0) {
        Data = other.Data;
      }
      if (other.Timestamp != 0UL) {
        Timestamp = other.Timestamp;
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 10: {
            PlayerId = input.ReadString();
            break;
          }
          case 18: {
            Data = input.ReadString();
            break;
          }
          case 24: {
            Timestamp = input.ReadUInt64();
            break;
          }
        }
      }
    }

  }

  /// <summary>
  ////帧输入
  /// </summary>
  public sealed partial class SendFrameReq : pb::IMessage<SendFrameReq> {
    private static readonly pb::MessageParser<SendFrameReq> _parser = new pb::MessageParser<SendFrameReq>(() => new SendFrameReq());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<SendFrameReq> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::com.unity.mgobe.ProtoReflection.Descriptor.MessageTypes[24]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public SendFrameReq() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public SendFrameReq(SendFrameReq other) : this() {
      roomId_ = other.roomId_;
      item_ = other.item_ != null ? other.item_.Clone() : null;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public SendFrameReq Clone() {
      return new SendFrameReq(this);
    }

    /// <summary>Field number for the "room_id" field.</summary>
    public const int RoomIdFieldNumber = 1;
    private string roomId_ = "";
    /// <summary>
    //// [rm-sdk-para]
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string RoomId {
      get { return roomId_; }
      set {
        roomId_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "item" field.</summary>
    public const int ItemFieldNumber = 2;
    private global::com.unity.mgobe.FrameItem item_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::com.unity.mgobe.FrameItem Item {
      get { return item_; }
      set {
        item_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as SendFrameReq);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(SendFrameReq other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (RoomId != other.RoomId) return false;
      if (!object.Equals(Item, other.Item)) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (RoomId.Length != 0) hash ^= RoomId.GetHashCode();
      if (item_ != null) hash ^= Item.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (RoomId.Length != 0) {
        output.WriteRawTag(10);
        output.WriteString(RoomId);
      }
      if (item_ != null) {
        output.WriteRawTag(18);
        output.WriteMessage(Item);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (RoomId.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(RoomId);
      }
      if (item_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(Item);
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(SendFrameReq other) {
      if (other == null) {
        return;
      }
      if (other.RoomId.Length != 0) {
        RoomId = other.RoomId;
      }
      if (other.item_ != null) {
        if (item_ == null) {
          Item = new global::com.unity.mgobe.FrameItem();
        }
        Item.MergeFrom(other.Item);
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 10: {
            RoomId = input.ReadString();
            break;
          }
          case 18: {
            if (item_ == null) {
              Item = new global::com.unity.mgobe.FrameItem();
            }
            input.ReadMessage(Item);
            break;
          }
        }
      }
    }

  }

  public sealed partial class SendFrameRsp : pb::IMessage<SendFrameRsp> {
    private static readonly pb::MessageParser<SendFrameRsp> _parser = new pb::MessageParser<SendFrameRsp>(() => new SendFrameRsp());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<SendFrameRsp> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::com.unity.mgobe.ProtoReflection.Descriptor.MessageTypes[25]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public SendFrameRsp() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public SendFrameRsp(SendFrameRsp other) : this() {
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public SendFrameRsp Clone() {
      return new SendFrameRsp(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as SendFrameRsp);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(SendFrameRsp other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(SendFrameRsp other) {
      if (other == null) {
        return;
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
        }
      }
    }

  }

  public sealed partial class FrameExtInfo : pb::IMessage<FrameExtInfo> {
    private static readonly pb::MessageParser<FrameExtInfo> _parser = new pb::MessageParser<FrameExtInfo>(() => new FrameExtInfo());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<FrameExtInfo> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::com.unity.mgobe.ProtoReflection.Descriptor.MessageTypes[26]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public FrameExtInfo() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public FrameExtInfo(FrameExtInfo other) : this() {
      seed_ = other.seed_;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public FrameExtInfo Clone() {
      return new FrameExtInfo(this);
    }

    /// <summary>Field number for the "seed" field.</summary>
    public const int SeedFieldNumber = 1;
    private ulong seed_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ulong Seed {
      get { return seed_; }
      set {
        seed_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as FrameExtInfo);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(FrameExtInfo other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (Seed != other.Seed) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (Seed != 0UL) hash ^= Seed.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (Seed != 0UL) {
        output.WriteRawTag(8);
        output.WriteUInt64(Seed);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (Seed != 0UL) {
        size += 1 + pb::CodedOutputStream.ComputeUInt64Size(Seed);
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(FrameExtInfo other) {
      if (other == null) {
        return;
      }
      if (other.Seed != 0UL) {
        Seed = other.Seed;
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 8: {
            Seed = input.ReadUInt64();
            break;
          }
        }
      }
    }

  }

  public sealed partial class Frame : pb::IMessage<Frame> {
    private static readonly pb::MessageParser<Frame> _parser = new pb::MessageParser<Frame>(() => new Frame());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<Frame> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::com.unity.mgobe.ProtoReflection.Descriptor.MessageTypes[27]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public Frame() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public Frame(Frame other) : this() {
      id_ = other.id_;
      items_ = other.items_.Clone();
      ext_ = other.ext_ != null ? other.ext_.Clone() : null;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public Frame Clone() {
      return new Frame(this);
    }

    /// <summary>Field number for the "id" field.</summary>
    public const int IdFieldNumber = 1;
    private ulong id_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ulong Id {
      get { return id_; }
      set {
        id_ = value;
      }
    }

    /// <summary>Field number for the "items" field.</summary>
    public const int ItemsFieldNumber = 2;
    private static readonly pb::FieldCodec<global::com.unity.mgobe.FrameItem> _repeated_items_codec
        = pb::FieldCodec.ForMessage(18, global::com.unity.mgobe.FrameItem.Parser);
    private readonly pbc::RepeatedField<global::com.unity.mgobe.FrameItem> items_ = new pbc::RepeatedField<global::com.unity.mgobe.FrameItem>();
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::RepeatedField<global::com.unity.mgobe.FrameItem> Items {
      get { return items_; }
    }

    /// <summary>Field number for the "ext" field.</summary>
    public const int ExtFieldNumber = 3;
    private global::com.unity.mgobe.FrameExtInfo ext_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::com.unity.mgobe.FrameExtInfo Ext {
      get { return ext_; }
      set {
        ext_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as Frame);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(Frame other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (Id != other.Id) return false;
      if(!items_.Equals(other.items_)) return false;
      if (!object.Equals(Ext, other.Ext)) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (Id != 0UL) hash ^= Id.GetHashCode();
      hash ^= items_.GetHashCode();
      if (ext_ != null) hash ^= Ext.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (Id != 0UL) {
        output.WriteRawTag(8);
        output.WriteUInt64(Id);
      }
      items_.WriteTo(output, _repeated_items_codec);
      if (ext_ != null) {
        output.WriteRawTag(26);
        output.WriteMessage(Ext);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (Id != 0UL) {
        size += 1 + pb::CodedOutputStream.ComputeUInt64Size(Id);
      }
      size += items_.CalculateSize(_repeated_items_codec);
      if (ext_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(Ext);
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(Frame other) {
      if (other == null) {
        return;
      }
      if (other.Id != 0UL) {
        Id = other.Id;
      }
      items_.Add(other.items_);
      if (other.ext_ != null) {
        if (ext_ == null) {
          Ext = new global::com.unity.mgobe.FrameExtInfo();
        }
        Ext.MergeFrom(other.Ext);
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 8: {
            Id = input.ReadUInt64();
            break;
          }
          case 18: {
            items_.AddEntriesFrom(input, _repeated_items_codec);
            break;
          }
          case 26: {
            if (ext_ == null) {
              Ext = new global::com.unity.mgobe.FrameExtInfo();
            }
            input.ReadMessage(Ext);
            break;
          }
        }
      }
    }

  }

  /// <summary>
  ////补帧
  /// </summary>
  public sealed partial class RequestFrameReq : pb::IMessage<RequestFrameReq> {
    private static readonly pb::MessageParser<RequestFrameReq> _parser = new pb::MessageParser<RequestFrameReq>(() => new RequestFrameReq());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<RequestFrameReq> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::com.unity.mgobe.ProtoReflection.Descriptor.MessageTypes[28]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public RequestFrameReq() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public RequestFrameReq(RequestFrameReq other) : this() {
      roomId_ = other.roomId_;
      beginFrameId_ = other.beginFrameId_;
      endFrameId_ = other.endFrameId_;
      supportPartial_ = other.supportPartial_;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public RequestFrameReq Clone() {
      return new RequestFrameReq(this);
    }

    /// <summary>Field number for the "room_id" field.</summary>
    public const int RoomIdFieldNumber = 1;
    private string roomId_ = "";
    /// <summary>
    //// [rm-sdk-para]
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string RoomId {
      get { return roomId_; }
      set {
        roomId_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "begin_frame_id" field.</summary>
    public const int BeginFrameIdFieldNumber = 2;
    private ulong beginFrameId_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ulong BeginFrameId {
      get { return beginFrameId_; }
      set {
        beginFrameId_ = value;
      }
    }

    /// <summary>Field number for the "end_frame_id" field.</summary>
    public const int EndFrameIdFieldNumber = 3;
    private ulong endFrameId_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ulong EndFrameId {
      get { return endFrameId_; }
      set {
        endFrameId_ = value;
      }
    }

    /// <summary>Field number for the "support_partial" field.</summary>
    public const int SupportPartialFieldNumber = 4;
    private bool supportPartial_;
    /// <summary>
    //// [rm-sdk-para]
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool SupportPartial {
      get { return supportPartial_; }
      set {
        supportPartial_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as RequestFrameReq);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(RequestFrameReq other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (RoomId != other.RoomId) return false;
      if (BeginFrameId != other.BeginFrameId) return false;
      if (EndFrameId != other.EndFrameId) return false;
      if (SupportPartial != other.SupportPartial) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (RoomId.Length != 0) hash ^= RoomId.GetHashCode();
      if (BeginFrameId != 0UL) hash ^= BeginFrameId.GetHashCode();
      if (EndFrameId != 0UL) hash ^= EndFrameId.GetHashCode();
      if (SupportPartial != false) hash ^= SupportPartial.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (RoomId.Length != 0) {
        output.WriteRawTag(10);
        output.WriteString(RoomId);
      }
      if (BeginFrameId != 0UL) {
        output.WriteRawTag(16);
        output.WriteUInt64(BeginFrameId);
      }
      if (EndFrameId != 0UL) {
        output.WriteRawTag(24);
        output.WriteUInt64(EndFrameId);
      }
      if (SupportPartial != false) {
        output.WriteRawTag(32);
        output.WriteBool(SupportPartial);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (RoomId.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(RoomId);
      }
      if (BeginFrameId != 0UL) {
        size += 1 + pb::CodedOutputStream.ComputeUInt64Size(BeginFrameId);
      }
      if (EndFrameId != 0UL) {
        size += 1 + pb::CodedOutputStream.ComputeUInt64Size(EndFrameId);
      }
      if (SupportPartial != false) {
        size += 1 + 1;
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(RequestFrameReq other) {
      if (other == null) {
        return;
      }
      if (other.RoomId.Length != 0) {
        RoomId = other.RoomId;
      }
      if (other.BeginFrameId != 0UL) {
        BeginFrameId = other.BeginFrameId;
      }
      if (other.EndFrameId != 0UL) {
        EndFrameId = other.EndFrameId;
      }
      if (other.SupportPartial != false) {
        SupportPartial = other.SupportPartial;
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 10: {
            RoomId = input.ReadString();
            break;
          }
          case 16: {
            BeginFrameId = input.ReadUInt64();
            break;
          }
          case 24: {
            EndFrameId = input.ReadUInt64();
            break;
          }
          case 32: {
            SupportPartial = input.ReadBool();
            break;
          }
        }
      }
    }

  }

  public sealed partial class RequestFrameRsp : pb::IMessage<RequestFrameRsp> {
    private static readonly pb::MessageParser<RequestFrameRsp> _parser = new pb::MessageParser<RequestFrameRsp>(() => new RequestFrameRsp());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<RequestFrameRsp> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::com.unity.mgobe.ProtoReflection.Descriptor.MessageTypes[29]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public RequestFrameRsp() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public RequestFrameRsp(RequestFrameRsp other) : this() {
      frames_ = other.frames_.Clone();
      isPartial_ = other.isPartial_;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public RequestFrameRsp Clone() {
      return new RequestFrameRsp(this);
    }

    /// <summary>Field number for the "frames" field.</summary>
    public const int FramesFieldNumber = 1;
    private static readonly pb::FieldCodec<global::com.unity.mgobe.Frame> _repeated_frames_codec
        = pb::FieldCodec.ForMessage(10, global::com.unity.mgobe.Frame.Parser);
    private readonly pbc::RepeatedField<global::com.unity.mgobe.Frame> frames_ = new pbc::RepeatedField<global::com.unity.mgobe.Frame>();
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::RepeatedField<global::com.unity.mgobe.Frame> Frames {
      get { return frames_; }
    }

    /// <summary>Field number for the "is_partial" field.</summary>
    public const int IsPartialFieldNumber = 2;
    private bool isPartial_;
    /// <summary>
    //// 如果补帧返回数据过多，会返回部分数据，需要前端继续请求
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool IsPartial {
      get { return isPartial_; }
      set {
        isPartial_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as RequestFrameRsp);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(RequestFrameRsp other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if(!frames_.Equals(other.frames_)) return false;
      if (IsPartial != other.IsPartial) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      hash ^= frames_.GetHashCode();
      if (IsPartial != false) hash ^= IsPartial.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      frames_.WriteTo(output, _repeated_frames_codec);
      if (IsPartial != false) {
        output.WriteRawTag(16);
        output.WriteBool(IsPartial);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      size += frames_.CalculateSize(_repeated_frames_codec);
      if (IsPartial != false) {
        size += 1 + 1;
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(RequestFrameRsp other) {
      if (other == null) {
        return;
      }
      frames_.Add(other.frames_);
      if (other.IsPartial != false) {
        IsPartial = other.IsPartial;
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 10: {
            frames_.AddEntriesFrom(input, _repeated_frames_codec);
            break;
          }
          case 16: {
            IsPartial = input.ReadBool();
            break;
          }
        }
      }
    }

  }

  /// <summary>
  ////玩家信息meta
  /// </summary>
  public sealed partial class PlayerInfo : pb::IMessage<PlayerInfo> {
    private static readonly pb::MessageParser<PlayerInfo> _parser = new pb::MessageParser<PlayerInfo>(() => new PlayerInfo());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<PlayerInfo> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::com.unity.mgobe.ProtoReflection.Descriptor.MessageTypes[30]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public PlayerInfo() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public PlayerInfo(PlayerInfo other) : this() {
      id_ = other.id_;
      name_ = other.name_;
      teamId_ = other.teamId_;
      customPlayerStatus_ = other.customPlayerStatus_;
      customProfile_ = other.customProfile_;
      commonNetworkState_ = other.commonNetworkState_;
      relayNetworkState_ = other.relayNetworkState_;
      isRobot_ = other.isRobot_;
      matchAttributes_ = other.matchAttributes_.Clone();
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public PlayerInfo Clone() {
      return new PlayerInfo(this);
    }

    /// <summary>Field number for the "id" field.</summary>
    public const int IdFieldNumber = 1;
    private string id_ = "";
    /// <summary>
    //// [rm-sdk-para] 用户ID（需要鉴权）
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string Id {
      get { return id_; }
      set {
        id_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "name" field.</summary>
    public const int NameFieldNumber = 2;
    private string name_ = "";
    /// <summary>
    //// 用户名字
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string Name {
      get { return name_; }
      set {
        name_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "team_id" field.</summary>
    public const int TeamIdFieldNumber = 3;
    private string teamId_ = "";
    /// <summary>
    //// [rm-sdk-para] 归属队伍id
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string TeamId {
      get { return teamId_; }
      set {
        teamId_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "custom_player_status" field.</summary>
    public const int CustomPlayerStatusFieldNumber = 4;
    private ulong customPlayerStatus_;
    /// <summary>
    //// 开发者自定义状态，客户端透传(类似：0房间中；1准备中；2游戏中)
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ulong CustomPlayerStatus {
      get { return customPlayerStatus_; }
      set {
        customPlayerStatus_ = value;
      }
    }

    /// <summary>Field number for the "custom_profile" field.</summary>
    public const int CustomProfileFieldNumber = 5;
    private string customProfile_ = "";
    /// <summary>
    //// 开发者自定义属性，用户的其他属性信息
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string CustomProfile {
      get { return customProfile_; }
      set {
        customProfile_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "common_network_state" field.</summary>
    public const int CommonNetworkStateFieldNumber = 6;
    private global::com.unity.mgobe.NetworkState commonNetworkState_ = 0;
    /// <summary>
    //// [rm-sdk-para] 用户房间控制流网络状态：0房间掉线；1房间在线
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::com.unity.mgobe.NetworkState CommonNetworkState {
      get { return commonNetworkState_; }
      set {
        commonNetworkState_ = value;
      }
    }

    /// <summary>Field number for the "relay_network_state" field.</summary>
    public const int RelayNetworkStateFieldNumber = 7;
    private global::com.unity.mgobe.NetworkState relayNetworkState_ = 0;
    /// <summary>
    //// [rm-sdk-para] 用户帧同步控制流网络状态：2掉线；3在线
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::com.unity.mgobe.NetworkState RelayNetworkState {
      get { return relayNetworkState_; }
      set {
        relayNetworkState_ = value;
      }
    }

    /// <summary>Field number for the "is_robot" field.</summary>
    public const int IsRobotFieldNumber = 8;
    private bool isRobot_;
    /// <summary>
    //// [rm-sdk-para] 该玩家是否为机器人
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool IsRobot {
      get { return isRobot_; }
      set {
        isRobot_ = value;
      }
    }

    /// <summary>Field number for the "match_attributes" field.</summary>
    public const int MatchAttributesFieldNumber = 9;
    private static readonly pb::FieldCodec<global::com.unity.mgobe.MatchAttribute> _repeated_matchAttributes_codec
        = pb::FieldCodec.ForMessage(74, global::com.unity.mgobe.MatchAttribute.Parser);
    private readonly pbc::RepeatedField<global::com.unity.mgobe.MatchAttribute> matchAttributes_ = new pbc::RepeatedField<global::com.unity.mgobe.MatchAttribute>();
    /// <summary>
    //// [rm-sdk-para] 匹配属性列表
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::RepeatedField<global::com.unity.mgobe.MatchAttribute> MatchAttributes {
      get { return matchAttributes_; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as PlayerInfo);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(PlayerInfo other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (Id != other.Id) return false;
      if (Name != other.Name) return false;
      if (TeamId != other.TeamId) return false;
      if (CustomPlayerStatus != other.CustomPlayerStatus) return false;
      if (CustomProfile != other.CustomProfile) return false;
      if (CommonNetworkState != other.CommonNetworkState) return false;
      if (RelayNetworkState != other.RelayNetworkState) return false;
      if (IsRobot != other.IsRobot) return false;
      if(!matchAttributes_.Equals(other.matchAttributes_)) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (Id.Length != 0) hash ^= Id.GetHashCode();
      if (Name.Length != 0) hash ^= Name.GetHashCode();
      if (TeamId.Length != 0) hash ^= TeamId.GetHashCode();
      if (CustomPlayerStatus != 0UL) hash ^= CustomPlayerStatus.GetHashCode();
      if (CustomProfile.Length != 0) hash ^= CustomProfile.GetHashCode();
      if (CommonNetworkState != 0) hash ^= CommonNetworkState.GetHashCode();
      if (RelayNetworkState != 0) hash ^= RelayNetworkState.GetHashCode();
      if (IsRobot != false) hash ^= IsRobot.GetHashCode();
      hash ^= matchAttributes_.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (Id.Length != 0) {
        output.WriteRawTag(10);
        output.WriteString(Id);
      }
      if (Name.Length != 0) {
        output.WriteRawTag(18);
        output.WriteString(Name);
      }
      if (TeamId.Length != 0) {
        output.WriteRawTag(26);
        output.WriteString(TeamId);
      }
      if (CustomPlayerStatus != 0UL) {
        output.WriteRawTag(32);
        output.WriteUInt64(CustomPlayerStatus);
      }
      if (CustomProfile.Length != 0) {
        output.WriteRawTag(42);
        output.WriteString(CustomProfile);
      }
      if (CommonNetworkState != 0) {
        output.WriteRawTag(48);
        output.WriteEnum((int) CommonNetworkState);
      }
      if (RelayNetworkState != 0) {
        output.WriteRawTag(56);
        output.WriteEnum((int) RelayNetworkState);
      }
      if (IsRobot != false) {
        output.WriteRawTag(64);
        output.WriteBool(IsRobot);
      }
      matchAttributes_.WriteTo(output, _repeated_matchAttributes_codec);
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (Id.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(Id);
      }
      if (Name.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(Name);
      }
      if (TeamId.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(TeamId);
      }
      if (CustomPlayerStatus != 0UL) {
        size += 1 + pb::CodedOutputStream.ComputeUInt64Size(CustomPlayerStatus);
      }
      if (CustomProfile.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(CustomProfile);
      }
      if (CommonNetworkState != 0) {
        size += 1 + pb::CodedOutputStream.ComputeEnumSize((int) CommonNetworkState);
      }
      if (RelayNetworkState != 0) {
        size += 1 + pb::CodedOutputStream.ComputeEnumSize((int) RelayNetworkState);
      }
      if (IsRobot != false) {
        size += 1 + 1;
      }
      size += matchAttributes_.CalculateSize(_repeated_matchAttributes_codec);
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(PlayerInfo other) {
      if (other == null) {
        return;
      }
      if (other.Id.Length != 0) {
        Id = other.Id;
      }
      if (other.Name.Length != 0) {
        Name = other.Name;
      }
      if (other.TeamId.Length != 0) {
        TeamId = other.TeamId;
      }
      if (other.CustomPlayerStatus != 0UL) {
        CustomPlayerStatus = other.CustomPlayerStatus;
      }
      if (other.CustomProfile.Length != 0) {
        CustomProfile = other.CustomProfile;
      }
      if (other.CommonNetworkState != 0) {
        CommonNetworkState = other.CommonNetworkState;
      }
      if (other.RelayNetworkState != 0) {
        RelayNetworkState = other.RelayNetworkState;
      }
      if (other.IsRobot != false) {
        IsRobot = other.IsRobot;
      }
      matchAttributes_.Add(other.matchAttributes_);
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 10: {
            Id = input.ReadString();
            break;
          }
          case 18: {
            Name = input.ReadString();
            break;
          }
          case 26: {
            TeamId = input.ReadString();
            break;
          }
          case 32: {
            CustomPlayerStatus = input.ReadUInt64();
            break;
          }
          case 42: {
            CustomProfile = input.ReadString();
            break;
          }
          case 48: {
            CommonNetworkState = (global::com.unity.mgobe.NetworkState) input.ReadEnum();
            break;
          }
          case 56: {
            RelayNetworkState = (global::com.unity.mgobe.NetworkState) input.ReadEnum();
            break;
          }
          case 64: {
            IsRobot = input.ReadBool();
            break;
          }
          case 74: {
            matchAttributes_.AddEntriesFrom(input, _repeated_matchAttributes_codec);
            break;
          }
        }
      }
    }

  }

  /// <summary>
  ////队伍信息meta
  /// </summary>
  public sealed partial class TeamInfo : pb::IMessage<TeamInfo> {
    private static readonly pb::MessageParser<TeamInfo> _parser = new pb::MessageParser<TeamInfo>(() => new TeamInfo());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<TeamInfo> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::com.unity.mgobe.ProtoReflection.Descriptor.MessageTypes[31]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public TeamInfo() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public TeamInfo(TeamInfo other) : this() {
      id_ = other.id_;
      name_ = other.name_;
      minPlayers_ = other.minPlayers_;
      maxPlayers_ = other.maxPlayers_;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public TeamInfo Clone() {
      return new TeamInfo(this);
    }

    /// <summary>Field number for the "id" field.</summary>
    public const int IdFieldNumber = 1;
    private string id_ = "";
    /// <summary>
    //// 队伍 id
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string Id {
      get { return id_; }
      set {
        id_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "name" field.</summary>
    public const int NameFieldNumber = 2;
    private string name_ = "";
    /// <summary>
    //// 队伍名称
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string Name {
      get { return name_; }
      set {
        name_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "min_players" field.</summary>
    public const int MinPlayersFieldNumber = 3;
    private uint minPlayers_;
    /// <summary>
    //// 队伍最小人数
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public uint MinPlayers {
      get { return minPlayers_; }
      set {
        minPlayers_ = value;
      }
    }

    /// <summary>Field number for the "max_players" field.</summary>
    public const int MaxPlayersFieldNumber = 4;
    private uint maxPlayers_;
    /// <summary>
    //// 队伍最大人数
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public uint MaxPlayers {
      get { return maxPlayers_; }
      set {
        maxPlayers_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as TeamInfo);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(TeamInfo other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (Id != other.Id) return false;
      if (Name != other.Name) return false;
      if (MinPlayers != other.MinPlayers) return false;
      if (MaxPlayers != other.MaxPlayers) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (Id.Length != 0) hash ^= Id.GetHashCode();
      if (Name.Length != 0) hash ^= Name.GetHashCode();
      if (MinPlayers != 0) hash ^= MinPlayers.GetHashCode();
      if (MaxPlayers != 0) hash ^= MaxPlayers.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (Id.Length != 0) {
        output.WriteRawTag(10);
        output.WriteString(Id);
      }
      if (Name.Length != 0) {
        output.WriteRawTag(18);
        output.WriteString(Name);
      }
      if (MinPlayers != 0) {
        output.WriteRawTag(24);
        output.WriteUInt32(MinPlayers);
      }
      if (MaxPlayers != 0) {
        output.WriteRawTag(32);
        output.WriteUInt32(MaxPlayers);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (Id.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(Id);
      }
      if (Name.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(Name);
      }
      if (MinPlayers != 0) {
        size += 1 + pb::CodedOutputStream.ComputeUInt32Size(MinPlayers);
      }
      if (MaxPlayers != 0) {
        size += 1 + pb::CodedOutputStream.ComputeUInt32Size(MaxPlayers);
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(TeamInfo other) {
      if (other == null) {
        return;
      }
      if (other.Id.Length != 0) {
        Id = other.Id;
      }
      if (other.Name.Length != 0) {
        Name = other.Name;
      }
      if (other.MinPlayers != 0) {
        MinPlayers = other.MinPlayers;
      }
      if (other.MaxPlayers != 0) {
        MaxPlayers = other.MaxPlayers;
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 10: {
            Id = input.ReadString();
            break;
          }
          case 18: {
            Name = input.ReadString();
            break;
          }
          case 24: {
            MinPlayers = input.ReadUInt32();
            break;
          }
          case 32: {
            MaxPlayers = input.ReadUInt32();
            break;
          }
        }
      }
    }

  }

  /// <summary>
  //// 房间信息meta
  /// </summary>
  public sealed partial class RoomInfo : pb::IMessage<RoomInfo> {
    private static readonly pb::MessageParser<RoomInfo> _parser = new pb::MessageParser<RoomInfo>(() => new RoomInfo());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<RoomInfo> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::com.unity.mgobe.ProtoReflection.Descriptor.MessageTypes[32]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public RoomInfo() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public RoomInfo(RoomInfo other) : this() {
      id_ = other.id_;
      name_ = other.name_;
      type_ = other.type_;
      createType_ = other.createType_;
      maxPlayers_ = other.maxPlayers_;
      owner_ = other.owner_;
      isPrivate_ = other.isPrivate_;
      customProperties_ = other.customProperties_;
      playerList_ = other.playerList_.Clone();
      teamList_ = other.teamList_.Clone();
      frameSyncState_ = other.frameSyncState_;
      frameRate_ = other.frameRate_;
      routeId_ = other.routeId_;
      createTime_ = other.createTime_;
      startGameTime_ = other.startGameTime_;
      isForbidJoin_ = other.isForbidJoin_;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public RoomInfo Clone() {
      return new RoomInfo(this);
    }

    /// <summary>Field number for the "id" field.</summary>
    public const int IdFieldNumber = 1;
    private string id_ = "";
    /// <summary>
    //// 房间ID
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string Id {
      get { return id_; }
      set {
        id_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "name" field.</summary>
    public const int NameFieldNumber = 2;
    private string name_ = "";
    /// <summary>
    //// 房间名称
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string Name {
      get { return name_; }
      set {
        name_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "type" field.</summary>
    public const int TypeFieldNumber = 3;
    private string type_ = "";
    /// <summary>
    //// 房间的类型，自定义，透传
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string Type {
      get { return type_; }
      set {
        type_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "create_type" field.</summary>
    public const int CreateTypeFieldNumber = 4;
    private global::com.unity.mgobe.CreateRoomType createType_ = 0;
    /// <summary>
    //// 创建房间方式
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::com.unity.mgobe.CreateRoomType CreateType {
      get { return createType_; }
      set {
        createType_ = value;
      }
    }

    /// <summary>Field number for the "max_players" field.</summary>
    public const int MaxPlayersFieldNumber = 5;
    private ulong maxPlayers_;
    /// <summary>
    //// 房间内最大用户数限制
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ulong MaxPlayers {
      get { return maxPlayers_; }
      set {
        maxPlayers_ = value;
      }
    }

    /// <summary>Field number for the "owner" field.</summary>
    public const int OwnerFieldNumber = 6;
    private string owner_ = "";
    /// <summary>
    //// 房主 player_id
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string Owner {
      get { return owner_; }
      set {
        owner_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "is_private" field.</summary>
    public const int IsPrivateFieldNumber = 9;
    private bool isPrivate_;
    /// <summary>
    //// 是否允许匹配加房
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool IsPrivate {
      get { return isPrivate_; }
      set {
        isPrivate_ = value;
      }
    }

    /// <summary>Field number for the "custom_properties" field.</summary>
    public const int CustomPropertiesFieldNumber = 10;
    private string customProperties_ = "";
    /// <summary>
    //// 开发商自定义房间属性
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string CustomProperties {
      get { return customProperties_; }
      set {
        customProperties_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "player_list" field.</summary>
    public const int PlayerListFieldNumber = 11;
    private static readonly pb::FieldCodec<global::com.unity.mgobe.PlayerInfo> _repeated_playerList_codec
        = pb::FieldCodec.ForMessage(90, global::com.unity.mgobe.PlayerInfo.Parser);
    private readonly pbc::RepeatedField<global::com.unity.mgobe.PlayerInfo> playerList_ = new pbc::RepeatedField<global::com.unity.mgobe.PlayerInfo>();
    /// <summary>
    //// 房间内用户列表
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::RepeatedField<global::com.unity.mgobe.PlayerInfo> PlayerList {
      get { return playerList_; }
    }

    /// <summary>Field number for the "team_list" field.</summary>
    public const int TeamListFieldNumber = 13;
    private static readonly pb::FieldCodec<global::com.unity.mgobe.TeamInfo> _repeated_teamList_codec
        = pb::FieldCodec.ForMessage(106, global::com.unity.mgobe.TeamInfo.Parser);
    private readonly pbc::RepeatedField<global::com.unity.mgobe.TeamInfo> teamList_ = new pbc::RepeatedField<global::com.unity.mgobe.TeamInfo>();
    /// <summary>
    //// 队伍信息
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::RepeatedField<global::com.unity.mgobe.TeamInfo> TeamList {
      get { return teamList_; }
    }

    /// <summary>Field number for the "frame_sync_state" field.</summary>
    public const int FrameSyncStateFieldNumber = 14;
    private global::com.unity.mgobe.FrameSyncState frameSyncState_ = 0;
    /// <summary>
    //// 房间帧同步状态：0未开始帧同步；1已开始帧同步
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::com.unity.mgobe.FrameSyncState FrameSyncState {
      get { return frameSyncState_; }
      set {
        frameSyncState_ = value;
      }
    }

    /// <summary>Field number for the "frame_rate" field.</summary>
    public const int FrameRateFieldNumber = 15;
    private uint frameRate_;
    /// <summary>
    //// 帧率，有效范围[5-30]
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public uint FrameRate {
      get { return frameRate_; }
      set {
        frameRate_ = value;
      }
    }

    /// <summary>Field number for the "route_id" field.</summary>
    public const int RouteIdFieldNumber = 16;
    private string routeId_ = "";
    /// <summary>
    //// 路由id
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string RouteId {
      get { return routeId_; }
      set {
        routeId_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "create_time" field.</summary>
    public const int CreateTimeFieldNumber = 17;
    private ulong createTime_;
    /// <summary>
    //// 创建房间时间
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ulong CreateTime {
      get { return createTime_; }
      set {
        createTime_ = value;
      }
    }

    /// <summary>Field number for the "start_game_time" field.</summary>
    public const int StartGameTimeFieldNumber = 18;
    private ulong startGameTime_;
    /// <summary>
    //// 开始游戏时间， 默认为0
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ulong StartGameTime {
      get { return startGameTime_; }
      set {
        startGameTime_ = value;
      }
    }

    /// <summary>Field number for the "is_forbid_join" field.</summary>
    public const int IsForbidJoinFieldNumber = 19;
    private bool isForbidJoin_;
    /// <summary>
    //// 房间是否禁止加人，默认false
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool IsForbidJoin {
      get { return isForbidJoin_; }
      set {
        isForbidJoin_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as RoomInfo);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(RoomInfo other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (Id != other.Id) return false;
      if (Name != other.Name) return false;
      if (Type != other.Type) return false;
      if (CreateType != other.CreateType) return false;
      if (MaxPlayers != other.MaxPlayers) return false;
      if (Owner != other.Owner) return false;
      if (IsPrivate != other.IsPrivate) return false;
      if (CustomProperties != other.CustomProperties) return false;
      if(!playerList_.Equals(other.playerList_)) return false;
      if(!teamList_.Equals(other.teamList_)) return false;
      if (FrameSyncState != other.FrameSyncState) return false;
      if (FrameRate != other.FrameRate) return false;
      if (RouteId != other.RouteId) return false;
      if (CreateTime != other.CreateTime) return false;
      if (StartGameTime != other.StartGameTime) return false;
      if (IsForbidJoin != other.IsForbidJoin) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (Id.Length != 0) hash ^= Id.GetHashCode();
      if (Name.Length != 0) hash ^= Name.GetHashCode();
      if (Type.Length != 0) hash ^= Type.GetHashCode();
      if (CreateType != 0) hash ^= CreateType.GetHashCode();
      if (MaxPlayers != 0UL) hash ^= MaxPlayers.GetHashCode();
      if (Owner.Length != 0) hash ^= Owner.GetHashCode();
      if (IsPrivate != false) hash ^= IsPrivate.GetHashCode();
      if (CustomProperties.Length != 0) hash ^= CustomProperties.GetHashCode();
      hash ^= playerList_.GetHashCode();
      hash ^= teamList_.GetHashCode();
      if (FrameSyncState != 0) hash ^= FrameSyncState.GetHashCode();
      if (FrameRate != 0) hash ^= FrameRate.GetHashCode();
      if (RouteId.Length != 0) hash ^= RouteId.GetHashCode();
      if (CreateTime != 0UL) hash ^= CreateTime.GetHashCode();
      if (StartGameTime != 0UL) hash ^= StartGameTime.GetHashCode();
      if (IsForbidJoin != false) hash ^= IsForbidJoin.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (Id.Length != 0) {
        output.WriteRawTag(10);
        output.WriteString(Id);
      }
      if (Name.Length != 0) {
        output.WriteRawTag(18);
        output.WriteString(Name);
      }
      if (Type.Length != 0) {
        output.WriteRawTag(26);
        output.WriteString(Type);
      }
      if (CreateType != 0) {
        output.WriteRawTag(32);
        output.WriteEnum((int) CreateType);
      }
      if (MaxPlayers != 0UL) {
        output.WriteRawTag(40);
        output.WriteUInt64(MaxPlayers);
      }
      if (Owner.Length != 0) {
        output.WriteRawTag(50);
        output.WriteString(Owner);
      }
      if (IsPrivate != false) {
        output.WriteRawTag(72);
        output.WriteBool(IsPrivate);
      }
      if (CustomProperties.Length != 0) {
        output.WriteRawTag(82);
        output.WriteString(CustomProperties);
      }
      playerList_.WriteTo(output, _repeated_playerList_codec);
      teamList_.WriteTo(output, _repeated_teamList_codec);
      if (FrameSyncState != 0) {
        output.WriteRawTag(112);
        output.WriteEnum((int) FrameSyncState);
      }
      if (FrameRate != 0) {
        output.WriteRawTag(120);
        output.WriteUInt32(FrameRate);
      }
      if (RouteId.Length != 0) {
        output.WriteRawTag(130, 1);
        output.WriteString(RouteId);
      }
      if (CreateTime != 0UL) {
        output.WriteRawTag(136, 1);
        output.WriteUInt64(CreateTime);
      }
      if (StartGameTime != 0UL) {
        output.WriteRawTag(144, 1);
        output.WriteUInt64(StartGameTime);
      }
      if (IsForbidJoin != false) {
        output.WriteRawTag(152, 1);
        output.WriteBool(IsForbidJoin);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (Id.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(Id);
      }
      if (Name.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(Name);
      }
      if (Type.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(Type);
      }
      if (CreateType != 0) {
        size += 1 + pb::CodedOutputStream.ComputeEnumSize((int) CreateType);
      }
      if (MaxPlayers != 0UL) {
        size += 1 + pb::CodedOutputStream.ComputeUInt64Size(MaxPlayers);
      }
      if (Owner.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(Owner);
      }
      if (IsPrivate != false) {
        size += 1 + 1;
      }
      if (CustomProperties.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(CustomProperties);
      }
      size += playerList_.CalculateSize(_repeated_playerList_codec);
      size += teamList_.CalculateSize(_repeated_teamList_codec);
      if (FrameSyncState != 0) {
        size += 1 + pb::CodedOutputStream.ComputeEnumSize((int) FrameSyncState);
      }
      if (FrameRate != 0) {
        size += 1 + pb::CodedOutputStream.ComputeUInt32Size(FrameRate);
      }
      if (RouteId.Length != 0) {
        size += 2 + pb::CodedOutputStream.ComputeStringSize(RouteId);
      }
      if (CreateTime != 0UL) {
        size += 2 + pb::CodedOutputStream.ComputeUInt64Size(CreateTime);
      }
      if (StartGameTime != 0UL) {
        size += 2 + pb::CodedOutputStream.ComputeUInt64Size(StartGameTime);
      }
      if (IsForbidJoin != false) {
        size += 2 + 1;
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(RoomInfo other) {
      if (other == null) {
        return;
      }
      if (other.Id.Length != 0) {
        Id = other.Id;
      }
      if (other.Name.Length != 0) {
        Name = other.Name;
      }
      if (other.Type.Length != 0) {
        Type = other.Type;
      }
      if (other.CreateType != 0) {
        CreateType = other.CreateType;
      }
      if (other.MaxPlayers != 0UL) {
        MaxPlayers = other.MaxPlayers;
      }
      if (other.Owner.Length != 0) {
        Owner = other.Owner;
      }
      if (other.IsPrivate != false) {
        IsPrivate = other.IsPrivate;
      }
      if (other.CustomProperties.Length != 0) {
        CustomProperties = other.CustomProperties;
      }
      playerList_.Add(other.playerList_);
      teamList_.Add(other.teamList_);
      if (other.FrameSyncState != 0) {
        FrameSyncState = other.FrameSyncState;
      }
      if (other.FrameRate != 0) {
        FrameRate = other.FrameRate;
      }
      if (other.RouteId.Length != 0) {
        RouteId = other.RouteId;
      }
      if (other.CreateTime != 0UL) {
        CreateTime = other.CreateTime;
      }
      if (other.StartGameTime != 0UL) {
        StartGameTime = other.StartGameTime;
      }
      if (other.IsForbidJoin != false) {
        IsForbidJoin = other.IsForbidJoin;
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 10: {
            Id = input.ReadString();
            break;
          }
          case 18: {
            Name = input.ReadString();
            break;
          }
          case 26: {
            Type = input.ReadString();
            break;
          }
          case 32: {
            CreateType = (global::com.unity.mgobe.CreateRoomType) input.ReadEnum();
            break;
          }
          case 40: {
            MaxPlayers = input.ReadUInt64();
            break;
          }
          case 50: {
            Owner = input.ReadString();
            break;
          }
          case 72: {
            IsPrivate = input.ReadBool();
            break;
          }
          case 82: {
            CustomProperties = input.ReadString();
            break;
          }
          case 90: {
            playerList_.AddEntriesFrom(input, _repeated_playerList_codec);
            break;
          }
          case 106: {
            teamList_.AddEntriesFrom(input, _repeated_teamList_codec);
            break;
          }
          case 112: {
            FrameSyncState = (global::com.unity.mgobe.FrameSyncState) input.ReadEnum();
            break;
          }
          case 120: {
            FrameRate = input.ReadUInt32();
            break;
          }
          case 130: {
            RouteId = input.ReadString();
            break;
          }
          case 136: {
            CreateTime = input.ReadUInt64();
            break;
          }
          case 144: {
            StartGameTime = input.ReadUInt64();
            break;
          }
          case 152: {
            IsForbidJoin = input.ReadBool();
            break;
          }
        }
      }
    }

  }

  /// <summary>
  ///
  ///创建房间请求信息
  //////uint64 game_id /// 游戏id，access层鉴权并放在外层协议体
  /// </summary>
  public sealed partial class CreateRoomReq : pb::IMessage<CreateRoomReq> {
    private static readonly pb::MessageParser<CreateRoomReq> _parser = new pb::MessageParser<CreateRoomReq>(() => new CreateRoomReq());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<CreateRoomReq> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::com.unity.mgobe.ProtoReflection.Descriptor.MessageTypes[33]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public CreateRoomReq() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public CreateRoomReq(CreateRoomReq other) : this() {
      roomName_ = other.roomName_;
      roomType_ = other.roomType_;
      createType_ = other.createType_;
      maxPlayers_ = other.maxPlayers_;
      isPrivate_ = other.isPrivate_;
      customProperties_ = other.customProperties_;
      playerInfo_ = other.playerInfo_ != null ? other.playerInfo_.Clone() : null;
      region_ = other.region_;
      owner_ = other.owner_;
      playerList_ = other.playerList_.Clone();
      teamList_ = other.teamList_.Clone();
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public CreateRoomReq Clone() {
      return new CreateRoomReq(this);
    }

    /// <summary>Field number for the "room_name" field.</summary>
    public const int RoomNameFieldNumber = 1;
    private string roomName_ = "";
    /// <summary>
    //// 房间名称
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string RoomName {
      get { return roomName_; }
      set {
        roomName_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "room_type" field.</summary>
    public const int RoomTypeFieldNumber = 2;
    private string roomType_ = "";
    /// <summary>
    //// 房间的类型，自定义，透传
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string RoomType {
      get { return roomType_; }
      set {
        roomType_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "create_type" field.</summary>
    public const int CreateTypeFieldNumber = 3;
    private global::com.unity.mgobe.CreateRoomType createType_ = 0;
    /// <summary>
    //// [rm-sdk-para] 创建方式：1.单人主动发起创建房间请求。2.多人在线匹配请求分配房间
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::com.unity.mgobe.CreateRoomType CreateType {
      get { return createType_; }
      set {
        createType_ = value;
      }
    }

    /// <summary>Field number for the "max_players" field.</summary>
    public const int MaxPlayersFieldNumber = 4;
    private ulong maxPlayers_;
    /// <summary>
    //// 房间内最大用户数限制
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ulong MaxPlayers {
      get { return maxPlayers_; }
      set {
        maxPlayers_ = value;
      }
    }

    /// <summary>Field number for the "is_private" field.</summary>
    public const int IsPrivateFieldNumber = 7;
    private bool isPrivate_;
    /// <summary>
    //// 是否私有
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool IsPrivate {
      get { return isPrivate_; }
      set {
        isPrivate_ = value;
      }
    }

    /// <summary>Field number for the "custom_properties" field.</summary>
    public const int CustomPropertiesFieldNumber = 8;
    private string customProperties_ = "";
    /// <summary>
    //// 开发商自定义房间属性
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string CustomProperties {
      get { return customProperties_; }
      set {
        customProperties_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "player_info" field.</summary>
    public const int PlayerInfoFieldNumber = 9;
    private global::com.unity.mgobe.PlayerInfo playerInfo_;
    /// <summary>
    //// 房主用户信息
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::com.unity.mgobe.PlayerInfo PlayerInfo {
      get { return playerInfo_; }
      set {
        playerInfo_ = value;
      }
    }

    /// <summary>Field number for the "region" field.</summary>
    public const int RegionFieldNumber = 11;
    private string region_ = "";
    /// <summary>
    //// [rm-sdk-para] 当房间为在线匹配创建的时候需要传,为owner的region
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string Region {
      get { return region_; }
      set {
        region_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "owner" field.</summary>
    public const int OwnerFieldNumber = 12;
    private string owner_ = "";
    /// <summary>
    //// [rm-sdk-para] 当房间为在线匹配创建的时候需要传, owner_player_id
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string Owner {
      get { return owner_; }
      set {
        owner_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "player_list" field.</summary>
    public const int PlayerListFieldNumber = 13;
    private static readonly pb::FieldCodec<global::com.unity.mgobe.PlayerInfo> _repeated_playerList_codec
        = pb::FieldCodec.ForMessage(106, global::com.unity.mgobe.PlayerInfo.Parser);
    private readonly pbc::RepeatedField<global::com.unity.mgobe.PlayerInfo> playerList_ = new pbc::RepeatedField<global::com.unity.mgobe.PlayerInfo>();
    /// <summary>
    //// [rm-sdk-para] 当房间为在线匹配创建的时候需要传 MATCHCREATE 匹配创建时用到, 匹配到的成员列表
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::RepeatedField<global::com.unity.mgobe.PlayerInfo> PlayerList {
      get { return playerList_; }
    }

    /// <summary>Field number for the "team_list" field.</summary>
    public const int TeamListFieldNumber = 14;
    private static readonly pb::FieldCodec<global::com.unity.mgobe.TeamInfo> _repeated_teamList_codec
        = pb::FieldCodec.ForMessage(114, global::com.unity.mgobe.TeamInfo.Parser);
    private readonly pbc::RepeatedField<global::com.unity.mgobe.TeamInfo> teamList_ = new pbc::RepeatedField<global::com.unity.mgobe.TeamInfo>();
    /// <summary>
    //// [rm-sdk-para] 当房间为在线匹配创建的时候需要传：teamid player_info_list 齐
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::RepeatedField<global::com.unity.mgobe.TeamInfo> TeamList {
      get { return teamList_; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as CreateRoomReq);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(CreateRoomReq other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (RoomName != other.RoomName) return false;
      if (RoomType != other.RoomType) return false;
      if (CreateType != other.CreateType) return false;
      if (MaxPlayers != other.MaxPlayers) return false;
      if (IsPrivate != other.IsPrivate) return false;
      if (CustomProperties != other.CustomProperties) return false;
      if (!object.Equals(PlayerInfo, other.PlayerInfo)) return false;
      if (Region != other.Region) return false;
      if (Owner != other.Owner) return false;
      if(!playerList_.Equals(other.playerList_)) return false;
      if(!teamList_.Equals(other.teamList_)) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (RoomName.Length != 0) hash ^= RoomName.GetHashCode();
      if (RoomType.Length != 0) hash ^= RoomType.GetHashCode();
      if (CreateType != 0) hash ^= CreateType.GetHashCode();
      if (MaxPlayers != 0UL) hash ^= MaxPlayers.GetHashCode();
      if (IsPrivate != false) hash ^= IsPrivate.GetHashCode();
      if (CustomProperties.Length != 0) hash ^= CustomProperties.GetHashCode();
      if (playerInfo_ != null) hash ^= PlayerInfo.GetHashCode();
      if (Region.Length != 0) hash ^= Region.GetHashCode();
      if (Owner.Length != 0) hash ^= Owner.GetHashCode();
      hash ^= playerList_.GetHashCode();
      hash ^= teamList_.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (RoomName.Length != 0) {
        output.WriteRawTag(10);
        output.WriteString(RoomName);
      }
      if (RoomType.Length != 0) {
        output.WriteRawTag(18);
        output.WriteString(RoomType);
      }
      if (CreateType != 0) {
        output.WriteRawTag(24);
        output.WriteEnum((int) CreateType);
      }
      if (MaxPlayers != 0UL) {
        output.WriteRawTag(32);
        output.WriteUInt64(MaxPlayers);
      }
      if (IsPrivate != false) {
        output.WriteRawTag(56);
        output.WriteBool(IsPrivate);
      }
      if (CustomProperties.Length != 0) {
        output.WriteRawTag(66);
        output.WriteString(CustomProperties);
      }
      if (playerInfo_ != null) {
        output.WriteRawTag(74);
        output.WriteMessage(PlayerInfo);
      }
      if (Region.Length != 0) {
        output.WriteRawTag(90);
        output.WriteString(Region);
      }
      if (Owner.Length != 0) {
        output.WriteRawTag(98);
        output.WriteString(Owner);
      }
      playerList_.WriteTo(output, _repeated_playerList_codec);
      teamList_.WriteTo(output, _repeated_teamList_codec);
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (RoomName.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(RoomName);
      }
      if (RoomType.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(RoomType);
      }
      if (CreateType != 0) {
        size += 1 + pb::CodedOutputStream.ComputeEnumSize((int) CreateType);
      }
      if (MaxPlayers != 0UL) {
        size += 1 + pb::CodedOutputStream.ComputeUInt64Size(MaxPlayers);
      }
      if (IsPrivate != false) {
        size += 1 + 1;
      }
      if (CustomProperties.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(CustomProperties);
      }
      if (playerInfo_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(PlayerInfo);
      }
      if (Region.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(Region);
      }
      if (Owner.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(Owner);
      }
      size += playerList_.CalculateSize(_repeated_playerList_codec);
      size += teamList_.CalculateSize(_repeated_teamList_codec);
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(CreateRoomReq other) {
      if (other == null) {
        return;
      }
      if (other.RoomName.Length != 0) {
        RoomName = other.RoomName;
      }
      if (other.RoomType.Length != 0) {
        RoomType = other.RoomType;
      }
      if (other.CreateType != 0) {
        CreateType = other.CreateType;
      }
      if (other.MaxPlayers != 0UL) {
        MaxPlayers = other.MaxPlayers;
      }
      if (other.IsPrivate != false) {
        IsPrivate = other.IsPrivate;
      }
      if (other.CustomProperties.Length != 0) {
        CustomProperties = other.CustomProperties;
      }
      if (other.playerInfo_ != null) {
        if (playerInfo_ == null) {
          PlayerInfo = new global::com.unity.mgobe.PlayerInfo();
        }
        PlayerInfo.MergeFrom(other.PlayerInfo);
      }
      if (other.Region.Length != 0) {
        Region = other.Region;
      }
      if (other.Owner.Length != 0) {
        Owner = other.Owner;
      }
      playerList_.Add(other.playerList_);
      teamList_.Add(other.teamList_);
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 10: {
            RoomName = input.ReadString();
            break;
          }
          case 18: {
            RoomType = input.ReadString();
            break;
          }
          case 24: {
            CreateType = (global::com.unity.mgobe.CreateRoomType) input.ReadEnum();
            break;
          }
          case 32: {
            MaxPlayers = input.ReadUInt64();
            break;
          }
          case 56: {
            IsPrivate = input.ReadBool();
            break;
          }
          case 66: {
            CustomProperties = input.ReadString();
            break;
          }
          case 74: {
            if (playerInfo_ == null) {
              PlayerInfo = new global::com.unity.mgobe.PlayerInfo();
            }
            input.ReadMessage(PlayerInfo);
            break;
          }
          case 90: {
            Region = input.ReadString();
            break;
          }
          case 98: {
            Owner = input.ReadString();
            break;
          }
          case 106: {
            playerList_.AddEntriesFrom(input, _repeated_playerList_codec);
            break;
          }
          case 114: {
            teamList_.AddEntriesFrom(input, _repeated_teamList_codec);
            break;
          }
        }
      }
    }

  }

  /// <summary>
  ///
  ///创建房间返回信息
  /// </summary>
  public sealed partial class CreateRoomRsp : pb::IMessage<CreateRoomRsp> {
    private static readonly pb::MessageParser<CreateRoomRsp> _parser = new pb::MessageParser<CreateRoomRsp>(() => new CreateRoomRsp());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<CreateRoomRsp> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::com.unity.mgobe.ProtoReflection.Descriptor.MessageTypes[34]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public CreateRoomRsp() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public CreateRoomRsp(CreateRoomRsp other) : this() {
      roomInfo_ = other.roomInfo_ != null ? other.roomInfo_.Clone() : null;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public CreateRoomRsp Clone() {
      return new CreateRoomRsp(this);
    }

    /// <summary>Field number for the "room_info" field.</summary>
    public const int RoomInfoFieldNumber = 1;
    private global::com.unity.mgobe.RoomInfo roomInfo_;
    /// <summary>
    //// 返回创建好的房间信息，里面包含userList加入房间的用户信息列表
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::com.unity.mgobe.RoomInfo RoomInfo {
      get { return roomInfo_; }
      set {
        roomInfo_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as CreateRoomRsp);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(CreateRoomRsp other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (!object.Equals(RoomInfo, other.RoomInfo)) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (roomInfo_ != null) hash ^= RoomInfo.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (roomInfo_ != null) {
        output.WriteRawTag(10);
        output.WriteMessage(RoomInfo);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (roomInfo_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(RoomInfo);
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(CreateRoomRsp other) {
      if (other == null) {
        return;
      }
      if (other.roomInfo_ != null) {
        if (roomInfo_ == null) {
          RoomInfo = new global::com.unity.mgobe.RoomInfo();
        }
        RoomInfo.MergeFrom(other.RoomInfo);
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 10: {
            if (roomInfo_ == null) {
              RoomInfo = new global::com.unity.mgobe.RoomInfo();
            }
            input.ReadMessage(RoomInfo);
            break;
          }
        }
      }
    }

  }

  /// <summary>
  ///
  ///加入房间请求信息
  /// </summary>
  public sealed partial class JoinRoomReq : pb::IMessage<JoinRoomReq> {
    private static readonly pb::MessageParser<JoinRoomReq> _parser = new pb::MessageParser<JoinRoomReq>(() => new JoinRoomReq());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<JoinRoomReq> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::com.unity.mgobe.ProtoReflection.Descriptor.MessageTypes[35]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public JoinRoomReq() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public JoinRoomReq(JoinRoomReq other) : this() {
      roomId_ = other.roomId_;
      teamId_ = other.teamId_;
      joinType_ = other.joinType_;
      playerInfo_ = other.playerInfo_ != null ? other.playerInfo_.Clone() : null;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public JoinRoomReq Clone() {
      return new JoinRoomReq(this);
    }

    /// <summary>Field number for the "room_id" field.</summary>
    public const int RoomIdFieldNumber = 1;
    private string roomId_ = "";
    /// <summary>
    //// [rm-sdk-para] roomId  1类和2类都要传
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string RoomId {
      get { return roomId_; }
      set {
        roomId_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "team_id" field.</summary>
    public const int TeamIdFieldNumber = 2;
    private string teamId_ = "";
    /// <summary>
    //// [rm-sdk-para] 队伍id
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string TeamId {
      get { return teamId_; }
      set {
        teamId_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "join_type" field.</summary>
    public const int JoinTypeFieldNumber = 3;
    private global::com.unity.mgobe.JoinRoomType joinType_ = 0;
    /// <summary>
    //// [rm-sdk-para] 操作
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::com.unity.mgobe.JoinRoomType JoinType {
      get { return joinType_; }
      set {
        joinType_ = value;
      }
    }

    /// <summary>Field number for the "player_info" field.</summary>
    public const int PlayerInfoFieldNumber = 4;
    private global::com.unity.mgobe.PlayerInfo playerInfo_;
    /// <summary>
    //// 申请加入房间的用户信息
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::com.unity.mgobe.PlayerInfo PlayerInfo {
      get { return playerInfo_; }
      set {
        playerInfo_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as JoinRoomReq);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(JoinRoomReq other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (RoomId != other.RoomId) return false;
      if (TeamId != other.TeamId) return false;
      if (JoinType != other.JoinType) return false;
      if (!object.Equals(PlayerInfo, other.PlayerInfo)) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (RoomId.Length != 0) hash ^= RoomId.GetHashCode();
      if (TeamId.Length != 0) hash ^= TeamId.GetHashCode();
      if (JoinType != 0) hash ^= JoinType.GetHashCode();
      if (playerInfo_ != null) hash ^= PlayerInfo.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (RoomId.Length != 0) {
        output.WriteRawTag(10);
        output.WriteString(RoomId);
      }
      if (TeamId.Length != 0) {
        output.WriteRawTag(18);
        output.WriteString(TeamId);
      }
      if (JoinType != 0) {
        output.WriteRawTag(24);
        output.WriteEnum((int) JoinType);
      }
      if (playerInfo_ != null) {
        output.WriteRawTag(34);
        output.WriteMessage(PlayerInfo);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (RoomId.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(RoomId);
      }
      if (TeamId.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(TeamId);
      }
      if (JoinType != 0) {
        size += 1 + pb::CodedOutputStream.ComputeEnumSize((int) JoinType);
      }
      if (playerInfo_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(PlayerInfo);
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(JoinRoomReq other) {
      if (other == null) {
        return;
      }
      if (other.RoomId.Length != 0) {
        RoomId = other.RoomId;
      }
      if (other.TeamId.Length != 0) {
        TeamId = other.TeamId;
      }
      if (other.JoinType != 0) {
        JoinType = other.JoinType;
      }
      if (other.playerInfo_ != null) {
        if (playerInfo_ == null) {
          PlayerInfo = new global::com.unity.mgobe.PlayerInfo();
        }
        PlayerInfo.MergeFrom(other.PlayerInfo);
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 10: {
            RoomId = input.ReadString();
            break;
          }
          case 18: {
            TeamId = input.ReadString();
            break;
          }
          case 24: {
            JoinType = (global::com.unity.mgobe.JoinRoomType) input.ReadEnum();
            break;
          }
          case 34: {
            if (playerInfo_ == null) {
              PlayerInfo = new global::com.unity.mgobe.PlayerInfo();
            }
            input.ReadMessage(PlayerInfo);
            break;
          }
        }
      }
    }

  }

  /// <summary>
  ///
  ///加入房间返回信息
  /// </summary>
  public sealed partial class JoinRoomRsp : pb::IMessage<JoinRoomRsp> {
    private static readonly pb::MessageParser<JoinRoomRsp> _parser = new pb::MessageParser<JoinRoomRsp>(() => new JoinRoomRsp());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<JoinRoomRsp> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::com.unity.mgobe.ProtoReflection.Descriptor.MessageTypes[36]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public JoinRoomRsp() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public JoinRoomRsp(JoinRoomRsp other) : this() {
      roomInfo_ = other.roomInfo_ != null ? other.roomInfo_.Clone() : null;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public JoinRoomRsp Clone() {
      return new JoinRoomRsp(this);
    }

    /// <summary>Field number for the "room_info" field.</summary>
    public const int RoomInfoFieldNumber = 1;
    private global::com.unity.mgobe.RoomInfo roomInfo_;
    /// <summary>
    //// 返回加入后的房间信息，里面包含userList所有加入房间的用户信息列表
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::com.unity.mgobe.RoomInfo RoomInfo {
      get { return roomInfo_; }
      set {
        roomInfo_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as JoinRoomRsp);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(JoinRoomRsp other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (!object.Equals(RoomInfo, other.RoomInfo)) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (roomInfo_ != null) hash ^= RoomInfo.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (roomInfo_ != null) {
        output.WriteRawTag(10);
        output.WriteMessage(RoomInfo);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (roomInfo_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(RoomInfo);
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(JoinRoomRsp other) {
      if (other == null) {
        return;
      }
      if (other.roomInfo_ != null) {
        if (roomInfo_ == null) {
          RoomInfo = new global::com.unity.mgobe.RoomInfo();
        }
        RoomInfo.MergeFrom(other.RoomInfo);
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 10: {
            if (roomInfo_ == null) {
              RoomInfo = new global::com.unity.mgobe.RoomInfo();
            }
            input.ReadMessage(RoomInfo);
            break;
          }
        }
      }
    }

  }

  /// <summary>
  ///
  ///离开房间请求信息
  /// </summary>
  public sealed partial class LeaveRoomReq : pb::IMessage<LeaveRoomReq> {
    private static readonly pb::MessageParser<LeaveRoomReq> _parser = new pb::MessageParser<LeaveRoomReq>(() => new LeaveRoomReq());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<LeaveRoomReq> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::com.unity.mgobe.ProtoReflection.Descriptor.MessageTypes[37]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public LeaveRoomReq() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public LeaveRoomReq(LeaveRoomReq other) : this() {
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public LeaveRoomReq Clone() {
      return new LeaveRoomReq(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as LeaveRoomReq);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(LeaveRoomReq other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(LeaveRoomReq other) {
      if (other == null) {
        return;
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
        }
      }
    }

  }

  /// <summary>
  ///
  ///离开房间返回信息
  /// </summary>
  public sealed partial class LeaveRoomRsp : pb::IMessage<LeaveRoomRsp> {
    private static readonly pb::MessageParser<LeaveRoomRsp> _parser = new pb::MessageParser<LeaveRoomRsp>(() => new LeaveRoomRsp());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<LeaveRoomRsp> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::com.unity.mgobe.ProtoReflection.Descriptor.MessageTypes[38]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public LeaveRoomRsp() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public LeaveRoomRsp(LeaveRoomRsp other) : this() {
      roomInfo_ = other.roomInfo_ != null ? other.roomInfo_.Clone() : null;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public LeaveRoomRsp Clone() {
      return new LeaveRoomRsp(this);
    }

    /// <summary>Field number for the "room_info" field.</summary>
    public const int RoomInfoFieldNumber = 1;
    private global::com.unity.mgobe.RoomInfo roomInfo_;
    /// <summary>
    //// 房间信息
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::com.unity.mgobe.RoomInfo RoomInfo {
      get { return roomInfo_; }
      set {
        roomInfo_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as LeaveRoomRsp);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(LeaveRoomRsp other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (!object.Equals(RoomInfo, other.RoomInfo)) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (roomInfo_ != null) hash ^= RoomInfo.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (roomInfo_ != null) {
        output.WriteRawTag(10);
        output.WriteMessage(RoomInfo);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (roomInfo_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(RoomInfo);
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(LeaveRoomRsp other) {
      if (other == null) {
        return;
      }
      if (other.roomInfo_ != null) {
        if (roomInfo_ == null) {
          RoomInfo = new global::com.unity.mgobe.RoomInfo();
        }
        RoomInfo.MergeFrom(other.RoomInfo);
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 10: {
            if (roomInfo_ == null) {
              RoomInfo = new global::com.unity.mgobe.RoomInfo();
            }
            input.ReadMessage(RoomInfo);
            break;
          }
        }
      }
    }

  }

  /// <summary>
  ///
  ///解散房间，即销毁房间请求信息(仅房主可操作)
  /// </summary>
  public sealed partial class DismissRoomReq : pb::IMessage<DismissRoomReq> {
    private static readonly pb::MessageParser<DismissRoomReq> _parser = new pb::MessageParser<DismissRoomReq>(() => new DismissRoomReq());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<DismissRoomReq> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::com.unity.mgobe.ProtoReflection.Descriptor.MessageTypes[39]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public DismissRoomReq() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public DismissRoomReq(DismissRoomReq other) : this() {
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public DismissRoomReq Clone() {
      return new DismissRoomReq(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as DismissRoomReq);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(DismissRoomReq other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(DismissRoomReq other) {
      if (other == null) {
        return;
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
        }
      }
    }

  }

  /// <summary>
  ///
  ///解散房间返回信息
  /// </summary>
  public sealed partial class DismissRoomRsp : pb::IMessage<DismissRoomRsp> {
    private static readonly pb::MessageParser<DismissRoomRsp> _parser = new pb::MessageParser<DismissRoomRsp>(() => new DismissRoomRsp());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<DismissRoomRsp> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::com.unity.mgobe.ProtoReflection.Descriptor.MessageTypes[40]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public DismissRoomRsp() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public DismissRoomRsp(DismissRoomRsp other) : this() {
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public DismissRoomRsp Clone() {
      return new DismissRoomRsp(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as DismissRoomRsp);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(DismissRoomRsp other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(DismissRoomRsp other) {
      if (other == null) {
        return;
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
        }
      }
    }

  }

  /// <summary>
  ///
  ///房间变更操作请求信息，个别信息需限制房主操作
  /// </summary>
  public sealed partial class ChangeRoomReq : pb::IMessage<ChangeRoomReq> {
    private static readonly pb::MessageParser<ChangeRoomReq> _parser = new pb::MessageParser<ChangeRoomReq>(() => new ChangeRoomReq());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<ChangeRoomReq> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::com.unity.mgobe.ProtoReflection.Descriptor.MessageTypes[41]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ChangeRoomReq() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ChangeRoomReq(ChangeRoomReq other) : this() {
      roomName_ = other.roomName_;
      owner_ = other.owner_;
      isPrivate_ = other.isPrivate_;
      customProperties_ = other.customProperties_;
      isForbidJoin_ = other.isForbidJoin_;
      changeRoomOptionList_ = other.changeRoomOptionList_.Clone();
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ChangeRoomReq Clone() {
      return new ChangeRoomReq(this);
    }

    /// <summary>Field number for the "room_name" field.</summary>
    public const int RoomNameFieldNumber = 1;
    private string roomName_ = "";
    /// <summary>
    //// 房间名称
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string RoomName {
      get { return roomName_; }
      set {
        roomName_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "owner" field.</summary>
    public const int OwnerFieldNumber = 2;
    private string owner_ = "";
    /// <summary>
    //// 变更房主
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string Owner {
      get { return owner_; }
      set {
        owner_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "is_private" field.</summary>
    public const int IsPrivateFieldNumber = 5;
    private bool isPrivate_;
    /// <summary>
    //// 是否私有
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool IsPrivate {
      get { return isPrivate_; }
      set {
        isPrivate_ = value;
      }
    }

    /// <summary>Field number for the "custom_properties" field.</summary>
    public const int CustomPropertiesFieldNumber = 6;
    private string customProperties_ = "";
    /// <summary>
    //// 开发商自定义房间属性
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string CustomProperties {
      get { return customProperties_; }
      set {
        customProperties_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "is_forbid_join" field.</summary>
    public const int IsForbidJoinFieldNumber = 7;
    private bool isForbidJoin_;
    /// <summary>
    //// 房间是否禁止加人，默认false
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool IsForbidJoin {
      get { return isForbidJoin_; }
      set {
        isForbidJoin_ = value;
      }
    }

    /// <summary>Field number for the "change_room_option_list" field.</summary>
    public const int ChangeRoomOptionListFieldNumber = 8;
    private static readonly pb::FieldCodec<global::com.unity.mgobe.ChangeRoomOption> _repeated_changeRoomOptionList_codec
        = pb::FieldCodec.ForEnum(66, x => (int) x, x => (global::com.unity.mgobe.ChangeRoomOption) x);
    private readonly pbc::RepeatedField<global::com.unity.mgobe.ChangeRoomOption> changeRoomOptionList_ = new pbc::RepeatedField<global::com.unity.mgobe.ChangeRoomOption>();
    /// <summary>
    //// [rm-sdk-para] [rm-sdk-para] 修改字段列表
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::RepeatedField<global::com.unity.mgobe.ChangeRoomOption> ChangeRoomOptionList {
      get { return changeRoomOptionList_; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as ChangeRoomReq);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(ChangeRoomReq other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (RoomName != other.RoomName) return false;
      if (Owner != other.Owner) return false;
      if (IsPrivate != other.IsPrivate) return false;
      if (CustomProperties != other.CustomProperties) return false;
      if (IsForbidJoin != other.IsForbidJoin) return false;
      if(!changeRoomOptionList_.Equals(other.changeRoomOptionList_)) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (RoomName.Length != 0) hash ^= RoomName.GetHashCode();
      if (Owner.Length != 0) hash ^= Owner.GetHashCode();
      if (IsPrivate != false) hash ^= IsPrivate.GetHashCode();
      if (CustomProperties.Length != 0) hash ^= CustomProperties.GetHashCode();
      if (IsForbidJoin != false) hash ^= IsForbidJoin.GetHashCode();
      hash ^= changeRoomOptionList_.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (RoomName.Length != 0) {
        output.WriteRawTag(10);
        output.WriteString(RoomName);
      }
      if (Owner.Length != 0) {
        output.WriteRawTag(18);
        output.WriteString(Owner);
      }
      if (IsPrivate != false) {
        output.WriteRawTag(40);
        output.WriteBool(IsPrivate);
      }
      if (CustomProperties.Length != 0) {
        output.WriteRawTag(50);
        output.WriteString(CustomProperties);
      }
      if (IsForbidJoin != false) {
        output.WriteRawTag(56);
        output.WriteBool(IsForbidJoin);
      }
      changeRoomOptionList_.WriteTo(output, _repeated_changeRoomOptionList_codec);
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (RoomName.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(RoomName);
      }
      if (Owner.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(Owner);
      }
      if (IsPrivate != false) {
        size += 1 + 1;
      }
      if (CustomProperties.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(CustomProperties);
      }
      if (IsForbidJoin != false) {
        size += 1 + 1;
      }
      size += changeRoomOptionList_.CalculateSize(_repeated_changeRoomOptionList_codec);
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(ChangeRoomReq other) {
      if (other == null) {
        return;
      }
      if (other.RoomName.Length != 0) {
        RoomName = other.RoomName;
      }
      if (other.Owner.Length != 0) {
        Owner = other.Owner;
      }
      if (other.IsPrivate != false) {
        IsPrivate = other.IsPrivate;
      }
      if (other.CustomProperties.Length != 0) {
        CustomProperties = other.CustomProperties;
      }
      if (other.IsForbidJoin != false) {
        IsForbidJoin = other.IsForbidJoin;
      }
      changeRoomOptionList_.Add(other.changeRoomOptionList_);
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 10: {
            RoomName = input.ReadString();
            break;
          }
          case 18: {
            Owner = input.ReadString();
            break;
          }
          case 40: {
            IsPrivate = input.ReadBool();
            break;
          }
          case 50: {
            CustomProperties = input.ReadString();
            break;
          }
          case 56: {
            IsForbidJoin = input.ReadBool();
            break;
          }
          case 66:
          case 64: {
            changeRoomOptionList_.AddEntriesFrom(input, _repeated_changeRoomOptionList_codec);
            break;
          }
        }
      }
    }

  }

  /// <summary>
  ///
  ///房间变更操作返回信息
  /// </summary>
  public sealed partial class ChangeRoomRsp : pb::IMessage<ChangeRoomRsp> {
    private static readonly pb::MessageParser<ChangeRoomRsp> _parser = new pb::MessageParser<ChangeRoomRsp>(() => new ChangeRoomRsp());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<ChangeRoomRsp> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::com.unity.mgobe.ProtoReflection.Descriptor.MessageTypes[42]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ChangeRoomRsp() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ChangeRoomRsp(ChangeRoomRsp other) : this() {
      roomInfo_ = other.roomInfo_ != null ? other.roomInfo_.Clone() : null;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ChangeRoomRsp Clone() {
      return new ChangeRoomRsp(this);
    }

    /// <summary>Field number for the "room_info" field.</summary>
    public const int RoomInfoFieldNumber = 4;
    private global::com.unity.mgobe.RoomInfo roomInfo_;
    /// <summary>
    //// 变更后的房间信息
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::com.unity.mgobe.RoomInfo RoomInfo {
      get { return roomInfo_; }
      set {
        roomInfo_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as ChangeRoomRsp);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(ChangeRoomRsp other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (!object.Equals(RoomInfo, other.RoomInfo)) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (roomInfo_ != null) hash ^= RoomInfo.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (roomInfo_ != null) {
        output.WriteRawTag(34);
        output.WriteMessage(RoomInfo);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (roomInfo_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(RoomInfo);
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(ChangeRoomRsp other) {
      if (other == null) {
        return;
      }
      if (other.roomInfo_ != null) {
        if (roomInfo_ == null) {
          RoomInfo = new global::com.unity.mgobe.RoomInfo();
        }
        RoomInfo.MergeFrom(other.RoomInfo);
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 34: {
            if (roomInfo_ == null) {
              RoomInfo = new global::com.unity.mgobe.RoomInfo();
            }
            input.ReadMessage(RoomInfo);
            break;
          }
        }
      }
    }

  }

  /// <summary>
  ///
  ///服务端房间变更操作请求信息
  /// </summary>
  public sealed partial class SvrChangeRoomReq : pb::IMessage<SvrChangeRoomReq> {
    private static readonly pb::MessageParser<SvrChangeRoomReq> _parser = new pb::MessageParser<SvrChangeRoomReq>(() => new SvrChangeRoomReq());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<SvrChangeRoomReq> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::com.unity.mgobe.ProtoReflection.Descriptor.MessageTypes[43]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public SvrChangeRoomReq() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public SvrChangeRoomReq(SvrChangeRoomReq other) : this() {
      roomName_ = other.roomName_;
      owner_ = other.owner_;
      isPrivate_ = other.isPrivate_;
      customProperties_ = other.customProperties_;
      isForbidJoin_ = other.isForbidJoin_;
      roomId_ = other.roomId_;
      changeRoomOptionList_ = other.changeRoomOptionList_.Clone();
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public SvrChangeRoomReq Clone() {
      return new SvrChangeRoomReq(this);
    }

    /// <summary>Field number for the "room_name" field.</summary>
    public const int RoomNameFieldNumber = 1;
    private string roomName_ = "";
    /// <summary>
    //// 房间名称
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string RoomName {
      get { return roomName_; }
      set {
        roomName_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "owner" field.</summary>
    public const int OwnerFieldNumber = 2;
    private string owner_ = "";
    /// <summary>
    //// 变更房主
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string Owner {
      get { return owner_; }
      set {
        owner_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "is_private" field.</summary>
    public const int IsPrivateFieldNumber = 5;
    private bool isPrivate_;
    /// <summary>
    //// 是否私有
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool IsPrivate {
      get { return isPrivate_; }
      set {
        isPrivate_ = value;
      }
    }

    /// <summary>Field number for the "custom_properties" field.</summary>
    public const int CustomPropertiesFieldNumber = 6;
    private string customProperties_ = "";
    /// <summary>
    //// 开发商自定义房间属性
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string CustomProperties {
      get { return customProperties_; }
      set {
        customProperties_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "is_forbid_join" field.</summary>
    public const int IsForbidJoinFieldNumber = 7;
    private bool isForbidJoin_;
    /// <summary>
    //// 房间是否禁止加人，默认false
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool IsForbidJoin {
      get { return isForbidJoin_; }
      set {
        isForbidJoin_ = value;
      }
    }

    /// <summary>Field number for the "room_id" field.</summary>
    public const int RoomIdFieldNumber = 8;
    private string roomId_ = "";
    /// <summary>
    //// 待变更的房间ID
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string RoomId {
      get { return roomId_; }
      set {
        roomId_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "change_room_option_list" field.</summary>
    public const int ChangeRoomOptionListFieldNumber = 9;
    private static readonly pb::FieldCodec<global::com.unity.mgobe.ChangeRoomOption> _repeated_changeRoomOptionList_codec
        = pb::FieldCodec.ForEnum(74, x => (int) x, x => (global::com.unity.mgobe.ChangeRoomOption) x);
    private readonly pbc::RepeatedField<global::com.unity.mgobe.ChangeRoomOption> changeRoomOptionList_ = new pbc::RepeatedField<global::com.unity.mgobe.ChangeRoomOption>();
    /// <summary>
    //// 修改字段列表
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::RepeatedField<global::com.unity.mgobe.ChangeRoomOption> ChangeRoomOptionList {
      get { return changeRoomOptionList_; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as SvrChangeRoomReq);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(SvrChangeRoomReq other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (RoomName != other.RoomName) return false;
      if (Owner != other.Owner) return false;
      if (IsPrivate != other.IsPrivate) return false;
      if (CustomProperties != other.CustomProperties) return false;
      if (IsForbidJoin != other.IsForbidJoin) return false;
      if (RoomId != other.RoomId) return false;
      if(!changeRoomOptionList_.Equals(other.changeRoomOptionList_)) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (RoomName.Length != 0) hash ^= RoomName.GetHashCode();
      if (Owner.Length != 0) hash ^= Owner.GetHashCode();
      if (IsPrivate != false) hash ^= IsPrivate.GetHashCode();
      if (CustomProperties.Length != 0) hash ^= CustomProperties.GetHashCode();
      if (IsForbidJoin != false) hash ^= IsForbidJoin.GetHashCode();
      if (RoomId.Length != 0) hash ^= RoomId.GetHashCode();
      hash ^= changeRoomOptionList_.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (RoomName.Length != 0) {
        output.WriteRawTag(10);
        output.WriteString(RoomName);
      }
      if (Owner.Length != 0) {
        output.WriteRawTag(18);
        output.WriteString(Owner);
      }
      if (IsPrivate != false) {
        output.WriteRawTag(40);
        output.WriteBool(IsPrivate);
      }
      if (CustomProperties.Length != 0) {
        output.WriteRawTag(50);
        output.WriteString(CustomProperties);
      }
      if (IsForbidJoin != false) {
        output.WriteRawTag(56);
        output.WriteBool(IsForbidJoin);
      }
      if (RoomId.Length != 0) {
        output.WriteRawTag(66);
        output.WriteString(RoomId);
      }
      changeRoomOptionList_.WriteTo(output, _repeated_changeRoomOptionList_codec);
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (RoomName.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(RoomName);
      }
      if (Owner.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(Owner);
      }
      if (IsPrivate != false) {
        size += 1 + 1;
      }
      if (CustomProperties.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(CustomProperties);
      }
      if (IsForbidJoin != false) {
        size += 1 + 1;
      }
      if (RoomId.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(RoomId);
      }
      size += changeRoomOptionList_.CalculateSize(_repeated_changeRoomOptionList_codec);
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(SvrChangeRoomReq other) {
      if (other == null) {
        return;
      }
      if (other.RoomName.Length != 0) {
        RoomName = other.RoomName;
      }
      if (other.Owner.Length != 0) {
        Owner = other.Owner;
      }
      if (other.IsPrivate != false) {
        IsPrivate = other.IsPrivate;
      }
      if (other.CustomProperties.Length != 0) {
        CustomProperties = other.CustomProperties;
      }
      if (other.IsForbidJoin != false) {
        IsForbidJoin = other.IsForbidJoin;
      }
      if (other.RoomId.Length != 0) {
        RoomId = other.RoomId;
      }
      changeRoomOptionList_.Add(other.changeRoomOptionList_);
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 10: {
            RoomName = input.ReadString();
            break;
          }
          case 18: {
            Owner = input.ReadString();
            break;
          }
          case 40: {
            IsPrivate = input.ReadBool();
            break;
          }
          case 50: {
            CustomProperties = input.ReadString();
            break;
          }
          case 56: {
            IsForbidJoin = input.ReadBool();
            break;
          }
          case 66: {
            RoomId = input.ReadString();
            break;
          }
          case 74:
          case 72: {
            changeRoomOptionList_.AddEntriesFrom(input, _repeated_changeRoomOptionList_codec);
            break;
          }
        }
      }
    }

  }

  /// <summary>
  ///
  ///服务端房间变更操作返回信息
  /// </summary>
  public sealed partial class SvrChangeRoomRsp : pb::IMessage<SvrChangeRoomRsp> {
    private static readonly pb::MessageParser<SvrChangeRoomRsp> _parser = new pb::MessageParser<SvrChangeRoomRsp>(() => new SvrChangeRoomRsp());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<SvrChangeRoomRsp> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::com.unity.mgobe.ProtoReflection.Descriptor.MessageTypes[44]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public SvrChangeRoomRsp() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public SvrChangeRoomRsp(SvrChangeRoomRsp other) : this() {
      roomInfo_ = other.roomInfo_ != null ? other.roomInfo_.Clone() : null;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public SvrChangeRoomRsp Clone() {
      return new SvrChangeRoomRsp(this);
    }

    /// <summary>Field number for the "room_info" field.</summary>
    public const int RoomInfoFieldNumber = 4;
    private global::com.unity.mgobe.RoomInfo roomInfo_;
    /// <summary>
    //// 变更后的房间信息
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::com.unity.mgobe.RoomInfo RoomInfo {
      get { return roomInfo_; }
      set {
        roomInfo_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as SvrChangeRoomRsp);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(SvrChangeRoomRsp other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (!object.Equals(RoomInfo, other.RoomInfo)) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (roomInfo_ != null) hash ^= RoomInfo.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (roomInfo_ != null) {
        output.WriteRawTag(34);
        output.WriteMessage(RoomInfo);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (roomInfo_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(RoomInfo);
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(SvrChangeRoomRsp other) {
      if (other == null) {
        return;
      }
      if (other.roomInfo_ != null) {
        if (roomInfo_ == null) {
          RoomInfo = new global::com.unity.mgobe.RoomInfo();
        }
        RoomInfo.MergeFrom(other.RoomInfo);
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 34: {
            if (roomInfo_ == null) {
              RoomInfo = new global::com.unity.mgobe.RoomInfo();
            }
            input.ReadMessage(RoomInfo);
            break;
          }
        }
      }
    }

  }

  /// <summary>
  ///
  ///踢人操作请求信息
  /// </summary>
  public sealed partial class RemovePlayerReq : pb::IMessage<RemovePlayerReq> {
    private static readonly pb::MessageParser<RemovePlayerReq> _parser = new pb::MessageParser<RemovePlayerReq>(() => new RemovePlayerReq());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<RemovePlayerReq> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::com.unity.mgobe.ProtoReflection.Descriptor.MessageTypes[45]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public RemovePlayerReq() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public RemovePlayerReq(RemovePlayerReq other) : this() {
      removePlayerId_ = other.removePlayerId_;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public RemovePlayerReq Clone() {
      return new RemovePlayerReq(this);
    }

    /// <summary>Field number for the "remove_player_id" field.</summary>
    public const int RemovePlayerIdFieldNumber = 3;
    private string removePlayerId_ = "";
    /// <summary>
    //// 要删除的userID
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string RemovePlayerId {
      get { return removePlayerId_; }
      set {
        removePlayerId_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as RemovePlayerReq);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(RemovePlayerReq other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (RemovePlayerId != other.RemovePlayerId) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (RemovePlayerId.Length != 0) hash ^= RemovePlayerId.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (RemovePlayerId.Length != 0) {
        output.WriteRawTag(26);
        output.WriteString(RemovePlayerId);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (RemovePlayerId.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(RemovePlayerId);
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(RemovePlayerReq other) {
      if (other == null) {
        return;
      }
      if (other.RemovePlayerId.Length != 0) {
        RemovePlayerId = other.RemovePlayerId;
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 26: {
            RemovePlayerId = input.ReadString();
            break;
          }
        }
      }
    }

  }

  /// <summary>
  ///
  ///踢人操作返回信息
  /// </summary>
  public sealed partial class RemovePlayerRsp : pb::IMessage<RemovePlayerRsp> {
    private static readonly pb::MessageParser<RemovePlayerRsp> _parser = new pb::MessageParser<RemovePlayerRsp>(() => new RemovePlayerRsp());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<RemovePlayerRsp> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::com.unity.mgobe.ProtoReflection.Descriptor.MessageTypes[46]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public RemovePlayerRsp() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public RemovePlayerRsp(RemovePlayerRsp other) : this() {
      roomInfo_ = other.roomInfo_ != null ? other.roomInfo_.Clone() : null;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public RemovePlayerRsp Clone() {
      return new RemovePlayerRsp(this);
    }

    /// <summary>Field number for the "room_info" field.</summary>
    public const int RoomInfoFieldNumber = 1;
    private global::com.unity.mgobe.RoomInfo roomInfo_;
    /// <summary>
    //// 房间信息
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::com.unity.mgobe.RoomInfo RoomInfo {
      get { return roomInfo_; }
      set {
        roomInfo_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as RemovePlayerRsp);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(RemovePlayerRsp other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (!object.Equals(RoomInfo, other.RoomInfo)) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (roomInfo_ != null) hash ^= RoomInfo.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (roomInfo_ != null) {
        output.WriteRawTag(10);
        output.WriteMessage(RoomInfo);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (roomInfo_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(RoomInfo);
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(RemovePlayerRsp other) {
      if (other == null) {
        return;
      }
      if (other.roomInfo_ != null) {
        if (roomInfo_ == null) {
          RoomInfo = new global::com.unity.mgobe.RoomInfo();
        }
        RoomInfo.MergeFrom(other.RoomInfo);
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 10: {
            if (roomInfo_ == null) {
              RoomInfo = new global::com.unity.mgobe.RoomInfo();
            }
            input.ReadMessage(RoomInfo);
            break;
          }
        }
      }
    }

  }

  /// <summary>
  ///
  ///服务器踢人操作请求信息
  /// </summary>
  public sealed partial class SvrRemovePlayerReq : pb::IMessage<SvrRemovePlayerReq> {
    private static readonly pb::MessageParser<SvrRemovePlayerReq> _parser = new pb::MessageParser<SvrRemovePlayerReq>(() => new SvrRemovePlayerReq());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<SvrRemovePlayerReq> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::com.unity.mgobe.ProtoReflection.Descriptor.MessageTypes[47]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public SvrRemovePlayerReq() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public SvrRemovePlayerReq(SvrRemovePlayerReq other) : this() {
      roomId_ = other.roomId_;
      removePlayerId_ = other.removePlayerId_;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public SvrRemovePlayerReq Clone() {
      return new SvrRemovePlayerReq(this);
    }

    /// <summary>Field number for the "room_id" field.</summary>
    public const int RoomIdFieldNumber = 1;
    private string roomId_ = "";
    /// <summary>
    //// roomID
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string RoomId {
      get { return roomId_; }
      set {
        roomId_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "remove_player_id" field.</summary>
    public const int RemovePlayerIdFieldNumber = 3;
    private string removePlayerId_ = "";
    /// <summary>
    //// 要删除的userID
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string RemovePlayerId {
      get { return removePlayerId_; }
      set {
        removePlayerId_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as SvrRemovePlayerReq);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(SvrRemovePlayerReq other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (RoomId != other.RoomId) return false;
      if (RemovePlayerId != other.RemovePlayerId) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (RoomId.Length != 0) hash ^= RoomId.GetHashCode();
      if (RemovePlayerId.Length != 0) hash ^= RemovePlayerId.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (RoomId.Length != 0) {
        output.WriteRawTag(10);
        output.WriteString(RoomId);
      }
      if (RemovePlayerId.Length != 0) {
        output.WriteRawTag(26);
        output.WriteString(RemovePlayerId);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (RoomId.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(RoomId);
      }
      if (RemovePlayerId.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(RemovePlayerId);
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(SvrRemovePlayerReq other) {
      if (other == null) {
        return;
      }
      if (other.RoomId.Length != 0) {
        RoomId = other.RoomId;
      }
      if (other.RemovePlayerId.Length != 0) {
        RemovePlayerId = other.RemovePlayerId;
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 10: {
            RoomId = input.ReadString();
            break;
          }
          case 26: {
            RemovePlayerId = input.ReadString();
            break;
          }
        }
      }
    }

  }

  /// <summary>
  ///
  ///服务器踢人操作返回信息
  /// </summary>
  public sealed partial class SvrRemovePlayerRsp : pb::IMessage<SvrRemovePlayerRsp> {
    private static readonly pb::MessageParser<SvrRemovePlayerRsp> _parser = new pb::MessageParser<SvrRemovePlayerRsp>(() => new SvrRemovePlayerRsp());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<SvrRemovePlayerRsp> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::com.unity.mgobe.ProtoReflection.Descriptor.MessageTypes[48]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public SvrRemovePlayerRsp() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public SvrRemovePlayerRsp(SvrRemovePlayerRsp other) : this() {
      roomInfo_ = other.roomInfo_ != null ? other.roomInfo_.Clone() : null;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public SvrRemovePlayerRsp Clone() {
      return new SvrRemovePlayerRsp(this);
    }

    /// <summary>Field number for the "room_info" field.</summary>
    public const int RoomInfoFieldNumber = 1;
    private global::com.unity.mgobe.RoomInfo roomInfo_;
    /// <summary>
    //// 房间信息
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::com.unity.mgobe.RoomInfo RoomInfo {
      get { return roomInfo_; }
      set {
        roomInfo_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as SvrRemovePlayerRsp);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(SvrRemovePlayerRsp other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (!object.Equals(RoomInfo, other.RoomInfo)) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (roomInfo_ != null) hash ^= RoomInfo.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (roomInfo_ != null) {
        output.WriteRawTag(10);
        output.WriteMessage(RoomInfo);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (roomInfo_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(RoomInfo);
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(SvrRemovePlayerRsp other) {
      if (other == null) {
        return;
      }
      if (other.roomInfo_ != null) {
        if (roomInfo_ == null) {
          RoomInfo = new global::com.unity.mgobe.RoomInfo();
        }
        RoomInfo.MergeFrom(other.RoomInfo);
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 10: {
            if (roomInfo_ == null) {
              RoomInfo = new global::com.unity.mgobe.RoomInfo();
            }
            input.ReadMessage(RoomInfo);
            break;
          }
        }
      }
    }

  }

  /// <summary>
  ///
  ///查询房间信息请求
  /// </summary>
  public sealed partial class GetRoomByRoomIdReq : pb::IMessage<GetRoomByRoomIdReq> {
    private static readonly pb::MessageParser<GetRoomByRoomIdReq> _parser = new pb::MessageParser<GetRoomByRoomIdReq>(() => new GetRoomByRoomIdReq());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<GetRoomByRoomIdReq> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::com.unity.mgobe.ProtoReflection.Descriptor.MessageTypes[49]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public GetRoomByRoomIdReq() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public GetRoomByRoomIdReq(GetRoomByRoomIdReq other) : this() {
      roomId_ = other.roomId_;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public GetRoomByRoomIdReq Clone() {
      return new GetRoomByRoomIdReq(this);
    }

    /// <summary>Field number for the "room_id" field.</summary>
    public const int RoomIdFieldNumber = 1;
    private string roomId_ = "";
    /// <summary>
    //// 房间ID、填0则查询用户所在的房间
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string RoomId {
      get { return roomId_; }
      set {
        roomId_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as GetRoomByRoomIdReq);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(GetRoomByRoomIdReq other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (RoomId != other.RoomId) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (RoomId.Length != 0) hash ^= RoomId.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (RoomId.Length != 0) {
        output.WriteRawTag(10);
        output.WriteString(RoomId);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (RoomId.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(RoomId);
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(GetRoomByRoomIdReq other) {
      if (other == null) {
        return;
      }
      if (other.RoomId.Length != 0) {
        RoomId = other.RoomId;
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 10: {
            RoomId = input.ReadString();
            break;
          }
        }
      }
    }

  }

  /// <summary>
  ///
  ///查询房间信息返回
  /// </summary>
  public sealed partial class GetRoomByRoomIdRsp : pb::IMessage<GetRoomByRoomIdRsp> {
    private static readonly pb::MessageParser<GetRoomByRoomIdRsp> _parser = new pb::MessageParser<GetRoomByRoomIdRsp>(() => new GetRoomByRoomIdRsp());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<GetRoomByRoomIdRsp> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::com.unity.mgobe.ProtoReflection.Descriptor.MessageTypes[50]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public GetRoomByRoomIdRsp() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public GetRoomByRoomIdRsp(GetRoomByRoomIdRsp other) : this() {
      roomInfo_ = other.roomInfo_ != null ? other.roomInfo_.Clone() : null;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public GetRoomByRoomIdRsp Clone() {
      return new GetRoomByRoomIdRsp(this);
    }

    /// <summary>Field number for the "room_info" field.</summary>
    public const int RoomInfoFieldNumber = 1;
    private global::com.unity.mgobe.RoomInfo roomInfo_;
    /// <summary>
    //// 房间信息
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::com.unity.mgobe.RoomInfo RoomInfo {
      get { return roomInfo_; }
      set {
        roomInfo_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as GetRoomByRoomIdRsp);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(GetRoomByRoomIdRsp other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (!object.Equals(RoomInfo, other.RoomInfo)) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (roomInfo_ != null) hash ^= RoomInfo.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (roomInfo_ != null) {
        output.WriteRawTag(10);
        output.WriteMessage(RoomInfo);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (roomInfo_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(RoomInfo);
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(GetRoomByRoomIdRsp other) {
      if (other == null) {
        return;
      }
      if (other.roomInfo_ != null) {
        if (roomInfo_ == null) {
          RoomInfo = new global::com.unity.mgobe.RoomInfo();
        }
        RoomInfo.MergeFrom(other.RoomInfo);
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 10: {
            if (roomInfo_ == null) {
              RoomInfo = new global::com.unity.mgobe.RoomInfo();
            }
            input.ReadMessage(RoomInfo);
            break;
          }
        }
      }
    }

  }

  /// <summary>
  ///
  ///房间内消息发送
  /// </summary>
  public sealed partial class SendToClientReq : pb::IMessage<SendToClientReq> {
    private static readonly pb::MessageParser<SendToClientReq> _parser = new pb::MessageParser<SendToClientReq>(() => new SendToClientReq());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<SendToClientReq> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::com.unity.mgobe.ProtoReflection.Descriptor.MessageTypes[51]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public SendToClientReq() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public SendToClientReq(SendToClientReq other) : this() {
      roomId_ = other.roomId_;
      recvPlayerList_ = other.recvPlayerList_.Clone();
      msg_ = other.msg_;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public SendToClientReq Clone() {
      return new SendToClientReq(this);
    }

    /// <summary>Field number for the "room_id" field.</summary>
    public const int RoomIdFieldNumber = 1;
    private string roomId_ = "";
    /// <summary>
    //// [rm-sdk-para] 房间ID
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string RoomId {
      get { return roomId_; }
      set {
        roomId_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "recv_player_list" field.</summary>
    public const int RecvPlayerListFieldNumber = 2;
    private static readonly pb::FieldCodec<string> _repeated_recvPlayerList_codec
        = pb::FieldCodec.ForString(18);
    private readonly pbc::RepeatedField<string> recvPlayerList_ = new pbc::RepeatedField<string>();
    /// <summary>
    //// 接收信息的用户列表
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::RepeatedField<string> RecvPlayerList {
      get { return recvPlayerList_; }
    }

    /// <summary>Field number for the "msg" field.</summary>
    public const int MsgFieldNumber = 3;
    private string msg_ = "";
    /// <summary>
    //// 消息详细内容
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string Msg {
      get { return msg_; }
      set {
        msg_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as SendToClientReq);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(SendToClientReq other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (RoomId != other.RoomId) return false;
      if(!recvPlayerList_.Equals(other.recvPlayerList_)) return false;
      if (Msg != other.Msg) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (RoomId.Length != 0) hash ^= RoomId.GetHashCode();
      hash ^= recvPlayerList_.GetHashCode();
      if (Msg.Length != 0) hash ^= Msg.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (RoomId.Length != 0) {
        output.WriteRawTag(10);
        output.WriteString(RoomId);
      }
      recvPlayerList_.WriteTo(output, _repeated_recvPlayerList_codec);
      if (Msg.Length != 0) {
        output.WriteRawTag(26);
        output.WriteString(Msg);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (RoomId.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(RoomId);
      }
      size += recvPlayerList_.CalculateSize(_repeated_recvPlayerList_codec);
      if (Msg.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(Msg);
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(SendToClientReq other) {
      if (other == null) {
        return;
      }
      if (other.RoomId.Length != 0) {
        RoomId = other.RoomId;
      }
      recvPlayerList_.Add(other.recvPlayerList_);
      if (other.Msg.Length != 0) {
        Msg = other.Msg;
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 10: {
            RoomId = input.ReadString();
            break;
          }
          case 18: {
            recvPlayerList_.AddEntriesFrom(input, _repeated_recvPlayerList_codec);
            break;
          }
          case 26: {
            Msg = input.ReadString();
            break;
          }
        }
      }
    }

  }

  /// <summary>
  ///
  ///房间内消息返回
  /// </summary>
  public sealed partial class SendToClientRsp : pb::IMessage<SendToClientRsp> {
    private static readonly pb::MessageParser<SendToClientRsp> _parser = new pb::MessageParser<SendToClientRsp>(() => new SendToClientRsp());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<SendToClientRsp> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::com.unity.mgobe.ProtoReflection.Descriptor.MessageTypes[52]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public SendToClientRsp() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public SendToClientRsp(SendToClientRsp other) : this() {
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public SendToClientRsp Clone() {
      return new SendToClientRsp(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as SendToClientRsp);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(SendToClientRsp other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(SendToClientRsp other) {
      if (other == null) {
        return;
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
        }
      }
    }

  }

  /// <summary>
  ///
  ///更改用户状态请求
  /// </summary>
  public sealed partial class ChangeCustomPlayerStatusReq : pb::IMessage<ChangeCustomPlayerStatusReq> {
    private static readonly pb::MessageParser<ChangeCustomPlayerStatusReq> _parser = new pb::MessageParser<ChangeCustomPlayerStatusReq>(() => new ChangeCustomPlayerStatusReq());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<ChangeCustomPlayerStatusReq> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::com.unity.mgobe.ProtoReflection.Descriptor.MessageTypes[53]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ChangeCustomPlayerStatusReq() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ChangeCustomPlayerStatusReq(ChangeCustomPlayerStatusReq other) : this() {
      customPlayerStatus_ = other.customPlayerStatus_;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ChangeCustomPlayerStatusReq Clone() {
      return new ChangeCustomPlayerStatusReq(this);
    }

    /// <summary>Field number for the "custom_player_status" field.</summary>
    public const int CustomPlayerStatusFieldNumber = 1;
    private ulong customPlayerStatus_;
    /// <summary>
    //// 用户自定义状态状态
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ulong CustomPlayerStatus {
      get { return customPlayerStatus_; }
      set {
        customPlayerStatus_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as ChangeCustomPlayerStatusReq);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(ChangeCustomPlayerStatusReq other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (CustomPlayerStatus != other.CustomPlayerStatus) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (CustomPlayerStatus != 0UL) hash ^= CustomPlayerStatus.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (CustomPlayerStatus != 0UL) {
        output.WriteRawTag(8);
        output.WriteUInt64(CustomPlayerStatus);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (CustomPlayerStatus != 0UL) {
        size += 1 + pb::CodedOutputStream.ComputeUInt64Size(CustomPlayerStatus);
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(ChangeCustomPlayerStatusReq other) {
      if (other == null) {
        return;
      }
      if (other.CustomPlayerStatus != 0UL) {
        CustomPlayerStatus = other.CustomPlayerStatus;
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 8: {
            CustomPlayerStatus = input.ReadUInt64();
            break;
          }
        }
      }
    }

  }

  /// <summary>
  ///
  ///更改用户状态返回
  /// </summary>
  public sealed partial class ChangeCustomPlayerStatusRsp : pb::IMessage<ChangeCustomPlayerStatusRsp> {
    private static readonly pb::MessageParser<ChangeCustomPlayerStatusRsp> _parser = new pb::MessageParser<ChangeCustomPlayerStatusRsp>(() => new ChangeCustomPlayerStatusRsp());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<ChangeCustomPlayerStatusRsp> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::com.unity.mgobe.ProtoReflection.Descriptor.MessageTypes[54]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ChangeCustomPlayerStatusRsp() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ChangeCustomPlayerStatusRsp(ChangeCustomPlayerStatusRsp other) : this() {
      roomInfo_ = other.roomInfo_ != null ? other.roomInfo_.Clone() : null;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ChangeCustomPlayerStatusRsp Clone() {
      return new ChangeCustomPlayerStatusRsp(this);
    }

    /// <summary>Field number for the "room_info" field.</summary>
    public const int RoomInfoFieldNumber = 1;
    private global::com.unity.mgobe.RoomInfo roomInfo_;
    /// <summary>
    //// 房间信息
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::com.unity.mgobe.RoomInfo RoomInfo {
      get { return roomInfo_; }
      set {
        roomInfo_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as ChangeCustomPlayerStatusRsp);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(ChangeCustomPlayerStatusRsp other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (!object.Equals(RoomInfo, other.RoomInfo)) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (roomInfo_ != null) hash ^= RoomInfo.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (roomInfo_ != null) {
        output.WriteRawTag(10);
        output.WriteMessage(RoomInfo);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (roomInfo_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(RoomInfo);
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(ChangeCustomPlayerStatusRsp other) {
      if (other == null) {
        return;
      }
      if (other.roomInfo_ != null) {
        if (roomInfo_ == null) {
          RoomInfo = new global::com.unity.mgobe.RoomInfo();
        }
        RoomInfo.MergeFrom(other.RoomInfo);
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 10: {
            if (roomInfo_ == null) {
              RoomInfo = new global::com.unity.mgobe.RoomInfo();
            }
            input.ReadMessage(RoomInfo);
            break;
          }
        }
      }
    }

  }

  /// <summary>
  ///
  ///服务端更改用户状态请求
  /// </summary>
  public sealed partial class SvrChangeCustomPlayerStatusReq : pb::IMessage<SvrChangeCustomPlayerStatusReq> {
    private static readonly pb::MessageParser<SvrChangeCustomPlayerStatusReq> _parser = new pb::MessageParser<SvrChangeCustomPlayerStatusReq>(() => new SvrChangeCustomPlayerStatusReq());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<SvrChangeCustomPlayerStatusReq> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::com.unity.mgobe.ProtoReflection.Descriptor.MessageTypes[55]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public SvrChangeCustomPlayerStatusReq() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public SvrChangeCustomPlayerStatusReq(SvrChangeCustomPlayerStatusReq other) : this() {
      customPlayerStatus_ = other.customPlayerStatus_;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public SvrChangeCustomPlayerStatusReq Clone() {
      return new SvrChangeCustomPlayerStatusReq(this);
    }

    /// <summary>Field number for the "custom_player_status" field.</summary>
    public const int CustomPlayerStatusFieldNumber = 1;
    private ulong customPlayerStatus_;
    /// <summary>
    //// 用户自定义状态状态
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ulong CustomPlayerStatus {
      get { return customPlayerStatus_; }
      set {
        customPlayerStatus_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as SvrChangeCustomPlayerStatusReq);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(SvrChangeCustomPlayerStatusReq other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (CustomPlayerStatus != other.CustomPlayerStatus) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (CustomPlayerStatus != 0UL) hash ^= CustomPlayerStatus.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (CustomPlayerStatus != 0UL) {
        output.WriteRawTag(8);
        output.WriteUInt64(CustomPlayerStatus);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (CustomPlayerStatus != 0UL) {
        size += 1 + pb::CodedOutputStream.ComputeUInt64Size(CustomPlayerStatus);
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(SvrChangeCustomPlayerStatusReq other) {
      if (other == null) {
        return;
      }
      if (other.CustomPlayerStatus != 0UL) {
        CustomPlayerStatus = other.CustomPlayerStatus;
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 8: {
            CustomPlayerStatus = input.ReadUInt64();
            break;
          }
        }
      }
    }

  }

  /// <summary>
  ///
  ///服务端更改用户状态返回
  /// </summary>
  public sealed partial class SvrChangeCustomPlayerStatusRsp : pb::IMessage<SvrChangeCustomPlayerStatusRsp> {
    private static readonly pb::MessageParser<SvrChangeCustomPlayerStatusRsp> _parser = new pb::MessageParser<SvrChangeCustomPlayerStatusRsp>(() => new SvrChangeCustomPlayerStatusRsp());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<SvrChangeCustomPlayerStatusRsp> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::com.unity.mgobe.ProtoReflection.Descriptor.MessageTypes[56]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public SvrChangeCustomPlayerStatusRsp() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public SvrChangeCustomPlayerStatusRsp(SvrChangeCustomPlayerStatusRsp other) : this() {
      roomInfo_ = other.roomInfo_ != null ? other.roomInfo_.Clone() : null;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public SvrChangeCustomPlayerStatusRsp Clone() {
      return new SvrChangeCustomPlayerStatusRsp(this);
    }

    /// <summary>Field number for the "room_info" field.</summary>
    public const int RoomInfoFieldNumber = 1;
    private global::com.unity.mgobe.RoomInfo roomInfo_;
    /// <summary>
    //// 房间信息
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::com.unity.mgobe.RoomInfo RoomInfo {
      get { return roomInfo_; }
      set {
        roomInfo_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as SvrChangeCustomPlayerStatusRsp);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(SvrChangeCustomPlayerStatusRsp other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (!object.Equals(RoomInfo, other.RoomInfo)) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (roomInfo_ != null) hash ^= RoomInfo.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (roomInfo_ != null) {
        output.WriteRawTag(10);
        output.WriteMessage(RoomInfo);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (roomInfo_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(RoomInfo);
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(SvrChangeCustomPlayerStatusRsp other) {
      if (other == null) {
        return;
      }
      if (other.roomInfo_ != null) {
        if (roomInfo_ == null) {
          RoomInfo = new global::com.unity.mgobe.RoomInfo();
        }
        RoomInfo.MergeFrom(other.RoomInfo);
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 10: {
            if (roomInfo_ == null) {
              RoomInfo = new global::com.unity.mgobe.RoomInfo();
            }
            input.ReadMessage(RoomInfo);
            break;
          }
        }
      }
    }

  }

  /// <summary>
  ///
  ///更改用户网络状态请求
  /// </summary>
  public sealed partial class ChangePlayerNetworkStateReq : pb::IMessage<ChangePlayerNetworkStateReq> {
    private static readonly pb::MessageParser<ChangePlayerNetworkStateReq> _parser = new pb::MessageParser<ChangePlayerNetworkStateReq>(() => new ChangePlayerNetworkStateReq());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<ChangePlayerNetworkStateReq> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::com.unity.mgobe.ProtoReflection.Descriptor.MessageTypes[57]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ChangePlayerNetworkStateReq() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ChangePlayerNetworkStateReq(ChangePlayerNetworkStateReq other) : this() {
      networkState_ = other.networkState_;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ChangePlayerNetworkStateReq Clone() {
      return new ChangePlayerNetworkStateReq(this);
    }

    /// <summary>Field number for the "network_state" field.</summary>
    public const int NetworkStateFieldNumber = 1;
    private global::com.unity.mgobe.NetworkState networkState_ = 0;
    /// <summary>
    //// 网络状态
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::com.unity.mgobe.NetworkState NetworkState {
      get { return networkState_; }
      set {
        networkState_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as ChangePlayerNetworkStateReq);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(ChangePlayerNetworkStateReq other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (NetworkState != other.NetworkState) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (NetworkState != 0) hash ^= NetworkState.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (NetworkState != 0) {
        output.WriteRawTag(8);
        output.WriteEnum((int) NetworkState);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (NetworkState != 0) {
        size += 1 + pb::CodedOutputStream.ComputeEnumSize((int) NetworkState);
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(ChangePlayerNetworkStateReq other) {
      if (other == null) {
        return;
      }
      if (other.NetworkState != 0) {
        NetworkState = other.NetworkState;
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 8: {
            NetworkState = (global::com.unity.mgobe.NetworkState) input.ReadEnum();
            break;
          }
        }
      }
    }

  }

  public sealed partial class ChangePlayerNetworkStateRsp : pb::IMessage<ChangePlayerNetworkStateRsp> {
    private static readonly pb::MessageParser<ChangePlayerNetworkStateRsp> _parser = new pb::MessageParser<ChangePlayerNetworkStateRsp>(() => new ChangePlayerNetworkStateRsp());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<ChangePlayerNetworkStateRsp> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::com.unity.mgobe.ProtoReflection.Descriptor.MessageTypes[58]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ChangePlayerNetworkStateRsp() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ChangePlayerNetworkStateRsp(ChangePlayerNetworkStateRsp other) : this() {
      roomInfo_ = other.roomInfo_ != null ? other.roomInfo_.Clone() : null;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ChangePlayerNetworkStateRsp Clone() {
      return new ChangePlayerNetworkStateRsp(this);
    }

    /// <summary>Field number for the "room_info" field.</summary>
    public const int RoomInfoFieldNumber = 1;
    private global::com.unity.mgobe.RoomInfo roomInfo_;
    /// <summary>
    //// 房间信息
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::com.unity.mgobe.RoomInfo RoomInfo {
      get { return roomInfo_; }
      set {
        roomInfo_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as ChangePlayerNetworkStateRsp);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(ChangePlayerNetworkStateRsp other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (!object.Equals(RoomInfo, other.RoomInfo)) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (roomInfo_ != null) hash ^= RoomInfo.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (roomInfo_ != null) {
        output.WriteRawTag(10);
        output.WriteMessage(RoomInfo);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (roomInfo_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(RoomInfo);
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(ChangePlayerNetworkStateRsp other) {
      if (other == null) {
        return;
      }
      if (other.roomInfo_ != null) {
        if (roomInfo_ == null) {
          RoomInfo = new global::com.unity.mgobe.RoomInfo();
        }
        RoomInfo.MergeFrom(other.RoomInfo);
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 10: {
            if (roomInfo_ == null) {
              RoomInfo = new global::com.unity.mgobe.RoomInfo();
            }
            input.ReadMessage(RoomInfo);
            break;
          }
        }
      }
    }

  }

  /// <summary>
  ///
  ///拉取房间列表
  /// </summary>
  public sealed partial class GetRoomListReq : pb::IMessage<GetRoomListReq> {
    private static readonly pb::MessageParser<GetRoomListReq> _parser = new pb::MessageParser<GetRoomListReq>(() => new GetRoomListReq());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<GetRoomListReq> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::com.unity.mgobe.ProtoReflection.Descriptor.MessageTypes[59]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public GetRoomListReq() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public GetRoomListReq(GetRoomListReq other) : this() {
      gameId_ = other.gameId_;
      pageNo_ = other.pageNo_;
      pageSize_ = other.pageSize_;
      roomType_ = other.roomType_;
      isDesc_ = other.isDesc_;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public GetRoomListReq Clone() {
      return new GetRoomListReq(this);
    }

    /// <summary>Field number for the "game_id" field.</summary>
    public const int GameIdFieldNumber = 1;
    private string gameId_ = "";
    /// <summary>
    //// [rm-sdk-para] 游戏ID
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string GameId {
      get { return gameId_; }
      set {
        gameId_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "page_no" field.</summary>
    public const int PageNoFieldNumber = 2;
    private uint pageNo_;
    /// <summary>
    //// 一页大小
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public uint PageNo {
      get { return pageNo_; }
      set {
        pageNo_ = value;
      }
    }

    /// <summary>Field number for the "page_size" field.</summary>
    public const int PageSizeFieldNumber = 3;
    private uint pageSize_;
    /// <summary>
    //// 页数
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public uint PageSize {
      get { return pageSize_; }
      set {
        pageSize_ = value;
      }
    }

    /// <summary>Field number for the "room_type" field.</summary>
    public const int RoomTypeFieldNumber = 4;
    private string roomType_ = "";
    /// <summary>
    //// 房间类型, 传"" 拉去所有类型
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string RoomType {
      get { return roomType_; }
      set {
        roomType_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "is_desc" field.</summary>
    public const int IsDescFieldNumber = 5;
    private bool isDesc_;
    /// <summary>
    //// 按照房间创建时间倒序，默认顺序
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool IsDesc {
      get { return isDesc_; }
      set {
        isDesc_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as GetRoomListReq);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(GetRoomListReq other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (GameId != other.GameId) return false;
      if (PageNo != other.PageNo) return false;
      if (PageSize != other.PageSize) return false;
      if (RoomType != other.RoomType) return false;
      if (IsDesc != other.IsDesc) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (GameId.Length != 0) hash ^= GameId.GetHashCode();
      if (PageNo != 0) hash ^= PageNo.GetHashCode();
      if (PageSize != 0) hash ^= PageSize.GetHashCode();
      if (RoomType.Length != 0) hash ^= RoomType.GetHashCode();
      if (IsDesc != false) hash ^= IsDesc.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (GameId.Length != 0) {
        output.WriteRawTag(10);
        output.WriteString(GameId);
      }
      if (PageNo != 0) {
        output.WriteRawTag(16);
        output.WriteUInt32(PageNo);
      }
      if (PageSize != 0) {
        output.WriteRawTag(24);
        output.WriteUInt32(PageSize);
      }
      if (RoomType.Length != 0) {
        output.WriteRawTag(34);
        output.WriteString(RoomType);
      }
      if (IsDesc != false) {
        output.WriteRawTag(40);
        output.WriteBool(IsDesc);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (GameId.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(GameId);
      }
      if (PageNo != 0) {
        size += 1 + pb::CodedOutputStream.ComputeUInt32Size(PageNo);
      }
      if (PageSize != 0) {
        size += 1 + pb::CodedOutputStream.ComputeUInt32Size(PageSize);
      }
      if (RoomType.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(RoomType);
      }
      if (IsDesc != false) {
        size += 1 + 1;
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(GetRoomListReq other) {
      if (other == null) {
        return;
      }
      if (other.GameId.Length != 0) {
        GameId = other.GameId;
      }
      if (other.PageNo != 0) {
        PageNo = other.PageNo;
      }
      if (other.PageSize != 0) {
        PageSize = other.PageSize;
      }
      if (other.RoomType.Length != 0) {
        RoomType = other.RoomType;
      }
      if (other.IsDesc != false) {
        IsDesc = other.IsDesc;
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 10: {
            GameId = input.ReadString();
            break;
          }
          case 16: {
            PageNo = input.ReadUInt32();
            break;
          }
          case 24: {
            PageSize = input.ReadUInt32();
            break;
          }
          case 34: {
            RoomType = input.ReadString();
            break;
          }
          case 40: {
            IsDesc = input.ReadBool();
            break;
          }
        }
      }
    }

  }

  public sealed partial class GetRoomListRsp : pb::IMessage<GetRoomListRsp> {
    private static readonly pb::MessageParser<GetRoomListRsp> _parser = new pb::MessageParser<GetRoomListRsp>(() => new GetRoomListRsp());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<GetRoomListRsp> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::com.unity.mgobe.ProtoReflection.Descriptor.MessageTypes[60]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public GetRoomListRsp() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public GetRoomListRsp(GetRoomListRsp other) : this() {
      gameId_ = other.gameId_;
      roomList_ = other.roomList_.Clone();
      total_ = other.total_;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public GetRoomListRsp Clone() {
      return new GetRoomListRsp(this);
    }

    /// <summary>Field number for the "game_id" field.</summary>
    public const int GameIdFieldNumber = 1;
    private string gameId_ = "";
    /// <summary>
    //// 游戏ID
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string GameId {
      get { return gameId_; }
      set {
        gameId_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "room_list" field.</summary>
    public const int RoomListFieldNumber = 2;
    private static readonly pb::FieldCodec<global::com.unity.mgobe.RoomInfo> _repeated_roomList_codec
        = pb::FieldCodec.ForMessage(18, global::com.unity.mgobe.RoomInfo.Parser);
    private readonly pbc::RepeatedField<global::com.unity.mgobe.RoomInfo> roomList_ = new pbc::RepeatedField<global::com.unity.mgobe.RoomInfo>();
    /// <summary>
    //// 房间列表
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::RepeatedField<global::com.unity.mgobe.RoomInfo> RoomList {
      get { return roomList_; }
    }

    /// <summary>Field number for the "total" field.</summary>
    public const int TotalFieldNumber = 3;
    private ulong total_;
    /// <summary>
    //// 房间数量
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ulong Total {
      get { return total_; }
      set {
        total_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as GetRoomListRsp);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(GetRoomListRsp other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (GameId != other.GameId) return false;
      if(!roomList_.Equals(other.roomList_)) return false;
      if (Total != other.Total) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (GameId.Length != 0) hash ^= GameId.GetHashCode();
      hash ^= roomList_.GetHashCode();
      if (Total != 0UL) hash ^= Total.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (GameId.Length != 0) {
        output.WriteRawTag(10);
        output.WriteString(GameId);
      }
      roomList_.WriteTo(output, _repeated_roomList_codec);
      if (Total != 0UL) {
        output.WriteRawTag(24);
        output.WriteUInt64(Total);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (GameId.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(GameId);
      }
      size += roomList_.CalculateSize(_repeated_roomList_codec);
      if (Total != 0UL) {
        size += 1 + pb::CodedOutputStream.ComputeUInt64Size(Total);
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(GetRoomListRsp other) {
      if (other == null) {
        return;
      }
      if (other.GameId.Length != 0) {
        GameId = other.GameId;
      }
      roomList_.Add(other.roomList_);
      if (other.Total != 0UL) {
        Total = other.Total;
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 10: {
            GameId = input.ReadString();
            break;
          }
          case 18: {
            roomList_.AddEntriesFrom(input, _repeated_roomList_codec);
            break;
          }
          case 24: {
            Total = input.ReadUInt64();
            break;
          }
        }
      }
    }

  }

  /// <summary>
  ///
  ///房间匹配 简单模式
  /// </summary>
  public sealed partial class MatchRoomSimpleReq : pb::IMessage<MatchRoomSimpleReq> {
    private static readonly pb::MessageParser<MatchRoomSimpleReq> _parser = new pb::MessageParser<MatchRoomSimpleReq>(() => new MatchRoomSimpleReq());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<MatchRoomSimpleReq> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::com.unity.mgobe.ProtoReflection.Descriptor.MessageTypes[61]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public MatchRoomSimpleReq() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public MatchRoomSimpleReq(MatchRoomSimpleReq other) : this() {
      roomType_ = other.roomType_;
      maxPlayers_ = other.maxPlayers_;
      playerInfo_ = other.playerInfo_ != null ? other.playerInfo_.Clone() : null;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public MatchRoomSimpleReq Clone() {
      return new MatchRoomSimpleReq(this);
    }

    /// <summary>Field number for the "room_type" field.</summary>
    public const int RoomTypeFieldNumber = 1;
    private string roomType_ = "";
    /// <summary>
    //// 房间类型
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string RoomType {
      get { return roomType_; }
      set {
        roomType_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "max_players" field.</summary>
    public const int MaxPlayersFieldNumber = 2;
    private ulong maxPlayers_;
    /// <summary>
    //// 最大房间人数
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ulong MaxPlayers {
      get { return maxPlayers_; }
      set {
        maxPlayers_ = value;
      }
    }

    /// <summary>Field number for the "player_info" field.</summary>
    public const int PlayerInfoFieldNumber = 3;
    private global::com.unity.mgobe.PlayerInfo playerInfo_;
    /// <summary>
    //// 匹配的用户信息
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::com.unity.mgobe.PlayerInfo PlayerInfo {
      get { return playerInfo_; }
      set {
        playerInfo_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as MatchRoomSimpleReq);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(MatchRoomSimpleReq other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (RoomType != other.RoomType) return false;
      if (MaxPlayers != other.MaxPlayers) return false;
      if (!object.Equals(PlayerInfo, other.PlayerInfo)) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (RoomType.Length != 0) hash ^= RoomType.GetHashCode();
      if (MaxPlayers != 0UL) hash ^= MaxPlayers.GetHashCode();
      if (playerInfo_ != null) hash ^= PlayerInfo.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (RoomType.Length != 0) {
        output.WriteRawTag(10);
        output.WriteString(RoomType);
      }
      if (MaxPlayers != 0UL) {
        output.WriteRawTag(16);
        output.WriteUInt64(MaxPlayers);
      }
      if (playerInfo_ != null) {
        output.WriteRawTag(26);
        output.WriteMessage(PlayerInfo);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (RoomType.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(RoomType);
      }
      if (MaxPlayers != 0UL) {
        size += 1 + pb::CodedOutputStream.ComputeUInt64Size(MaxPlayers);
      }
      if (playerInfo_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(PlayerInfo);
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(MatchRoomSimpleReq other) {
      if (other == null) {
        return;
      }
      if (other.RoomType.Length != 0) {
        RoomType = other.RoomType;
      }
      if (other.MaxPlayers != 0UL) {
        MaxPlayers = other.MaxPlayers;
      }
      if (other.playerInfo_ != null) {
        if (playerInfo_ == null) {
          PlayerInfo = new global::com.unity.mgobe.PlayerInfo();
        }
        PlayerInfo.MergeFrom(other.PlayerInfo);
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 10: {
            RoomType = input.ReadString();
            break;
          }
          case 16: {
            MaxPlayers = input.ReadUInt64();
            break;
          }
          case 26: {
            if (playerInfo_ == null) {
              PlayerInfo = new global::com.unity.mgobe.PlayerInfo();
            }
            input.ReadMessage(PlayerInfo);
            break;
          }
        }
      }
    }

  }

  public sealed partial class MatchRoomSimpleRsp : pb::IMessage<MatchRoomSimpleRsp> {
    private static readonly pb::MessageParser<MatchRoomSimpleRsp> _parser = new pb::MessageParser<MatchRoomSimpleRsp>(() => new MatchRoomSimpleRsp());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<MatchRoomSimpleRsp> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::com.unity.mgobe.ProtoReflection.Descriptor.MessageTypes[62]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public MatchRoomSimpleRsp() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public MatchRoomSimpleRsp(MatchRoomSimpleRsp other) : this() {
      roomInfo_ = other.roomInfo_ != null ? other.roomInfo_.Clone() : null;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public MatchRoomSimpleRsp Clone() {
      return new MatchRoomSimpleRsp(this);
    }

    /// <summary>Field number for the "room_info" field.</summary>
    public const int RoomInfoFieldNumber = 1;
    private global::com.unity.mgobe.RoomInfo roomInfo_;
    /// <summary>
    ////加入/创建房间的信息
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::com.unity.mgobe.RoomInfo RoomInfo {
      get { return roomInfo_; }
      set {
        roomInfo_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as MatchRoomSimpleRsp);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(MatchRoomSimpleRsp other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (!object.Equals(RoomInfo, other.RoomInfo)) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (roomInfo_ != null) hash ^= RoomInfo.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (roomInfo_ != null) {
        output.WriteRawTag(10);
        output.WriteMessage(RoomInfo);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (roomInfo_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(RoomInfo);
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(MatchRoomSimpleRsp other) {
      if (other == null) {
        return;
      }
      if (other.roomInfo_ != null) {
        if (roomInfo_ == null) {
          RoomInfo = new global::com.unity.mgobe.RoomInfo();
        }
        RoomInfo.MergeFrom(other.RoomInfo);
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 10: {
            if (roomInfo_ == null) {
              RoomInfo = new global::com.unity.mgobe.RoomInfo();
            }
            input.ReadMessage(RoomInfo);
            break;
          }
        }
      }
    }

  }

  /// <summary>
  ///
  ///房间匹配 复杂模式
  /// </summary>
  public sealed partial class MatchRoomComplexReq : pb::IMessage<MatchRoomComplexReq> {
    private static readonly pb::MessageParser<MatchRoomComplexReq> _parser = new pb::MessageParser<MatchRoomComplexReq>(() => new MatchRoomComplexReq());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<MatchRoomComplexReq> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::com.unity.mgobe.ProtoReflection.Descriptor.MessageTypes[63]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public MatchRoomComplexReq() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public MatchRoomComplexReq(MatchRoomComplexReq other) : this() {
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public MatchRoomComplexReq Clone() {
      return new MatchRoomComplexReq(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as MatchRoomComplexReq);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(MatchRoomComplexReq other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(MatchRoomComplexReq other) {
      if (other == null) {
        return;
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
        }
      }
    }

  }

  /// <summary>
  //// 待定-规划中
  /// </summary>
  public sealed partial class MatchRoomComplexRsp : pb::IMessage<MatchRoomComplexRsp> {
    private static readonly pb::MessageParser<MatchRoomComplexRsp> _parser = new pb::MessageParser<MatchRoomComplexRsp>(() => new MatchRoomComplexRsp());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<MatchRoomComplexRsp> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::com.unity.mgobe.ProtoReflection.Descriptor.MessageTypes[64]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public MatchRoomComplexRsp() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public MatchRoomComplexRsp(MatchRoomComplexRsp other) : this() {
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public MatchRoomComplexRsp Clone() {
      return new MatchRoomComplexRsp(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as MatchRoomComplexRsp);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(MatchRoomComplexRsp other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(MatchRoomComplexRsp other) {
      if (other == null) {
        return;
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
        }
      }
    }

  }

  /// <summary>
  ///
  ///玩家匹配 简单模式
  /// </summary>
  public sealed partial class MatchPlayersSimpleReq : pb::IMessage<MatchPlayersSimpleReq> {
    private static readonly pb::MessageParser<MatchPlayersSimpleReq> _parser = new pb::MessageParser<MatchPlayersSimpleReq>(() => new MatchPlayersSimpleReq());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<MatchPlayersSimpleReq> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::com.unity.mgobe.ProtoReflection.Descriptor.MessageTypes[65]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public MatchPlayersSimpleReq() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public MatchPlayersSimpleReq(MatchPlayersSimpleReq other) : this() {
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public MatchPlayersSimpleReq Clone() {
      return new MatchPlayersSimpleReq(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as MatchPlayersSimpleReq);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(MatchPlayersSimpleReq other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(MatchPlayersSimpleReq other) {
      if (other == null) {
        return;
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
        }
      }
    }

  }

  /// <summary>
  //// 待定-规划中
  /// </summary>
  public sealed partial class MatchPlayersSimpleRsp : pb::IMessage<MatchPlayersSimpleRsp> {
    private static readonly pb::MessageParser<MatchPlayersSimpleRsp> _parser = new pb::MessageParser<MatchPlayersSimpleRsp>(() => new MatchPlayersSimpleRsp());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<MatchPlayersSimpleRsp> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::com.unity.mgobe.ProtoReflection.Descriptor.MessageTypes[66]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public MatchPlayersSimpleRsp() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public MatchPlayersSimpleRsp(MatchPlayersSimpleRsp other) : this() {
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public MatchPlayersSimpleRsp Clone() {
      return new MatchPlayersSimpleRsp(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as MatchPlayersSimpleRsp);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(MatchPlayersSimpleRsp other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(MatchPlayersSimpleRsp other) {
      if (other == null) {
        return;
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
        }
      }
    }

  }

  /// <summary>
  //// 个人或者团队的匹配属性
  /// </summary>
  public sealed partial class MatchAttribute : pb::IMessage<MatchAttribute> {
    private static readonly pb::MessageParser<MatchAttribute> _parser = new pb::MessageParser<MatchAttribute>(() => new MatchAttribute());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<MatchAttribute> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::com.unity.mgobe.ProtoReflection.Descriptor.MessageTypes[67]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public MatchAttribute() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public MatchAttribute(MatchAttribute other) : this() {
      name_ = other.name_;
      value_ = other.value_;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public MatchAttribute Clone() {
      return new MatchAttribute(this);
    }

    /// <summary>Field number for the "name" field.</summary>
    public const int NameFieldNumber = 1;
    private string name_ = "";
    /// <summary>
    ////  属性名
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string Name {
      get { return name_; }
      set {
        name_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "value" field.</summary>
    public const int ValueFieldNumber = 2;
    private int value_;
    /// <summary>
    ////  属性值
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int Value {
      get { return value_; }
      set {
        value_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as MatchAttribute);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(MatchAttribute other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (Name != other.Name) return false;
      if (Value != other.Value) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (Name.Length != 0) hash ^= Name.GetHashCode();
      if (Value != 0) hash ^= Value.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (Name.Length != 0) {
        output.WriteRawTag(10);
        output.WriteString(Name);
      }
      if (Value != 0) {
        output.WriteRawTag(16);
        output.WriteInt32(Value);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (Name.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(Name);
      }
      if (Value != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(Value);
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(MatchAttribute other) {
      if (other == null) {
        return;
      }
      if (other.Name.Length != 0) {
        Name = other.Name;
      }
      if (other.Value != 0) {
        Value = other.Value;
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 10: {
            Name = input.ReadString();
            break;
          }
          case 16: {
            Value = input.ReadInt32();
            break;
          }
        }
      }
    }

  }

  /// <summary>
  ///
  ///玩家匹配
  ///player信息
  /// </summary>
  public sealed partial class MatchPlayerInfo : pb::IMessage<MatchPlayerInfo> {
    private static readonly pb::MessageParser<MatchPlayerInfo> _parser = new pb::MessageParser<MatchPlayerInfo>(() => new MatchPlayerInfo());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<MatchPlayerInfo> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::com.unity.mgobe.ProtoReflection.Descriptor.MessageTypes[68]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public MatchPlayerInfo() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public MatchPlayerInfo(MatchPlayerInfo other) : this() {
      id_ = other.id_;
      name_ = other.name_;
      customPlayerStatus_ = other.customPlayerStatus_;
      customProfile_ = other.customProfile_;
      matchAttributes_ = other.matchAttributes_.Clone();
      matchStatus_ = other.matchStatus_;
      teamId_ = other.teamId_;
      region_ = other.region_;
      teamLeader_ = other.teamLeader_;
      sdkVersion_ = other.sdkVersion_;
      groupId_ = other.groupId_;
      teamType_ = other.teamType_;
      requestId_ = other.requestId_;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public MatchPlayerInfo Clone() {
      return new MatchPlayerInfo(this);
    }

    /// <summary>Field number for the "id" field.</summary>
    public const int IdFieldNumber = 1;
    private string id_ = "";
    /// <summary>
    //// [rm-sdk-para] openid - player_id
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string Id {
      get { return id_; }
      set {
        id_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "name" field.</summary>
    public const int NameFieldNumber = 2;
    private string name_ = "";
    /// <summary>
    //// 用户名字
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string Name {
      get { return name_; }
      set {
        name_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "custom_player_status" field.</summary>
    public const int CustomPlayerStatusFieldNumber = 3;
    private ulong customPlayerStatus_;
    /// <summary>
    //// 用户状态，客户端透传
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ulong CustomPlayerStatus {
      get { return customPlayerStatus_; }
      set {
        customPlayerStatus_ = value;
      }
    }

    /// <summary>Field number for the "custom_profile" field.</summary>
    public const int CustomProfileFieldNumber = 4;
    private string customProfile_ = "";
    /// <summary>
    //// 用户的其他属性信息
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string CustomProfile {
      get { return customProfile_; }
      set {
        customProfile_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "match_attributes" field.</summary>
    public const int MatchAttributesFieldNumber = 5;
    private static readonly pb::FieldCodec<global::com.unity.mgobe.MatchAttribute> _repeated_matchAttributes_codec
        = pb::FieldCodec.ForMessage(42, global::com.unity.mgobe.MatchAttribute.Parser);
    private readonly pbc::RepeatedField<global::com.unity.mgobe.MatchAttribute> matchAttributes_ = new pbc::RepeatedField<global::com.unity.mgobe.MatchAttribute>();
    /// <summary>
    //// 属性列表
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::RepeatedField<global::com.unity.mgobe.MatchAttribute> MatchAttributes {
      get { return matchAttributes_; }
    }

    /// <summary>Field number for the "match_status" field.</summary>
    public const int MatchStatusFieldNumber = 6;
    private global::com.unity.mgobe.MatchStatus matchStatus_ = 0;
    /// <summary>
    //// [rm-sdk-para] bk：匹配状态
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::com.unity.mgobe.MatchStatus MatchStatus {
      get { return matchStatus_; }
      set {
        matchStatus_ = value;
      }
    }

    /// <summary>Field number for the "team_id" field.</summary>
    public const int TeamIdFieldNumber = 7;
    private string teamId_ = "";
    /// <summary>
    //// [rm-sdk-para] bk：团队id
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string TeamId {
      get { return teamId_; }
      set {
        teamId_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "region" field.</summary>
    public const int RegionFieldNumber = 8;
    private string region_ = "";
    /// <summary>
    //// [rm-sdk-para] bk：玩家现在所处的匹配区域
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string Region {
      get { return region_; }
      set {
        region_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "team_leader" field.</summary>
    public const int TeamLeaderFieldNumber = 9;
    private string teamLeader_ = "";
    /// <summary>
    //// [rm-sdk-para] bk：队长的openId
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string TeamLeader {
      get { return teamLeader_; }
      set {
        teamLeader_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "sdk_version" field.</summary>
    public const int SdkVersionFieldNumber = 10;
    private string sdkVersion_ = "";
    /// <summary>
    //// [rm-sdk-para] bk：sdk版本号，为机器人做兼容（1.1.4 => 1.2.0）
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string SdkVersion {
      get { return sdkVersion_; }
      set {
        sdkVersion_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "group_id" field.</summary>
    public const int GroupIdFieldNumber = 11;
    private string groupId_ = "";
    /// <summary>
    //// [rm-sdk-para] bk：player set id
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string GroupId {
      get { return groupId_; }
      set {
        groupId_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "team_type" field.</summary>
    public const int TeamTypeFieldNumber = 12;
    private string teamType_ = "";
    /// <summary>
    //// [rm-sdk-para] bk：非对称匹配队伍类型
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string TeamType {
      get { return teamType_; }
      set {
        teamType_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "request_id" field.</summary>
    public const int RequestIdFieldNumber = 13;
    private string requestId_ = "";
    /// <summary>
    //// [rm-sdk-para] bk：匹配请求id，用于更新匹配进度
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string RequestId {
      get { return requestId_; }
      set {
        requestId_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as MatchPlayerInfo);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(MatchPlayerInfo other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (Id != other.Id) return false;
      if (Name != other.Name) return false;
      if (CustomPlayerStatus != other.CustomPlayerStatus) return false;
      if (CustomProfile != other.CustomProfile) return false;
      if(!matchAttributes_.Equals(other.matchAttributes_)) return false;
      if (MatchStatus != other.MatchStatus) return false;
      if (TeamId != other.TeamId) return false;
      if (Region != other.Region) return false;
      if (TeamLeader != other.TeamLeader) return false;
      if (SdkVersion != other.SdkVersion) return false;
      if (GroupId != other.GroupId) return false;
      if (TeamType != other.TeamType) return false;
      if (RequestId != other.RequestId) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (Id.Length != 0) hash ^= Id.GetHashCode();
      if (Name.Length != 0) hash ^= Name.GetHashCode();
      if (CustomPlayerStatus != 0UL) hash ^= CustomPlayerStatus.GetHashCode();
      if (CustomProfile.Length != 0) hash ^= CustomProfile.GetHashCode();
      hash ^= matchAttributes_.GetHashCode();
      if (MatchStatus != 0) hash ^= MatchStatus.GetHashCode();
      if (TeamId.Length != 0) hash ^= TeamId.GetHashCode();
      if (Region.Length != 0) hash ^= Region.GetHashCode();
      if (TeamLeader.Length != 0) hash ^= TeamLeader.GetHashCode();
      if (SdkVersion.Length != 0) hash ^= SdkVersion.GetHashCode();
      if (GroupId.Length != 0) hash ^= GroupId.GetHashCode();
      if (TeamType.Length != 0) hash ^= TeamType.GetHashCode();
      if (RequestId.Length != 0) hash ^= RequestId.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (Id.Length != 0) {
        output.WriteRawTag(10);
        output.WriteString(Id);
      }
      if (Name.Length != 0) {
        output.WriteRawTag(18);
        output.WriteString(Name);
      }
      if (CustomPlayerStatus != 0UL) {
        output.WriteRawTag(24);
        output.WriteUInt64(CustomPlayerStatus);
      }
      if (CustomProfile.Length != 0) {
        output.WriteRawTag(34);
        output.WriteString(CustomProfile);
      }
      matchAttributes_.WriteTo(output, _repeated_matchAttributes_codec);
      if (MatchStatus != 0) {
        output.WriteRawTag(48);
        output.WriteEnum((int) MatchStatus);
      }
      if (TeamId.Length != 0) {
        output.WriteRawTag(58);
        output.WriteString(TeamId);
      }
      if (Region.Length != 0) {
        output.WriteRawTag(66);
        output.WriteString(Region);
      }
      if (TeamLeader.Length != 0) {
        output.WriteRawTag(74);
        output.WriteString(TeamLeader);
      }
      if (SdkVersion.Length != 0) {
        output.WriteRawTag(82);
        output.WriteString(SdkVersion);
      }
      if (GroupId.Length != 0) {
        output.WriteRawTag(90);
        output.WriteString(GroupId);
      }
      if (TeamType.Length != 0) {
        output.WriteRawTag(98);
        output.WriteString(TeamType);
      }
      if (RequestId.Length != 0) {
        output.WriteRawTag(106);
        output.WriteString(RequestId);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (Id.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(Id);
      }
      if (Name.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(Name);
      }
      if (CustomPlayerStatus != 0UL) {
        size += 1 + pb::CodedOutputStream.ComputeUInt64Size(CustomPlayerStatus);
      }
      if (CustomProfile.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(CustomProfile);
      }
      size += matchAttributes_.CalculateSize(_repeated_matchAttributes_codec);
      if (MatchStatus != 0) {
        size += 1 + pb::CodedOutputStream.ComputeEnumSize((int) MatchStatus);
      }
      if (TeamId.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(TeamId);
      }
      if (Region.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(Region);
      }
      if (TeamLeader.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(TeamLeader);
      }
      if (SdkVersion.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(SdkVersion);
      }
      if (GroupId.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(GroupId);
      }
      if (TeamType.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(TeamType);
      }
      if (RequestId.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(RequestId);
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(MatchPlayerInfo other) {
      if (other == null) {
        return;
      }
      if (other.Id.Length != 0) {
        Id = other.Id;
      }
      if (other.Name.Length != 0) {
        Name = other.Name;
      }
      if (other.CustomPlayerStatus != 0UL) {
        CustomPlayerStatus = other.CustomPlayerStatus;
      }
      if (other.CustomProfile.Length != 0) {
        CustomProfile = other.CustomProfile;
      }
      matchAttributes_.Add(other.matchAttributes_);
      if (other.MatchStatus != 0) {
        MatchStatus = other.MatchStatus;
      }
      if (other.TeamId.Length != 0) {
        TeamId = other.TeamId;
      }
      if (other.Region.Length != 0) {
        Region = other.Region;
      }
      if (other.TeamLeader.Length != 0) {
        TeamLeader = other.TeamLeader;
      }
      if (other.SdkVersion.Length != 0) {
        SdkVersion = other.SdkVersion;
      }
      if (other.GroupId.Length != 0) {
        GroupId = other.GroupId;
      }
      if (other.TeamType.Length != 0) {
        TeamType = other.TeamType;
      }
      if (other.RequestId.Length != 0) {
        RequestId = other.RequestId;
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 10: {
            Id = input.ReadString();
            break;
          }
          case 18: {
            Name = input.ReadString();
            break;
          }
          case 24: {
            CustomPlayerStatus = input.ReadUInt64();
            break;
          }
          case 34: {
            CustomProfile = input.ReadString();
            break;
          }
          case 42: {
            matchAttributes_.AddEntriesFrom(input, _repeated_matchAttributes_codec);
            break;
          }
          case 48: {
            MatchStatus = (global::com.unity.mgobe.MatchStatus) input.ReadEnum();
            break;
          }
          case 58: {
            TeamId = input.ReadString();
            break;
          }
          case 66: {
            Region = input.ReadString();
            break;
          }
          case 74: {
            TeamLeader = input.ReadString();
            break;
          }
          case 82: {
            SdkVersion = input.ReadString();
            break;
          }
          case 90: {
            GroupId = input.ReadString();
            break;
          }
          case 98: {
            TeamType = input.ReadString();
            break;
          }
          case 106: {
            RequestId = input.ReadString();
            break;
          }
        }
      }
    }

  }

  public sealed partial class MatchGroupPlayerInfo : pb::IMessage<MatchGroupPlayerInfo> {
    private static readonly pb::MessageParser<MatchGroupPlayerInfo> _parser = new pb::MessageParser<MatchGroupPlayerInfo>(() => new MatchGroupPlayerInfo());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<MatchGroupPlayerInfo> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::com.unity.mgobe.ProtoReflection.Descriptor.MessageTypes[69]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public MatchGroupPlayerInfo() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public MatchGroupPlayerInfo(MatchGroupPlayerInfo other) : this() {
      id_ = other.id_;
      name_ = other.name_;
      customPlayerStatus_ = other.customPlayerStatus_;
      customProfile_ = other.customProfile_;
      matchAttributes_ = other.matchAttributes_.Clone();
      matchStatus_ = other.matchStatus_;
      teamId_ = other.teamId_;
      region_ = other.region_;
      teamLeader_ = other.teamLeader_;
      sdkVersion_ = other.sdkVersion_;
      groupId_ = other.groupId_;
      teamType_ = other.teamType_;
      requestId_ = other.requestId_;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public MatchGroupPlayerInfo Clone() {
      return new MatchGroupPlayerInfo(this);
    }

    /// <summary>Field number for the "id" field.</summary>
    public const int IdFieldNumber = 1;
    private string id_ = "";
    /// <summary>
    ////  openid - player_id
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string Id {
      get { return id_; }
      set {
        id_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "name" field.</summary>
    public const int NameFieldNumber = 2;
    private string name_ = "";
    /// <summary>
    //// 用户名字
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string Name {
      get { return name_; }
      set {
        name_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "custom_player_status" field.</summary>
    public const int CustomPlayerStatusFieldNumber = 3;
    private ulong customPlayerStatus_;
    /// <summary>
    //// 用户状态，客户端透传
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ulong CustomPlayerStatus {
      get { return customPlayerStatus_; }
      set {
        customPlayerStatus_ = value;
      }
    }

    /// <summary>Field number for the "custom_profile" field.</summary>
    public const int CustomProfileFieldNumber = 4;
    private string customProfile_ = "";
    /// <summary>
    //// 用户的其他属性信息
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string CustomProfile {
      get { return customProfile_; }
      set {
        customProfile_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "match_attributes" field.</summary>
    public const int MatchAttributesFieldNumber = 5;
    private static readonly pb::FieldCodec<global::com.unity.mgobe.MatchAttribute> _repeated_matchAttributes_codec
        = pb::FieldCodec.ForMessage(42, global::com.unity.mgobe.MatchAttribute.Parser);
    private readonly pbc::RepeatedField<global::com.unity.mgobe.MatchAttribute> matchAttributes_ = new pbc::RepeatedField<global::com.unity.mgobe.MatchAttribute>();
    /// <summary>
    //// 属性列表
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::RepeatedField<global::com.unity.mgobe.MatchAttribute> MatchAttributes {
      get { return matchAttributes_; }
    }

    /// <summary>Field number for the "match_status" field.</summary>
    public const int MatchStatusFieldNumber = 6;
    private global::com.unity.mgobe.MatchStatus matchStatus_ = 0;
    /// <summary>
    //// [rm-sdk-para] bk：匹配状态
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::com.unity.mgobe.MatchStatus MatchStatus {
      get { return matchStatus_; }
      set {
        matchStatus_ = value;
      }
    }

    /// <summary>Field number for the "team_id" field.</summary>
    public const int TeamIdFieldNumber = 7;
    private string teamId_ = "";
    /// <summary>
    //// [rm-sdk-para] bk：团队id
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string TeamId {
      get { return teamId_; }
      set {
        teamId_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "region" field.</summary>
    public const int RegionFieldNumber = 8;
    private string region_ = "";
    /// <summary>
    //// [rm-sdk-para] bk：玩家现在所处的匹配区域
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string Region {
      get { return region_; }
      set {
        region_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "team_leader" field.</summary>
    public const int TeamLeaderFieldNumber = 9;
    private string teamLeader_ = "";
    /// <summary>
    //// [rm-sdk-para] bk：队长的openId
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string TeamLeader {
      get { return teamLeader_; }
      set {
        teamLeader_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "sdk_version" field.</summary>
    public const int SdkVersionFieldNumber = 10;
    private string sdkVersion_ = "";
    /// <summary>
    //// [rm-sdk-para] bk：sdk版本号，为机器人做兼容（1.1.4 => 1.2.0）
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string SdkVersion {
      get { return sdkVersion_; }
      set {
        sdkVersion_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "group_id" field.</summary>
    public const int GroupIdFieldNumber = 11;
    private string groupId_ = "";
    /// <summary>
    //// [rm-sdk-para] bk：player set id
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string GroupId {
      get { return groupId_; }
      set {
        groupId_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "team_type" field.</summary>
    public const int TeamTypeFieldNumber = 12;
    private string teamType_ = "";
    /// <summary>
    //// [rm-sdk-para] bk：非对称匹配队伍类型
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string TeamType {
      get { return teamType_; }
      set {
        teamType_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "request_id" field.</summary>
    public const int RequestIdFieldNumber = 13;
    private string requestId_ = "";
    /// <summary>
    //// [rm-sdk-para] bk：匹配请求id，用于更新匹配进度
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string RequestId {
      get { return requestId_; }
      set {
        requestId_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as MatchGroupPlayerInfo);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(MatchGroupPlayerInfo other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (Id != other.Id) return false;
      if (Name != other.Name) return false;
      if (CustomPlayerStatus != other.CustomPlayerStatus) return false;
      if (CustomProfile != other.CustomProfile) return false;
      if(!matchAttributes_.Equals(other.matchAttributes_)) return false;
      if (MatchStatus != other.MatchStatus) return false;
      if (TeamId != other.TeamId) return false;
      if (Region != other.Region) return false;
      if (TeamLeader != other.TeamLeader) return false;
      if (SdkVersion != other.SdkVersion) return false;
      if (GroupId != other.GroupId) return false;
      if (TeamType != other.TeamType) return false;
      if (RequestId != other.RequestId) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (Id.Length != 0) hash ^= Id.GetHashCode();
      if (Name.Length != 0) hash ^= Name.GetHashCode();
      if (CustomPlayerStatus != 0UL) hash ^= CustomPlayerStatus.GetHashCode();
      if (CustomProfile.Length != 0) hash ^= CustomProfile.GetHashCode();
      hash ^= matchAttributes_.GetHashCode();
      if (MatchStatus != 0) hash ^= MatchStatus.GetHashCode();
      if (TeamId.Length != 0) hash ^= TeamId.GetHashCode();
      if (Region.Length != 0) hash ^= Region.GetHashCode();
      if (TeamLeader.Length != 0) hash ^= TeamLeader.GetHashCode();
      if (SdkVersion.Length != 0) hash ^= SdkVersion.GetHashCode();
      if (GroupId.Length != 0) hash ^= GroupId.GetHashCode();
      if (TeamType.Length != 0) hash ^= TeamType.GetHashCode();
      if (RequestId.Length != 0) hash ^= RequestId.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (Id.Length != 0) {
        output.WriteRawTag(10);
        output.WriteString(Id);
      }
      if (Name.Length != 0) {
        output.WriteRawTag(18);
        output.WriteString(Name);
      }
      if (CustomPlayerStatus != 0UL) {
        output.WriteRawTag(24);
        output.WriteUInt64(CustomPlayerStatus);
      }
      if (CustomProfile.Length != 0) {
        output.WriteRawTag(34);
        output.WriteString(CustomProfile);
      }
      matchAttributes_.WriteTo(output, _repeated_matchAttributes_codec);
      if (MatchStatus != 0) {
        output.WriteRawTag(48);
        output.WriteEnum((int) MatchStatus);
      }
      if (TeamId.Length != 0) {
        output.WriteRawTag(58);
        output.WriteString(TeamId);
      }
      if (Region.Length != 0) {
        output.WriteRawTag(66);
        output.WriteString(Region);
      }
      if (TeamLeader.Length != 0) {
        output.WriteRawTag(74);
        output.WriteString(TeamLeader);
      }
      if (SdkVersion.Length != 0) {
        output.WriteRawTag(82);
        output.WriteString(SdkVersion);
      }
      if (GroupId.Length != 0) {
        output.WriteRawTag(90);
        output.WriteString(GroupId);
      }
      if (TeamType.Length != 0) {
        output.WriteRawTag(98);
        output.WriteString(TeamType);
      }
      if (RequestId.Length != 0) {
        output.WriteRawTag(106);
        output.WriteString(RequestId);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (Id.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(Id);
      }
      if (Name.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(Name);
      }
      if (CustomPlayerStatus != 0UL) {
        size += 1 + pb::CodedOutputStream.ComputeUInt64Size(CustomPlayerStatus);
      }
      if (CustomProfile.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(CustomProfile);
      }
      size += matchAttributes_.CalculateSize(_repeated_matchAttributes_codec);
      if (MatchStatus != 0) {
        size += 1 + pb::CodedOutputStream.ComputeEnumSize((int) MatchStatus);
      }
      if (TeamId.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(TeamId);
      }
      if (Region.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(Region);
      }
      if (TeamLeader.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(TeamLeader);
      }
      if (SdkVersion.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(SdkVersion);
      }
      if (GroupId.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(GroupId);
      }
      if (TeamType.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(TeamType);
      }
      if (RequestId.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(RequestId);
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(MatchGroupPlayerInfo other) {
      if (other == null) {
        return;
      }
      if (other.Id.Length != 0) {
        Id = other.Id;
      }
      if (other.Name.Length != 0) {
        Name = other.Name;
      }
      if (other.CustomPlayerStatus != 0UL) {
        CustomPlayerStatus = other.CustomPlayerStatus;
      }
      if (other.CustomProfile.Length != 0) {
        CustomProfile = other.CustomProfile;
      }
      matchAttributes_.Add(other.matchAttributes_);
      if (other.MatchStatus != 0) {
        MatchStatus = other.MatchStatus;
      }
      if (other.TeamId.Length != 0) {
        TeamId = other.TeamId;
      }
      if (other.Region.Length != 0) {
        Region = other.Region;
      }
      if (other.TeamLeader.Length != 0) {
        TeamLeader = other.TeamLeader;
      }
      if (other.SdkVersion.Length != 0) {
        SdkVersion = other.SdkVersion;
      }
      if (other.GroupId.Length != 0) {
        GroupId = other.GroupId;
      }
      if (other.TeamType.Length != 0) {
        TeamType = other.TeamType;
      }
      if (other.RequestId.Length != 0) {
        RequestId = other.RequestId;
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 10: {
            Id = input.ReadString();
            break;
          }
          case 18: {
            Name = input.ReadString();
            break;
          }
          case 24: {
            CustomPlayerStatus = input.ReadUInt64();
            break;
          }
          case 34: {
            CustomProfile = input.ReadString();
            break;
          }
          case 42: {
            matchAttributes_.AddEntriesFrom(input, _repeated_matchAttributes_codec);
            break;
          }
          case 48: {
            MatchStatus = (global::com.unity.mgobe.MatchStatus) input.ReadEnum();
            break;
          }
          case 58: {
            TeamId = input.ReadString();
            break;
          }
          case 66: {
            Region = input.ReadString();
            break;
          }
          case 74: {
            TeamLeader = input.ReadString();
            break;
          }
          case 82: {
            SdkVersion = input.ReadString();
            break;
          }
          case 90: {
            GroupId = input.ReadString();
            break;
          }
          case 98: {
            TeamType = input.ReadString();
            break;
          }
          case 106: {
            RequestId = input.ReadString();
            break;
          }
        }
      }
    }

  }

  /// <summary>
  ///
  ///玩家集合(好友组队)
  ///邀请好友，组成group进行匹配, player结构关系：
  ///player ==> group ==> team ==> room
  ///[rm-sdk-para]
  /// </summary>
  public sealed partial class MatchGroupInfo : pb::IMessage<MatchGroupInfo> {
    private static readonly pb::MessageParser<MatchGroupInfo> _parser = new pb::MessageParser<MatchGroupInfo>(() => new MatchGroupInfo());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<MatchGroupInfo> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::com.unity.mgobe.ProtoReflection.Descriptor.MessageTypes[70]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public MatchGroupInfo() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public MatchGroupInfo(MatchGroupInfo other) : this() {
      id_ = other.id_;
      leader_ = other.leader_;
      playerIdList_ = other.playerIdList_.Clone();
      playerInfoList_ = other.playerInfoList_.Clone();
      matchAttributes_ = other.matchAttributes_.Clone();
      region_ = other.region_;
      sdkVersion_ = other.sdkVersion_;
      teamId_ = other.teamId_;
      teamType_ = other.teamType_;
      requestId_ = other.requestId_;
      startMatchTime_ = other.startMatchTime_;
      isRobot_ = other.isRobot_;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public MatchGroupInfo Clone() {
      return new MatchGroupInfo(this);
    }

    /// <summary>Field number for the "id" field.</summary>
    public const int IdFieldNumber = 1;
    private string id_ = "";
    /// <summary>
    //// [rm-sdk-para] bk：集合id（s_ld_tsp）
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string Id {
      get { return id_; }
      set {
        id_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "leader" field.</summary>
    public const int LeaderFieldNumber = 2;
    private string leader_ = "";
    /// <summary>
    //// [rm-sdk-para] bk：队长 playerId
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string Leader {
      get { return leader_; }
      set {
        leader_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "player_id_list" field.</summary>
    public const int PlayerIdListFieldNumber = 3;
    private static readonly pb::FieldCodec<string> _repeated_playerIdList_codec
        = pb::FieldCodec.ForString(26);
    private readonly pbc::RepeatedField<string> playerIdList_ = new pbc::RepeatedField<string>();
    /// <summary>
    //// [rm-sdk-para] bk：集合所有成员 playerId (适配)
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::RepeatedField<string> PlayerIdList {
      get { return playerIdList_; }
    }

    /// <summary>Field number for the "player_info_list" field.</summary>
    public const int PlayerInfoListFieldNumber = 4;
    private static readonly pb::FieldCodec<global::com.unity.mgobe.MatchPlayerInfo> _repeated_playerInfoList_codec
        = pb::FieldCodec.ForMessage(34, global::com.unity.mgobe.MatchPlayerInfo.Parser);
    private readonly pbc::RepeatedField<global::com.unity.mgobe.MatchPlayerInfo> playerInfoList_ = new pbc::RepeatedField<global::com.unity.mgobe.MatchPlayerInfo>();
    /// <summary>
    //// [rm-sdk-para] bk：集合中玩家信息列表（兼容数据传递）
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::RepeatedField<global::com.unity.mgobe.MatchPlayerInfo> PlayerInfoList {
      get { return playerInfoList_; }
    }

    /// <summary>Field number for the "match_attributes" field.</summary>
    public const int MatchAttributesFieldNumber = 5;
    private static readonly pb::FieldCodec<global::com.unity.mgobe.MatchAttribute> _repeated_matchAttributes_codec
        = pb::FieldCodec.ForMessage(42, global::com.unity.mgobe.MatchAttribute.Parser);
    private readonly pbc::RepeatedField<global::com.unity.mgobe.MatchAttribute> matchAttributes_ = new pbc::RepeatedField<global::com.unity.mgobe.MatchAttribute>();
    /// <summary>
    //// [rm-sdk-para] bk：属性列表（avg of each player.attr）
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::RepeatedField<global::com.unity.mgobe.MatchAttribute> MatchAttributes {
      get { return matchAttributes_; }
    }

    /// <summary>Field number for the "region" field.</summary>
    public const int RegionFieldNumber = 6;
    private string region_ = "";
    /// <summary>
    //// [rm-sdk-para] bk：玩家现在所处的匹配区域
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string Region {
      get { return region_; }
      set {
        region_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "sdk_version" field.</summary>
    public const int SdkVersionFieldNumber = 7;
    private string sdkVersion_ = "";
    /// <summary>
    //// [rm-sdk-para] bk：sdk版本号，为机器人做兼容（1.1.4 => 1.2.0）
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string SdkVersion {
      get { return sdkVersion_; }
      set {
        sdkVersion_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "team_id" field.</summary>
    public const int TeamIdFieldNumber = 8;
    private string teamId_ = "";
    /// <summary>
    //// [rm-sdk-para] bk：加入到队伍的id
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string TeamId {
      get { return teamId_; }
      set {
        teamId_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "team_type" field.</summary>
    public const int TeamTypeFieldNumber = 12;
    private string teamType_ = "";
    /// <summary>
    //// todo-v9 match_request_id
    //// todo-v9 team_type == rule.teams.team_name
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string TeamType {
      get { return teamType_; }
      set {
        teamType_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "request_id" field.</summary>
    public const int RequestIdFieldNumber = 13;
    private string requestId_ = "";
    /// <summary>
    //// [rm-sdk-para] bk：匹配请求id，用于更新匹配进度
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string RequestId {
      get { return requestId_; }
      set {
        requestId_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "start_match_time" field.</summary>
    public const int StartMatchTimeFieldNumber = 14;
    private ulong startMatchTime_;
    /// <summary>
    //// todo-v13 group发起匹配的时间，以该时间判定玩家是否匹配超时，填充机器人
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ulong StartMatchTime {
      get { return startMatchTime_; }
      set {
        startMatchTime_ = value;
      }
    }

    /// <summary>Field number for the "is_robot" field.</summary>
    public const int IsRobotFieldNumber = 15;
    private bool isRobot_;
    /// <summary>
    //// v13 match-robot
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool IsRobot {
      get { return isRobot_; }
      set {
        isRobot_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as MatchGroupInfo);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(MatchGroupInfo other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (Id != other.Id) return false;
      if (Leader != other.Leader) return false;
      if(!playerIdList_.Equals(other.playerIdList_)) return false;
      if(!playerInfoList_.Equals(other.playerInfoList_)) return false;
      if(!matchAttributes_.Equals(other.matchAttributes_)) return false;
      if (Region != other.Region) return false;
      if (SdkVersion != other.SdkVersion) return false;
      if (TeamId != other.TeamId) return false;
      if (TeamType != other.TeamType) return false;
      if (RequestId != other.RequestId) return false;
      if (StartMatchTime != other.StartMatchTime) return false;
      if (IsRobot != other.IsRobot) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (Id.Length != 0) hash ^= Id.GetHashCode();
      if (Leader.Length != 0) hash ^= Leader.GetHashCode();
      hash ^= playerIdList_.GetHashCode();
      hash ^= playerInfoList_.GetHashCode();
      hash ^= matchAttributes_.GetHashCode();
      if (Region.Length != 0) hash ^= Region.GetHashCode();
      if (SdkVersion.Length != 0) hash ^= SdkVersion.GetHashCode();
      if (TeamId.Length != 0) hash ^= TeamId.GetHashCode();
      if (TeamType.Length != 0) hash ^= TeamType.GetHashCode();
      if (RequestId.Length != 0) hash ^= RequestId.GetHashCode();
      if (StartMatchTime != 0UL) hash ^= StartMatchTime.GetHashCode();
      if (IsRobot != false) hash ^= IsRobot.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (Id.Length != 0) {
        output.WriteRawTag(10);
        output.WriteString(Id);
      }
      if (Leader.Length != 0) {
        output.WriteRawTag(18);
        output.WriteString(Leader);
      }
      playerIdList_.WriteTo(output, _repeated_playerIdList_codec);
      playerInfoList_.WriteTo(output, _repeated_playerInfoList_codec);
      matchAttributes_.WriteTo(output, _repeated_matchAttributes_codec);
      if (Region.Length != 0) {
        output.WriteRawTag(50);
        output.WriteString(Region);
      }
      if (SdkVersion.Length != 0) {
        output.WriteRawTag(58);
        output.WriteString(SdkVersion);
      }
      if (TeamId.Length != 0) {
        output.WriteRawTag(66);
        output.WriteString(TeamId);
      }
      if (TeamType.Length != 0) {
        output.WriteRawTag(98);
        output.WriteString(TeamType);
      }
      if (RequestId.Length != 0) {
        output.WriteRawTag(106);
        output.WriteString(RequestId);
      }
      if (StartMatchTime != 0UL) {
        output.WriteRawTag(112);
        output.WriteUInt64(StartMatchTime);
      }
      if (IsRobot != false) {
        output.WriteRawTag(120);
        output.WriteBool(IsRobot);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (Id.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(Id);
      }
      if (Leader.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(Leader);
      }
      size += playerIdList_.CalculateSize(_repeated_playerIdList_codec);
      size += playerInfoList_.CalculateSize(_repeated_playerInfoList_codec);
      size += matchAttributes_.CalculateSize(_repeated_matchAttributes_codec);
      if (Region.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(Region);
      }
      if (SdkVersion.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(SdkVersion);
      }
      if (TeamId.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(TeamId);
      }
      if (TeamType.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(TeamType);
      }
      if (RequestId.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(RequestId);
      }
      if (StartMatchTime != 0UL) {
        size += 1 + pb::CodedOutputStream.ComputeUInt64Size(StartMatchTime);
      }
      if (IsRobot != false) {
        size += 1 + 1;
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(MatchGroupInfo other) {
      if (other == null) {
        return;
      }
      if (other.Id.Length != 0) {
        Id = other.Id;
      }
      if (other.Leader.Length != 0) {
        Leader = other.Leader;
      }
      playerIdList_.Add(other.playerIdList_);
      playerInfoList_.Add(other.playerInfoList_);
      matchAttributes_.Add(other.matchAttributes_);
      if (other.Region.Length != 0) {
        Region = other.Region;
      }
      if (other.SdkVersion.Length != 0) {
        SdkVersion = other.SdkVersion;
      }
      if (other.TeamId.Length != 0) {
        TeamId = other.TeamId;
      }
      if (other.TeamType.Length != 0) {
        TeamType = other.TeamType;
      }
      if (other.RequestId.Length != 0) {
        RequestId = other.RequestId;
      }
      if (other.StartMatchTime != 0UL) {
        StartMatchTime = other.StartMatchTime;
      }
      if (other.IsRobot != false) {
        IsRobot = other.IsRobot;
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 10: {
            Id = input.ReadString();
            break;
          }
          case 18: {
            Leader = input.ReadString();
            break;
          }
          case 26: {
            playerIdList_.AddEntriesFrom(input, _repeated_playerIdList_codec);
            break;
          }
          case 34: {
            playerInfoList_.AddEntriesFrom(input, _repeated_playerInfoList_codec);
            break;
          }
          case 42: {
            matchAttributes_.AddEntriesFrom(input, _repeated_matchAttributes_codec);
            break;
          }
          case 50: {
            Region = input.ReadString();
            break;
          }
          case 58: {
            SdkVersion = input.ReadString();
            break;
          }
          case 66: {
            TeamId = input.ReadString();
            break;
          }
          case 98: {
            TeamType = input.ReadString();
            break;
          }
          case 106: {
            RequestId = input.ReadString();
            break;
          }
          case 112: {
            StartMatchTime = input.ReadUInt64();
            break;
          }
          case 120: {
            IsRobot = input.ReadBool();
            break;
          }
        }
      }
    }

  }

  /// <summary>
  ///
  ///玩家匹配
  ///team信息
  ///[rm-sdk-para]
  /// </summary>
  public sealed partial class MatchTeamInfo : pb::IMessage<MatchTeamInfo> {
    private static readonly pb::MessageParser<MatchTeamInfo> _parser = new pb::MessageParser<MatchTeamInfo>(() => new MatchTeamInfo());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<MatchTeamInfo> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::com.unity.mgobe.ProtoReflection.Descriptor.MessageTypes[71]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public MatchTeamInfo() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public MatchTeamInfo(MatchTeamInfo other) : this() {
      teamId_ = other.teamId_;
      teamName_ = other.teamName_;
      teamLeader_ = other.teamLeader_;
      members_ = other.members_.Clone();
      matchAttributes_ = other.matchAttributes_.Clone();
      memberSdkVersions_ = other.memberSdkVersions_.Clone();
      groupIds_ = other.groupIds_.Clone();
      groupSdkVersions_ = other.groupSdkVersions_.Clone();
      teamType_ = other.teamType_;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public MatchTeamInfo Clone() {
      return new MatchTeamInfo(this);
    }

    /// <summary>Field number for the "team_id" field.</summary>
    public const int TeamIdFieldNumber = 1;
    private string teamId_ = "";
    /// <summary>
    //// 队伍id t_ld_tsp
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string TeamId {
      get { return teamId_; }
      set {
        teamId_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "team_name" field.</summary>
    public const int TeamNameFieldNumber = 2;
    private string teamName_ = "";
    /// <summary>
    //// 用户名字
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string TeamName {
      get { return teamName_; }
      set {
        teamName_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "team_leader" field.</summary>
    public const int TeamLeaderFieldNumber = 3;
    private string teamLeader_ = "";
    /// <summary>
    //// 队长 playerId
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string TeamLeader {
      get { return teamLeader_; }
      set {
        teamLeader_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "members" field.</summary>
    public const int MembersFieldNumber = 4;
    private static readonly pb::FieldCodec<string> _repeated_members_codec
        = pb::FieldCodec.ForString(34);
    private readonly pbc::RepeatedField<string> members_ = new pbc::RepeatedField<string>();
    /// <summary>
    //// [rm-sdk-para] bk：来自单人匹配的PlayerId
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::RepeatedField<string> Members {
      get { return members_; }
    }

    /// <summary>Field number for the "match_attributes" field.</summary>
    public const int MatchAttributesFieldNumber = 5;
    private static readonly pb::FieldCodec<global::com.unity.mgobe.MatchAttribute> _repeated_matchAttributes_codec
        = pb::FieldCodec.ForMessage(42, global::com.unity.mgobe.MatchAttribute.Parser);
    private readonly pbc::RepeatedField<global::com.unity.mgobe.MatchAttribute> matchAttributes_ = new pbc::RepeatedField<global::com.unity.mgobe.MatchAttribute>();
    /// <summary>
    //// 属性列表
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::RepeatedField<global::com.unity.mgobe.MatchAttribute> MatchAttributes {
      get { return matchAttributes_; }
    }

    /// <summary>Field number for the "member_sdk_versions" field.</summary>
    public const int MemberSdkVersionsFieldNumber = 6;
    private static readonly pb::FieldCodec<string> _repeated_memberSdkVersions_codec
        = pb::FieldCodec.ForString(50);
    private readonly pbc::RepeatedField<string> memberSdkVersions_ = new pbc::RepeatedField<string>();
    /// <summary>
    //// [rm-sdk-para] bk：单player sdk版本号，为机器人做兼容（1.1.4 => 1.2.0）
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::RepeatedField<string> MemberSdkVersions {
      get { return memberSdkVersions_; }
    }

    /// <summary>Field number for the "group_ids" field.</summary>
    public const int GroupIdsFieldNumber = 7;
    private static readonly pb::FieldCodec<string> _repeated_groupIds_codec
        = pb::FieldCodec.ForString(58);
    private readonly pbc::RepeatedField<string> groupIds_ = new pbc::RepeatedField<string>();
    /// <summary>
    //// [rm-sdk-para] bk：player set id list /// [rm-sdk-para] bk：来自Group的GroupId，
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::RepeatedField<string> GroupIds {
      get { return groupIds_; }
    }

    /// <summary>Field number for the "group_sdk_versions" field.</summary>
    public const int GroupSdkVersionsFieldNumber = 8;
    private static readonly pb::FieldCodec<string> _repeated_groupSdkVersions_codec
        = pb::FieldCodec.ForString(66);
    private readonly pbc::RepeatedField<string> groupSdkVersions_ = new pbc::RepeatedField<string>();
    /// <summary>
    //// [rm-sdk-para] bk：group sdk版本号，为机器人做兼容（1.1.4 => 1.2.0）
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::RepeatedField<string> GroupSdkVersions {
      get { return groupSdkVersions_; }
    }

    /// <summary>Field number for the "team_type" field.</summary>
    public const int TeamTypeFieldNumber = 12;
    private string teamType_ = "";
    /// <summary>
    ////TeamConstituteMode team_constitute_mode     = 9; /// [rm-sdk-para] bk：组成队伍的方式(兼容字段)
    //// -v9 team_type == rule.teams.team_name
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string TeamType {
      get { return teamType_; }
      set {
        teamType_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as MatchTeamInfo);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(MatchTeamInfo other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (TeamId != other.TeamId) return false;
      if (TeamName != other.TeamName) return false;
      if (TeamLeader != other.TeamLeader) return false;
      if(!members_.Equals(other.members_)) return false;
      if(!matchAttributes_.Equals(other.matchAttributes_)) return false;
      if(!memberSdkVersions_.Equals(other.memberSdkVersions_)) return false;
      if(!groupIds_.Equals(other.groupIds_)) return false;
      if(!groupSdkVersions_.Equals(other.groupSdkVersions_)) return false;
      if (TeamType != other.TeamType) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (TeamId.Length != 0) hash ^= TeamId.GetHashCode();
      if (TeamName.Length != 0) hash ^= TeamName.GetHashCode();
      if (TeamLeader.Length != 0) hash ^= TeamLeader.GetHashCode();
      hash ^= members_.GetHashCode();
      hash ^= matchAttributes_.GetHashCode();
      hash ^= memberSdkVersions_.GetHashCode();
      hash ^= groupIds_.GetHashCode();
      hash ^= groupSdkVersions_.GetHashCode();
      if (TeamType.Length != 0) hash ^= TeamType.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (TeamId.Length != 0) {
        output.WriteRawTag(10);
        output.WriteString(TeamId);
      }
      if (TeamName.Length != 0) {
        output.WriteRawTag(18);
        output.WriteString(TeamName);
      }
      if (TeamLeader.Length != 0) {
        output.WriteRawTag(26);
        output.WriteString(TeamLeader);
      }
      members_.WriteTo(output, _repeated_members_codec);
      matchAttributes_.WriteTo(output, _repeated_matchAttributes_codec);
      memberSdkVersions_.WriteTo(output, _repeated_memberSdkVersions_codec);
      groupIds_.WriteTo(output, _repeated_groupIds_codec);
      groupSdkVersions_.WriteTo(output, _repeated_groupSdkVersions_codec);
      if (TeamType.Length != 0) {
        output.WriteRawTag(98);
        output.WriteString(TeamType);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (TeamId.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(TeamId);
      }
      if (TeamName.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(TeamName);
      }
      if (TeamLeader.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(TeamLeader);
      }
      size += members_.CalculateSize(_repeated_members_codec);
      size += matchAttributes_.CalculateSize(_repeated_matchAttributes_codec);
      size += memberSdkVersions_.CalculateSize(_repeated_memberSdkVersions_codec);
      size += groupIds_.CalculateSize(_repeated_groupIds_codec);
      size += groupSdkVersions_.CalculateSize(_repeated_groupSdkVersions_codec);
      if (TeamType.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(TeamType);
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(MatchTeamInfo other) {
      if (other == null) {
        return;
      }
      if (other.TeamId.Length != 0) {
        TeamId = other.TeamId;
      }
      if (other.TeamName.Length != 0) {
        TeamName = other.TeamName;
      }
      if (other.TeamLeader.Length != 0) {
        TeamLeader = other.TeamLeader;
      }
      members_.Add(other.members_);
      matchAttributes_.Add(other.matchAttributes_);
      memberSdkVersions_.Add(other.memberSdkVersions_);
      groupIds_.Add(other.groupIds_);
      groupSdkVersions_.Add(other.groupSdkVersions_);
      if (other.TeamType.Length != 0) {
        TeamType = other.TeamType;
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 10: {
            TeamId = input.ReadString();
            break;
          }
          case 18: {
            TeamName = input.ReadString();
            break;
          }
          case 26: {
            TeamLeader = input.ReadString();
            break;
          }
          case 34: {
            members_.AddEntriesFrom(input, _repeated_members_codec);
            break;
          }
          case 42: {
            matchAttributes_.AddEntriesFrom(input, _repeated_matchAttributes_codec);
            break;
          }
          case 50: {
            memberSdkVersions_.AddEntriesFrom(input, _repeated_memberSdkVersions_codec);
            break;
          }
          case 58: {
            groupIds_.AddEntriesFrom(input, _repeated_groupIds_codec);
            break;
          }
          case 66: {
            groupSdkVersions_.AddEntriesFrom(input, _repeated_groupSdkVersions_codec);
            break;
          }
          case 98: {
            TeamType = input.ReadString();
            break;
          }
        }
      }
    }

  }

  /// <summary>
  ///
  ///玩家进度信息
  ///[rm-sdk-para]
  /// </summary>
  public sealed partial class ProgressPlayerInfo : pb::IMessage<ProgressPlayerInfo> {
    private static readonly pb::MessageParser<ProgressPlayerInfo> _parser = new pb::MessageParser<ProgressPlayerInfo>(() => new ProgressPlayerInfo());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<ProgressPlayerInfo> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::com.unity.mgobe.ProtoReflection.Descriptor.MessageTypes[72]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ProgressPlayerInfo() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ProgressPlayerInfo(ProgressPlayerInfo other) : this() {
      playerId_ = other.playerId_;
      teamName_ = other.teamName_;
      matchAttributes_ = other.matchAttributes_.Clone();
      startMatchTime_ = other.startMatchTime_;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ProgressPlayerInfo Clone() {
      return new ProgressPlayerInfo(this);
    }

    /// <summary>Field number for the "player_id" field.</summary>
    public const int PlayerIdFieldNumber = 1;
    private string playerId_ = "";
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string PlayerId {
      get { return playerId_; }
      set {
        playerId_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "team_name" field.</summary>
    public const int TeamNameFieldNumber = 2;
    private string teamName_ = "";
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string TeamName {
      get { return teamName_; }
      set {
        teamName_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "match_attributes" field.</summary>
    public const int MatchAttributesFieldNumber = 3;
    private static readonly pb::FieldCodec<global::com.unity.mgobe.MatchAttribute> _repeated_matchAttributes_codec
        = pb::FieldCodec.ForMessage(26, global::com.unity.mgobe.MatchAttribute.Parser);
    private readonly pbc::RepeatedField<global::com.unity.mgobe.MatchAttribute> matchAttributes_ = new pbc::RepeatedField<global::com.unity.mgobe.MatchAttribute>();
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::RepeatedField<global::com.unity.mgobe.MatchAttribute> MatchAttributes {
      get { return matchAttributes_; }
    }

    /// <summary>Field number for the "start_match_time" field.</summary>
    public const int StartMatchTimeFieldNumber = 4;
    private ulong startMatchTime_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ulong StartMatchTime {
      get { return startMatchTime_; }
      set {
        startMatchTime_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as ProgressPlayerInfo);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(ProgressPlayerInfo other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (PlayerId != other.PlayerId) return false;
      if (TeamName != other.TeamName) return false;
      if(!matchAttributes_.Equals(other.matchAttributes_)) return false;
      if (StartMatchTime != other.StartMatchTime) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (PlayerId.Length != 0) hash ^= PlayerId.GetHashCode();
      if (TeamName.Length != 0) hash ^= TeamName.GetHashCode();
      hash ^= matchAttributes_.GetHashCode();
      if (StartMatchTime != 0UL) hash ^= StartMatchTime.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (PlayerId.Length != 0) {
        output.WriteRawTag(10);
        output.WriteString(PlayerId);
      }
      if (TeamName.Length != 0) {
        output.WriteRawTag(18);
        output.WriteString(TeamName);
      }
      matchAttributes_.WriteTo(output, _repeated_matchAttributes_codec);
      if (StartMatchTime != 0UL) {
        output.WriteRawTag(32);
        output.WriteUInt64(StartMatchTime);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (PlayerId.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(PlayerId);
      }
      if (TeamName.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(TeamName);
      }
      size += matchAttributes_.CalculateSize(_repeated_matchAttributes_codec);
      if (StartMatchTime != 0UL) {
        size += 1 + pb::CodedOutputStream.ComputeUInt64Size(StartMatchTime);
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(ProgressPlayerInfo other) {
      if (other == null) {
        return;
      }
      if (other.PlayerId.Length != 0) {
        PlayerId = other.PlayerId;
      }
      if (other.TeamName.Length != 0) {
        TeamName = other.TeamName;
      }
      matchAttributes_.Add(other.matchAttributes_);
      if (other.StartMatchTime != 0UL) {
        StartMatchTime = other.StartMatchTime;
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 10: {
            PlayerId = input.ReadString();
            break;
          }
          case 18: {
            TeamName = input.ReadString();
            break;
          }
          case 26: {
            matchAttributes_.AddEntriesFrom(input, _repeated_matchAttributes_codec);
            break;
          }
          case 32: {
            StartMatchTime = input.ReadUInt64();
            break;
          }
        }
      }
    }

  }

  /// <summary>
  ///
  ///匹配结果：对局-队伍数据
  ///[rm-sdk-para]
  /// </summary>
  public sealed partial class MatchmakerTeam : pb::IMessage<MatchmakerTeam> {
    private static readonly pb::MessageParser<MatchmakerTeam> _parser = new pb::MessageParser<MatchmakerTeam>(() => new MatchmakerTeam());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<MatchmakerTeam> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::com.unity.mgobe.ProtoReflection.Descriptor.MessageTypes[73]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public MatchmakerTeam() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public MatchmakerTeam(MatchmakerTeam other) : this() {
      name_ = other.name_;
      players_ = other.players_.Clone();
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public MatchmakerTeam Clone() {
      return new MatchmakerTeam(this);
    }

    /// <summary>Field number for the "name" field.</summary>
    public const int NameFieldNumber = 1;
    private string name_ = "";
    /// <summary>
    //// team_name 队伍名
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string Name {
      get { return name_; }
      set {
        name_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "players" field.</summary>
    public const int PlayersFieldNumber = 2;
    private static readonly pb::FieldCodec<global::com.unity.mgobe.ProgressPlayerInfo> _repeated_players_codec
        = pb::FieldCodec.ForMessage(18, global::com.unity.mgobe.ProgressPlayerInfo.Parser);
    private readonly pbc::RepeatedField<global::com.unity.mgobe.ProgressPlayerInfo> players_ = new pbc::RepeatedField<global::com.unity.mgobe.ProgressPlayerInfo>();
    /// <summary>
    //// 玩家匹配进度信息
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::RepeatedField<global::com.unity.mgobe.ProgressPlayerInfo> Players {
      get { return players_; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as MatchmakerTeam);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(MatchmakerTeam other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (Name != other.Name) return false;
      if(!players_.Equals(other.players_)) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (Name.Length != 0) hash ^= Name.GetHashCode();
      hash ^= players_.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (Name.Length != 0) {
        output.WriteRawTag(10);
        output.WriteString(Name);
      }
      players_.WriteTo(output, _repeated_players_codec);
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (Name.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(Name);
      }
      size += players_.CalculateSize(_repeated_players_codec);
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(MatchmakerTeam other) {
      if (other == null) {
        return;
      }
      if (other.Name.Length != 0) {
        Name = other.Name;
      }
      players_.Add(other.players_);
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 10: {
            Name = input.ReadString();
            break;
          }
          case 18: {
            players_.AddEntriesFrom(input, _repeated_players_codec);
            break;
          }
        }
      }
    }

  }

  /// <summary>
  ///
  ///匹配结果：对局数据
  ///[rm-sdk-para]
  /// </summary>
  public sealed partial class MatchmakerData : pb::IMessage<MatchmakerData> {
    private static readonly pb::MessageParser<MatchmakerData> _parser = new pb::MessageParser<MatchmakerData>(() => new MatchmakerData());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<MatchmakerData> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::com.unity.mgobe.ProtoReflection.Descriptor.MessageTypes[74]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public MatchmakerData() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public MatchmakerData(MatchmakerData other) : this() {
      matchId_ = other.matchId_;
      teams_ = other.teams_.Clone();
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public MatchmakerData Clone() {
      return new MatchmakerData(this);
    }

    /// <summary>Field number for the "match_id" field.</summary>
    public const int MatchIdFieldNumber = 1;
    private string matchId_ = "";
    /// <summary>
    //// match result 对局Id，可以关联多个matchRequestId
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string MatchId {
      get { return matchId_; }
      set {
        matchId_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "teams" field.</summary>
    public const int TeamsFieldNumber = 2;
    private static readonly pb::FieldCodec<global::com.unity.mgobe.MatchmakerTeam> _repeated_teams_codec
        = pb::FieldCodec.ForMessage(18, global::com.unity.mgobe.MatchmakerTeam.Parser);
    private readonly pbc::RepeatedField<global::com.unity.mgobe.MatchmakerTeam> teams_ = new pbc::RepeatedField<global::com.unity.mgobe.MatchmakerTeam>();
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::RepeatedField<global::com.unity.mgobe.MatchmakerTeam> Teams {
      get { return teams_; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as MatchmakerData);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(MatchmakerData other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (MatchId != other.MatchId) return false;
      if(!teams_.Equals(other.teams_)) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (MatchId.Length != 0) hash ^= MatchId.GetHashCode();
      hash ^= teams_.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (MatchId.Length != 0) {
        output.WriteRawTag(10);
        output.WriteString(MatchId);
      }
      teams_.WriteTo(output, _repeated_teams_codec);
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (MatchId.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(MatchId);
      }
      size += teams_.CalculateSize(_repeated_teams_codec);
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(MatchmakerData other) {
      if (other == null) {
        return;
      }
      if (other.MatchId.Length != 0) {
        MatchId = other.MatchId;
      }
      teams_.Add(other.teams_);
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 10: {
            MatchId = input.ReadString();
            break;
          }
          case 18: {
            teams_.AddEntriesFrom(input, _repeated_teams_codec);
            break;
          }
        }
      }
    }

  }

  /// <summary>
  ///
  ///placement 过程信息数据
  ///[rm-sdk-para]
  /// </summary>
  public sealed partial class MatchPlacementInfo : pb::IMessage<MatchPlacementInfo> {
    private static readonly pb::MessageParser<MatchPlacementInfo> _parser = new pb::MessageParser<MatchPlacementInfo>(() => new MatchPlacementInfo());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<MatchPlacementInfo> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::com.unity.mgobe.ProtoReflection.Descriptor.MessageTypes[75]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public MatchPlacementInfo() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public MatchPlacementInfo(MatchPlacementInfo other) : this() {
      gameId_ = other.gameId_;
      matchCode_ = other.matchCode_;
      matchId_ = other.matchId_;
      type_ = other.type_;
      createRoomReq_ = other.createRoomReq_ != null ? other.createRoomReq_.Clone() : null;
      matchmakerDataJson_ = other.matchmakerDataJson_;
      status_ = other.status_;
      resultBody_ = other.resultBody_;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public MatchPlacementInfo Clone() {
      return new MatchPlacementInfo(this);
    }

    /// <summary>Field number for the "game_id" field.</summary>
    public const int GameIdFieldNumber = 1;
    private string gameId_ = "";
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string GameId {
      get { return gameId_; }
      set {
        gameId_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "match_code" field.</summary>
    public const int MatchCodeFieldNumber = 2;
    private string matchCode_ = "";
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string MatchCode {
      get { return matchCode_; }
      set {
        matchCode_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "match_id" field.</summary>
    public const int MatchIdFieldNumber = 3;
    private string matchId_ = "";
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string MatchId {
      get { return matchId_; }
      set {
        matchId_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "type" field.</summary>
    public const int TypeFieldNumber = 4;
    private global::com.unity.mgobe.MatchPlacementType type_ = 0;
    /// <summary>
    //// MP_MGOBE / MP_GSE / MP_THIRDPARTY
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::com.unity.mgobe.MatchPlacementType Type {
      get { return type_; }
      set {
        type_ = value;
      }
    }

    /// <summary>Field number for the "create_room_req" field.</summary>
    public const int CreateRoomReqFieldNumber = 5;
    private global::com.unity.mgobe.CreateRoomReq createRoomReq_;
    /// <summary>
    //// matchmaking 构建的匹配创房请求
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::com.unity.mgobe.CreateRoomReq CreateRoomReq {
      get { return createRoomReq_; }
      set {
        createRoomReq_ = value;
      }
    }

    /// <summary>Field number for the "matchmaker_data_json" field.</summary>
    public const int MatchmakerDataJsonFieldNumber = 6;
    private string matchmakerDataJson_ = "";
    /// <summary>
    //// matchmaker结果数据，采用json串存储，方便业务使用：team-player-attr json str
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string MatchmakerDataJson {
      get { return matchmakerDataJson_; }
      set {
        matchmakerDataJson_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "status" field.</summary>
    public const int StatusFieldNumber = 8;
    private global::com.unity.mgobe.PlacementStatus status_ = 0;
    /// <summary>
    ////MatchmakerData matchmaker_data = 7;
    //// 结果数据
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::com.unity.mgobe.PlacementStatus Status {
      get { return status_; }
      set {
        status_ = value;
      }
    }

    /// <summary>Field number for the "result_body" field.</summary>
    public const int ResultBodyFieldNumber = 9;
    private pb::ByteString resultBody_ = pb::ByteString.Empty;
    /// <summary>
    ////status=PS_FULFILLED，需要按照type设置result mgobe-roominfo/3rd-none/gse-gamesession
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pb::ByteString ResultBody {
      get { return resultBody_; }
      set {
        resultBody_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as MatchPlacementInfo);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(MatchPlacementInfo other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (GameId != other.GameId) return false;
      if (MatchCode != other.MatchCode) return false;
      if (MatchId != other.MatchId) return false;
      if (Type != other.Type) return false;
      if (!object.Equals(CreateRoomReq, other.CreateRoomReq)) return false;
      if (MatchmakerDataJson != other.MatchmakerDataJson) return false;
      if (Status != other.Status) return false;
      if (ResultBody != other.ResultBody) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (GameId.Length != 0) hash ^= GameId.GetHashCode();
      if (MatchCode.Length != 0) hash ^= MatchCode.GetHashCode();
      if (MatchId.Length != 0) hash ^= MatchId.GetHashCode();
      if (Type != 0) hash ^= Type.GetHashCode();
      if (createRoomReq_ != null) hash ^= CreateRoomReq.GetHashCode();
      if (MatchmakerDataJson.Length != 0) hash ^= MatchmakerDataJson.GetHashCode();
      if (Status != 0) hash ^= Status.GetHashCode();
      if (ResultBody.Length != 0) hash ^= ResultBody.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (GameId.Length != 0) {
        output.WriteRawTag(10);
        output.WriteString(GameId);
      }
      if (MatchCode.Length != 0) {
        output.WriteRawTag(18);
        output.WriteString(MatchCode);
      }
      if (MatchId.Length != 0) {
        output.WriteRawTag(26);
        output.WriteString(MatchId);
      }
      if (Type != 0) {
        output.WriteRawTag(32);
        output.WriteEnum((int) Type);
      }
      if (createRoomReq_ != null) {
        output.WriteRawTag(42);
        output.WriteMessage(CreateRoomReq);
      }
      if (MatchmakerDataJson.Length != 0) {
        output.WriteRawTag(50);
        output.WriteString(MatchmakerDataJson);
      }
      if (Status != 0) {
        output.WriteRawTag(64);
        output.WriteEnum((int) Status);
      }
      if (ResultBody.Length != 0) {
        output.WriteRawTag(74);
        output.WriteBytes(ResultBody);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (GameId.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(GameId);
      }
      if (MatchCode.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(MatchCode);
      }
      if (MatchId.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(MatchId);
      }
      if (Type != 0) {
        size += 1 + pb::CodedOutputStream.ComputeEnumSize((int) Type);
      }
      if (createRoomReq_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(CreateRoomReq);
      }
      if (MatchmakerDataJson.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(MatchmakerDataJson);
      }
      if (Status != 0) {
        size += 1 + pb::CodedOutputStream.ComputeEnumSize((int) Status);
      }
      if (ResultBody.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeBytesSize(ResultBody);
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(MatchPlacementInfo other) {
      if (other == null) {
        return;
      }
      if (other.GameId.Length != 0) {
        GameId = other.GameId;
      }
      if (other.MatchCode.Length != 0) {
        MatchCode = other.MatchCode;
      }
      if (other.MatchId.Length != 0) {
        MatchId = other.MatchId;
      }
      if (other.Type != 0) {
        Type = other.Type;
      }
      if (other.createRoomReq_ != null) {
        if (createRoomReq_ == null) {
          CreateRoomReq = new global::com.unity.mgobe.CreateRoomReq();
        }
        CreateRoomReq.MergeFrom(other.CreateRoomReq);
      }
      if (other.MatchmakerDataJson.Length != 0) {
        MatchmakerDataJson = other.MatchmakerDataJson;
      }
      if (other.Status != 0) {
        Status = other.Status;
      }
      if (other.ResultBody.Length != 0) {
        ResultBody = other.ResultBody;
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 10: {
            GameId = input.ReadString();
            break;
          }
          case 18: {
            MatchCode = input.ReadString();
            break;
          }
          case 26: {
            MatchId = input.ReadString();
            break;
          }
          case 32: {
            Type = (global::com.unity.mgobe.MatchPlacementType) input.ReadEnum();
            break;
          }
          case 42: {
            if (createRoomReq_ == null) {
              CreateRoomReq = new global::com.unity.mgobe.CreateRoomReq();
            }
            input.ReadMessage(CreateRoomReq);
            break;
          }
          case 50: {
            MatchmakerDataJson = input.ReadString();
            break;
          }
          case 64: {
            Status = (global::com.unity.mgobe.PlacementStatus) input.ReadEnum();
            break;
          }
          case 74: {
            ResultBody = input.ReadBytes();
            break;
          }
        }
      }
    }

  }

  /// <summary>
  ///
  ///mgobe placement job
  ///[rm-sdk-para]
  /// </summary>
  public sealed partial class MgobePlacementJob : pb::IMessage<MgobePlacementJob> {
    private static readonly pb::MessageParser<MgobePlacementJob> _parser = new pb::MessageParser<MgobePlacementJob>(() => new MgobePlacementJob());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<MgobePlacementJob> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::com.unity.mgobe.ProtoReflection.Descriptor.MessageTypes[76]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public MgobePlacementJob() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public MgobePlacementJob(MgobePlacementJob other) : this() {
      createRoomReq_ = other.createRoomReq_ != null ? other.createRoomReq_.Clone() : null;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public MgobePlacementJob Clone() {
      return new MgobePlacementJob(this);
    }

    /// <summary>Field number for the "create_room_req" field.</summary>
    public const int CreateRoomReqFieldNumber = 1;
    private global::com.unity.mgobe.CreateRoomReq createRoomReq_;
    /// <summary>
    //// matchmaking构建的匹配创房请求
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::com.unity.mgobe.CreateRoomReq CreateRoomReq {
      get { return createRoomReq_; }
      set {
        createRoomReq_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as MgobePlacementJob);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(MgobePlacementJob other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (!object.Equals(CreateRoomReq, other.CreateRoomReq)) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (createRoomReq_ != null) hash ^= CreateRoomReq.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (createRoomReq_ != null) {
        output.WriteRawTag(10);
        output.WriteMessage(CreateRoomReq);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (createRoomReq_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(CreateRoomReq);
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(MgobePlacementJob other) {
      if (other == null) {
        return;
      }
      if (other.createRoomReq_ != null) {
        if (createRoomReq_ == null) {
          CreateRoomReq = new global::com.unity.mgobe.CreateRoomReq();
        }
        CreateRoomReq.MergeFrom(other.CreateRoomReq);
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 10: {
            if (createRoomReq_ == null) {
              CreateRoomReq = new global::com.unity.mgobe.CreateRoomReq();
            }
            input.ReadMessage(CreateRoomReq);
            break;
          }
        }
      }
    }

  }

  /// <summary>
  ///
  ///mgobe placement job result
  ///[rm-sdk-para]
  /// </summary>
  public sealed partial class MgobePlacementResult : pb::IMessage<MgobePlacementResult> {
    private static readonly pb::MessageParser<MgobePlacementResult> _parser = new pb::MessageParser<MgobePlacementResult>(() => new MgobePlacementResult());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<MgobePlacementResult> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::com.unity.mgobe.ProtoReflection.Descriptor.MessageTypes[77]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public MgobePlacementResult() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public MgobePlacementResult(MgobePlacementResult other) : this() {
      roomInfo_ = other.roomInfo_ != null ? other.roomInfo_.Clone() : null;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public MgobePlacementResult Clone() {
      return new MgobePlacementResult(this);
    }

    /// <summary>Field number for the "room_info" field.</summary>
    public const int RoomInfoFieldNumber = 1;
    private global::com.unity.mgobe.RoomInfo roomInfo_;
    /// <summary>
    //// 创建的房间信息
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::com.unity.mgobe.RoomInfo RoomInfo {
      get { return roomInfo_; }
      set {
        roomInfo_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as MgobePlacementResult);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(MgobePlacementResult other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (!object.Equals(RoomInfo, other.RoomInfo)) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (roomInfo_ != null) hash ^= RoomInfo.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (roomInfo_ != null) {
        output.WriteRawTag(10);
        output.WriteMessage(RoomInfo);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (roomInfo_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(RoomInfo);
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(MgobePlacementResult other) {
      if (other == null) {
        return;
      }
      if (other.roomInfo_ != null) {
        if (roomInfo_ == null) {
          RoomInfo = new global::com.unity.mgobe.RoomInfo();
        }
        RoomInfo.MergeFrom(other.RoomInfo);
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 10: {
            if (roomInfo_ == null) {
              RoomInfo = new global::com.unity.mgobe.RoomInfo();
            }
            input.ReadMessage(RoomInfo);
            break;
          }
        }
      }
    }

  }

  /// <summary>
  ///
  ///gse placement job
  ///[rm-sdk-para]
  /// </summary>
  public sealed partial class GsePlacementJob : pb::IMessage<GsePlacementJob> {
    private static readonly pb::MessageParser<GsePlacementJob> _parser = new pb::MessageParser<GsePlacementJob>(() => new GsePlacementJob());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<GsePlacementJob> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::com.unity.mgobe.ProtoReflection.Descriptor.MessageTypes[78]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public GsePlacementJob() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public GsePlacementJob(GsePlacementJob other) : this() {
      createRoomReq_ = other.createRoomReq_ != null ? other.createRoomReq_.Clone() : null;
      matchmakerData_ = other.matchmakerData_;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public GsePlacementJob Clone() {
      return new GsePlacementJob(this);
    }

    /// <summary>Field number for the "create_room_req" field.</summary>
    public const int CreateRoomReqFieldNumber = 1;
    private global::com.unity.mgobe.CreateRoomReq createRoomReq_;
    /// <summary>
    //// matchmaking构建的匹配创房请求
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::com.unity.mgobe.CreateRoomReq CreateRoomReq {
      get { return createRoomReq_; }
      set {
        createRoomReq_ = value;
      }
    }

    /// <summary>Field number for the "matchmaker_data" field.</summary>
    public const int MatchmakerDataFieldNumber = 2;
    private string matchmakerData_ = "";
    /// <summary>
    //// team-player-attr json str
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string MatchmakerData {
      get { return matchmakerData_; }
      set {
        matchmakerData_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as GsePlacementJob);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(GsePlacementJob other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (!object.Equals(CreateRoomReq, other.CreateRoomReq)) return false;
      if (MatchmakerData != other.MatchmakerData) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (createRoomReq_ != null) hash ^= CreateRoomReq.GetHashCode();
      if (MatchmakerData.Length != 0) hash ^= MatchmakerData.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (createRoomReq_ != null) {
        output.WriteRawTag(10);
        output.WriteMessage(CreateRoomReq);
      }
      if (MatchmakerData.Length != 0) {
        output.WriteRawTag(18);
        output.WriteString(MatchmakerData);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (createRoomReq_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(CreateRoomReq);
      }
      if (MatchmakerData.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(MatchmakerData);
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(GsePlacementJob other) {
      if (other == null) {
        return;
      }
      if (other.createRoomReq_ != null) {
        if (createRoomReq_ == null) {
          CreateRoomReq = new global::com.unity.mgobe.CreateRoomReq();
        }
        CreateRoomReq.MergeFrom(other.CreateRoomReq);
      }
      if (other.MatchmakerData.Length != 0) {
        MatchmakerData = other.MatchmakerData;
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 10: {
            if (createRoomReq_ == null) {
              CreateRoomReq = new global::com.unity.mgobe.CreateRoomReq();
            }
            input.ReadMessage(CreateRoomReq);
            break;
          }
          case 18: {
            MatchmakerData = input.ReadString();
            break;
          }
        }
      }
    }

  }

  /// <summary>
  ///
  ///gse placement job result
  ///[rm-sdk-para]
  /// </summary>
  public sealed partial class GsePlacementResult : pb::IMessage<GsePlacementResult> {
    private static readonly pb::MessageParser<GsePlacementResult> _parser = new pb::MessageParser<GsePlacementResult>(() => new GsePlacementResult());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<GsePlacementResult> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::com.unity.mgobe.ProtoReflection.Descriptor.MessageTypes[79]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public GsePlacementResult() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public GsePlacementResult(GsePlacementResult other) : this() {
      gseGameSession_ = other.gseGameSession_ != null ? other.gseGameSession_.Clone() : null;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public GsePlacementResult Clone() {
      return new GsePlacementResult(this);
    }

    /// <summary>Field number for the "gse_game_session" field.</summary>
    public const int GseGameSessionFieldNumber = 1;
    private global::com.unity.mgobe.GseGameSession gseGameSession_;
    /// <summary>
    //// gse 游戏会话
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::com.unity.mgobe.GseGameSession GseGameSession {
      get { return gseGameSession_; }
      set {
        gseGameSession_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as GsePlacementResult);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(GsePlacementResult other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (!object.Equals(GseGameSession, other.GseGameSession)) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (gseGameSession_ != null) hash ^= GseGameSession.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (gseGameSession_ != null) {
        output.WriteRawTag(10);
        output.WriteMessage(GseGameSession);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (gseGameSession_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(GseGameSession);
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(GsePlacementResult other) {
      if (other == null) {
        return;
      }
      if (other.gseGameSession_ != null) {
        if (gseGameSession_ == null) {
          GseGameSession = new global::com.unity.mgobe.GseGameSession();
        }
        GseGameSession.MergeFrom(other.GseGameSession);
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 10: {
            if (gseGameSession_ == null) {
              GseGameSession = new global::com.unity.mgobe.GseGameSession();
            }
            input.ReadMessage(GseGameSession);
            break;
          }
        }
      }
    }

  }

  /// <summary>
  ///
  ///第三方 placement job
  ///[rm-sdk-para]
  /// </summary>
  public sealed partial class ThirdpartyPlacementJob : pb::IMessage<ThirdpartyPlacementJob> {
    private static readonly pb::MessageParser<ThirdpartyPlacementJob> _parser = new pb::MessageParser<ThirdpartyPlacementJob>(() => new ThirdpartyPlacementJob());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<ThirdpartyPlacementJob> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::com.unity.mgobe.ProtoReflection.Descriptor.MessageTypes[80]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ThirdpartyPlacementJob() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ThirdpartyPlacementJob(ThirdpartyPlacementJob other) : this() {
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ThirdpartyPlacementJob Clone() {
      return new ThirdpartyPlacementJob(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as ThirdpartyPlacementJob);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(ThirdpartyPlacementJob other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(ThirdpartyPlacementJob other) {
      if (other == null) {
        return;
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
        }
      }
    }

  }

  /// <summary>
  ///
  ///第三方 placement job result
  ///[rm-sdk-para]
  /// </summary>
  public sealed partial class ThirdpartyPlacementResult : pb::IMessage<ThirdpartyPlacementResult> {
    private static readonly pb::MessageParser<ThirdpartyPlacementResult> _parser = new pb::MessageParser<ThirdpartyPlacementResult>(() => new ThirdpartyPlacementResult());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<ThirdpartyPlacementResult> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::com.unity.mgobe.ProtoReflection.Descriptor.MessageTypes[81]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ThirdpartyPlacementResult() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ThirdpartyPlacementResult(ThirdpartyPlacementResult other) : this() {
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ThirdpartyPlacementResult Clone() {
      return new ThirdpartyPlacementResult(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as ThirdpartyPlacementResult);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(ThirdpartyPlacementResult other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(ThirdpartyPlacementResult other) {
      if (other == null) {
        return;
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
        }
      }
    }

  }

  /// <summary>
  ///
  ///玩家延迟信息
  ///[rm-sdk-para]
  /// </summary>
  public sealed partial class GsePlayerLatency : pb::IMessage<GsePlayerLatency> {
    private static readonly pb::MessageParser<GsePlayerLatency> _parser = new pb::MessageParser<GsePlayerLatency>(() => new GsePlayerLatency());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<GsePlayerLatency> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::com.unity.mgobe.ProtoReflection.Descriptor.MessageTypes[82]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public GsePlayerLatency() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public GsePlayerLatency(GsePlayerLatency other) : this() {
      latencyInMilliseconds_ = other.latencyInMilliseconds_;
      playerId_ = other.playerId_;
      regionIdentifier_ = other.regionIdentifier_;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public GsePlayerLatency Clone() {
      return new GsePlayerLatency(this);
    }

    /// <summary>Field number for the "latency_in_milliseconds" field.</summary>
    public const int LatencyInMillisecondsFieldNumber = 1;
    private uint latencyInMilliseconds_;
    /// <summary>
    //// 毫秒级延迟-可选
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public uint LatencyInMilliseconds {
      get { return latencyInMilliseconds_; }
      set {
        latencyInMilliseconds_ = value;
      }
    }

    /// <summary>Field number for the "player_id" field.</summary>
    public const int PlayerIdFieldNumber = 2;
    private string playerId_ = "";
    /// <summary>
    //// 玩家Id-可选
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string PlayerId {
      get { return playerId_; }
      set {
        playerId_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "region_identifier" field.</summary>
    public const int RegionIdentifierFieldNumber = 3;
    private string regionIdentifier_ = "";
    /// <summary>
    //// 延迟对应的区域名称-可选
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string RegionIdentifier {
      get { return regionIdentifier_; }
      set {
        regionIdentifier_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as GsePlayerLatency);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(GsePlayerLatency other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (LatencyInMilliseconds != other.LatencyInMilliseconds) return false;
      if (PlayerId != other.PlayerId) return false;
      if (RegionIdentifier != other.RegionIdentifier) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (LatencyInMilliseconds != 0) hash ^= LatencyInMilliseconds.GetHashCode();
      if (PlayerId.Length != 0) hash ^= PlayerId.GetHashCode();
      if (RegionIdentifier.Length != 0) hash ^= RegionIdentifier.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (LatencyInMilliseconds != 0) {
        output.WriteRawTag(8);
        output.WriteUInt32(LatencyInMilliseconds);
      }
      if (PlayerId.Length != 0) {
        output.WriteRawTag(18);
        output.WriteString(PlayerId);
      }
      if (RegionIdentifier.Length != 0) {
        output.WriteRawTag(26);
        output.WriteString(RegionIdentifier);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (LatencyInMilliseconds != 0) {
        size += 1 + pb::CodedOutputStream.ComputeUInt32Size(LatencyInMilliseconds);
      }
      if (PlayerId.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(PlayerId);
      }
      if (RegionIdentifier.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(RegionIdentifier);
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(GsePlayerLatency other) {
      if (other == null) {
        return;
      }
      if (other.LatencyInMilliseconds != 0) {
        LatencyInMilliseconds = other.LatencyInMilliseconds;
      }
      if (other.PlayerId.Length != 0) {
        PlayerId = other.PlayerId;
      }
      if (other.RegionIdentifier.Length != 0) {
        RegionIdentifier = other.RegionIdentifier;
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 8: {
            LatencyInMilliseconds = input.ReadUInt32();
            break;
          }
          case 18: {
            PlayerId = input.ReadString();
            break;
          }
          case 26: {
            RegionIdentifier = input.ReadString();
            break;
          }
        }
      }
    }

  }

  /// <summary>
  ///
  ///游戏属性详情
  ///[rm-sdk-para]
  /// </summary>
  public sealed partial class GseGameProperty : pb::IMessage<GseGameProperty> {
    private static readonly pb::MessageParser<GseGameProperty> _parser = new pb::MessageParser<GseGameProperty>(() => new GseGameProperty());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<GseGameProperty> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::com.unity.mgobe.ProtoReflection.Descriptor.MessageTypes[83]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public GseGameProperty() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public GseGameProperty(GseGameProperty other) : this() {
      key_ = other.key_;
      value_ = other.value_;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public GseGameProperty Clone() {
      return new GseGameProperty(this);
    }

    /// <summary>Field number for the "key" field.</summary>
    public const int KeyFieldNumber = 1;
    private string key_ = "";
    /// <summary>
    //// 属性名称（键）
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string Key {
      get { return key_; }
      set {
        key_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "value" field.</summary>
    public const int ValueFieldNumber = 2;
    private string value_ = "";
    /// <summary>
    //// 属性值（值）
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string Value {
      get { return value_; }
      set {
        value_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as GseGameProperty);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(GseGameProperty other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (Key != other.Key) return false;
      if (Value != other.Value) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (Key.Length != 0) hash ^= Key.GetHashCode();
      if (Value.Length != 0) hash ^= Value.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (Key.Length != 0) {
        output.WriteRawTag(10);
        output.WriteString(Key);
      }
      if (Value.Length != 0) {
        output.WriteRawTag(18);
        output.WriteString(Value);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (Key.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(Key);
      }
      if (Value.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(Value);
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(GseGameProperty other) {
      if (other == null) {
        return;
      }
      if (other.Key.Length != 0) {
        Key = other.Key;
      }
      if (other.Value.Length != 0) {
        Value = other.Value;
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 10: {
            Key = input.ReadString();
            break;
          }
          case 18: {
            Value = input.ReadString();
            break;
          }
        }
      }
    }

  }

  /// <summary>
  ///
  ///部署的玩家游戏会话
  ///[rm-sdk-para]
  /// </summary>
  public sealed partial class GsePlacedPlayerSession : pb::IMessage<GsePlacedPlayerSession> {
    private static readonly pb::MessageParser<GsePlacedPlayerSession> _parser = new pb::MessageParser<GsePlacedPlayerSession>(() => new GsePlacedPlayerSession());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<GsePlacedPlayerSession> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::com.unity.mgobe.ProtoReflection.Descriptor.MessageTypes[84]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public GsePlacedPlayerSession() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public GsePlacedPlayerSession(GsePlacedPlayerSession other) : this() {
      playerId_ = other.playerId_;
      playerSessionId_ = other.playerSessionId_;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public GsePlacedPlayerSession Clone() {
      return new GsePlacedPlayerSession(this);
    }

    /// <summary>Field number for the "player_id" field.</summary>
    public const int PlayerIdFieldNumber = 1;
    private string playerId_ = "";
    /// <summary>
    //// 玩家Id
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string PlayerId {
      get { return playerId_; }
      set {
        playerId_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "player_session_id" field.</summary>
    public const int PlayerSessionIdFieldNumber = 2;
    private string playerSessionId_ = "";
    /// <summary>
    //// 玩家会话Id
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string PlayerSessionId {
      get { return playerSessionId_; }
      set {
        playerSessionId_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as GsePlacedPlayerSession);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(GsePlacedPlayerSession other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (PlayerId != other.PlayerId) return false;
      if (PlayerSessionId != other.PlayerSessionId) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (PlayerId.Length != 0) hash ^= PlayerId.GetHashCode();
      if (PlayerSessionId.Length != 0) hash ^= PlayerSessionId.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (PlayerId.Length != 0) {
        output.WriteRawTag(10);
        output.WriteString(PlayerId);
      }
      if (PlayerSessionId.Length != 0) {
        output.WriteRawTag(18);
        output.WriteString(PlayerSessionId);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (PlayerId.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(PlayerId);
      }
      if (PlayerSessionId.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(PlayerSessionId);
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(GsePlacedPlayerSession other) {
      if (other == null) {
        return;
      }
      if (other.PlayerId.Length != 0) {
        PlayerId = other.PlayerId;
      }
      if (other.PlayerSessionId.Length != 0) {
        PlayerSessionId = other.PlayerSessionId;
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 10: {
            PlayerId = input.ReadString();
            break;
          }
          case 18: {
            PlayerSessionId = input.ReadString();
            break;
          }
        }
      }
    }

  }

  /// <summary>
  ///
  ///游戏会话部署对象 Gse placement result: game session
  ///[rm-sdk-para]
  /// </summary>
  public sealed partial class GseGameSession : pb::IMessage<GseGameSession> {
    private static readonly pb::MessageParser<GseGameSession> _parser = new pb::MessageParser<GseGameSession>(() => new GseGameSession());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<GseGameSession> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::com.unity.mgobe.ProtoReflection.Descriptor.MessageTypes[85]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public GseGameSession() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public GseGameSession(GseGameSession other) : this() {
      placementId_ = other.placementId_;
      gameServerSessionQueueName_ = other.gameServerSessionQueueName_;
      playerLatencies_ = other.playerLatencies_.Clone();
      status_ = other.status_;
      dnsName_ = other.dnsName_;
      gameServerSessionId_ = other.gameServerSessionId_;
      gameServerSessionName_ = other.gameServerSessionName_;
      gameServerSessionRegion_ = other.gameServerSessionRegion_;
      gameProperties_ = other.gameProperties_.Clone();
      maximumPlayerSessionCount_ = other.maximumPlayerSessionCount_;
      gameServerSessionData_ = other.gameServerSessionData_;
      ipAddress_ = other.ipAddress_;
      port_ = other.port_;
      matchmakerData_ = other.matchmakerData_;
      placedPlayerSessions_ = other.placedPlayerSessions_.Clone();
      startTime_ = other.startTime_;
      endTime_ = other.endTime_;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public GseGameSession Clone() {
      return new GseGameSession(this);
    }

    /// <summary>Field number for the "placement_id" field.</summary>
    public const int PlacementIdFieldNumber = 1;
    private string placementId_ = "";
    /// <summary>
    //// 部署id
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string PlacementId {
      get { return placementId_; }
      set {
        placementId_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "game_server_session_queue_name" field.</summary>
    public const int GameServerSessionQueueNameFieldNumber = 2;
    private string gameServerSessionQueueName_ = "";
    /// <summary>
    //// 服务部署组名称
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string GameServerSessionQueueName {
      get { return gameServerSessionQueueName_; }
      set {
        gameServerSessionQueueName_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "player_latencies" field.</summary>
    public const int PlayerLatenciesFieldNumber = 3;
    private static readonly pb::FieldCodec<global::com.unity.mgobe.GsePlayerLatency> _repeated_playerLatencies_codec
        = pb::FieldCodec.ForMessage(26, global::com.unity.mgobe.GsePlayerLatency.Parser);
    private readonly pbc::RepeatedField<global::com.unity.mgobe.GsePlayerLatency> playerLatencies_ = new pbc::RepeatedField<global::com.unity.mgobe.GsePlayerLatency>();
    /// <summary>
    //// 玩家延迟
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::RepeatedField<global::com.unity.mgobe.GsePlayerLatency> PlayerLatencies {
      get { return playerLatencies_; }
    }

    /// <summary>Field number for the "status" field.</summary>
    public const int StatusFieldNumber = 4;
    private global::com.unity.mgobe.PlacementStatus status_ = 0;
    /// <summary>
    //// 服务部署状态
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::com.unity.mgobe.PlacementStatus Status {
      get { return status_; }
      set {
        status_ = value;
      }
    }

    /// <summary>Field number for the "dns_name" field.</summary>
    public const int DnsNameFieldNumber = 5;
    private string dnsName_ = "";
    /// <summary>
    //// 分配给正在运行游戏会话的实例的DNS标识符
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string DnsName {
      get { return dnsName_; }
      set {
        dnsName_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "game_server_session_id" field.</summary>
    public const int GameServerSessionIdFieldNumber = 6;
    private string gameServerSessionId_ = "";
    /// <summary>
    //// 游戏会话Id
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string GameServerSessionId {
      get { return gameServerSessionId_; }
      set {
        gameServerSessionId_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "game_server_session_name" field.</summary>
    public const int GameServerSessionNameFieldNumber = 7;
    private string gameServerSessionName_ = "";
    /// <summary>
    //// 游戏会话名称
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string GameServerSessionName {
      get { return gameServerSessionName_; }
      set {
        gameServerSessionName_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "game_server_session_region" field.</summary>
    public const int GameServerSessionRegionFieldNumber = 8;
    private string gameServerSessionRegion_ = "";
    /// <summary>
    //// 服务部署区域
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string GameServerSessionRegion {
      get { return gameServerSessionRegion_; }
      set {
        gameServerSessionRegion_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "game_properties" field.</summary>
    public const int GamePropertiesFieldNumber = 9;
    private static readonly pb::FieldCodec<global::com.unity.mgobe.GseGameProperty> _repeated_gameProperties_codec
        = pb::FieldCodec.ForMessage(74, global::com.unity.mgobe.GseGameProperty.Parser);
    private readonly pbc::RepeatedField<global::com.unity.mgobe.GseGameProperty> gameProperties_ = new pbc::RepeatedField<global::com.unity.mgobe.GseGameProperty>();
    /// <summary>
    //// 游戏属性
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::RepeatedField<global::com.unity.mgobe.GseGameProperty> GameProperties {
      get { return gameProperties_; }
    }

    /// <summary>Field number for the "maximum_player_session_count" field.</summary>
    public const int MaximumPlayerSessionCountFieldNumber = 10;
    private uint maximumPlayerSessionCount_;
    /// <summary>
    //// 最大玩家数量
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public uint MaximumPlayerSessionCount {
      get { return maximumPlayerSessionCount_; }
      set {
        maximumPlayerSessionCount_ = value;
      }
    }

    /// <summary>Field number for the "game_server_session_data" field.</summary>
    public const int GameServerSessionDataFieldNumber = 11;
    private string gameServerSessionData_ = "";
    /// <summary>
    //// 游戏会话数据
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string GameServerSessionData {
      get { return gameServerSessionData_; }
      set {
        gameServerSessionData_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "ip_address" field.</summary>
    public const int IpAddressFieldNumber = 12;
    private string ipAddress_ = "";
    /// <summary>
    //// 运行游戏会话的实例的IP地址
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string IpAddress {
      get { return ipAddress_; }
      set {
        ipAddress_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "port" field.</summary>
    public const int PortFieldNumber = 13;
    private uint port_;
    /// <summary>
    //// 运行游戏会话的实例的端口号
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public uint Port {
      get { return port_; }
      set {
        port_ = value;
      }
    }

    /// <summary>Field number for the "matchmaker_data" field.</summary>
    public const int MatchmakerDataFieldNumber = 14;
    private string matchmakerData_ = "";
    /// <summary>
    //// 游戏匹配数据
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string MatchmakerData {
      get { return matchmakerData_; }
      set {
        matchmakerData_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "placed_player_sessions" field.</summary>
    public const int PlacedPlayerSessionsFieldNumber = 15;
    private static readonly pb::FieldCodec<global::com.unity.mgobe.GsePlacedPlayerSession> _repeated_placedPlayerSessions_codec
        = pb::FieldCodec.ForMessage(122, global::com.unity.mgobe.GsePlacedPlayerSession.Parser);
    private readonly pbc::RepeatedField<global::com.unity.mgobe.GsePlacedPlayerSession> placedPlayerSessions_ = new pbc::RepeatedField<global::com.unity.mgobe.GsePlacedPlayerSession>();
    /// <summary>
    //// 部署的玩家游戏数据
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::RepeatedField<global::com.unity.mgobe.GsePlacedPlayerSession> PlacedPlayerSessions {
      get { return placedPlayerSessions_; }
    }

    /// <summary>Field number for the "start_time" field.</summary>
    public const int StartTimeFieldNumber = 16;
    private ulong startTime_;
    /// <summary>
    //// 开始时间
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ulong StartTime {
      get { return startTime_; }
      set {
        startTime_ = value;
      }
    }

    /// <summary>Field number for the "end_time" field.</summary>
    public const int EndTimeFieldNumber = 17;
    private ulong endTime_;
    /// <summary>
    //// 结束时间
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ulong EndTime {
      get { return endTime_; }
      set {
        endTime_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as GseGameSession);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(GseGameSession other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (PlacementId != other.PlacementId) return false;
      if (GameServerSessionQueueName != other.GameServerSessionQueueName) return false;
      if(!playerLatencies_.Equals(other.playerLatencies_)) return false;
      if (Status != other.Status) return false;
      if (DnsName != other.DnsName) return false;
      if (GameServerSessionId != other.GameServerSessionId) return false;
      if (GameServerSessionName != other.GameServerSessionName) return false;
      if (GameServerSessionRegion != other.GameServerSessionRegion) return false;
      if(!gameProperties_.Equals(other.gameProperties_)) return false;
      if (MaximumPlayerSessionCount != other.MaximumPlayerSessionCount) return false;
      if (GameServerSessionData != other.GameServerSessionData) return false;
      if (IpAddress != other.IpAddress) return false;
      if (Port != other.Port) return false;
      if (MatchmakerData != other.MatchmakerData) return false;
      if(!placedPlayerSessions_.Equals(other.placedPlayerSessions_)) return false;
      if (StartTime != other.StartTime) return false;
      if (EndTime != other.EndTime) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (PlacementId.Length != 0) hash ^= PlacementId.GetHashCode();
      if (GameServerSessionQueueName.Length != 0) hash ^= GameServerSessionQueueName.GetHashCode();
      hash ^= playerLatencies_.GetHashCode();
      if (Status != 0) hash ^= Status.GetHashCode();
      if (DnsName.Length != 0) hash ^= DnsName.GetHashCode();
      if (GameServerSessionId.Length != 0) hash ^= GameServerSessionId.GetHashCode();
      if (GameServerSessionName.Length != 0) hash ^= GameServerSessionName.GetHashCode();
      if (GameServerSessionRegion.Length != 0) hash ^= GameServerSessionRegion.GetHashCode();
      hash ^= gameProperties_.GetHashCode();
      if (MaximumPlayerSessionCount != 0) hash ^= MaximumPlayerSessionCount.GetHashCode();
      if (GameServerSessionData.Length != 0) hash ^= GameServerSessionData.GetHashCode();
      if (IpAddress.Length != 0) hash ^= IpAddress.GetHashCode();
      if (Port != 0) hash ^= Port.GetHashCode();
      if (MatchmakerData.Length != 0) hash ^= MatchmakerData.GetHashCode();
      hash ^= placedPlayerSessions_.GetHashCode();
      if (StartTime != 0UL) hash ^= StartTime.GetHashCode();
      if (EndTime != 0UL) hash ^= EndTime.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (PlacementId.Length != 0) {
        output.WriteRawTag(10);
        output.WriteString(PlacementId);
      }
      if (GameServerSessionQueueName.Length != 0) {
        output.WriteRawTag(18);
        output.WriteString(GameServerSessionQueueName);
      }
      playerLatencies_.WriteTo(output, _repeated_playerLatencies_codec);
      if (Status != 0) {
        output.WriteRawTag(32);
        output.WriteEnum((int) Status);
      }
      if (DnsName.Length != 0) {
        output.WriteRawTag(42);
        output.WriteString(DnsName);
      }
      if (GameServerSessionId.Length != 0) {
        output.WriteRawTag(50);
        output.WriteString(GameServerSessionId);
      }
      if (GameServerSessionName.Length != 0) {
        output.WriteRawTag(58);
        output.WriteString(GameServerSessionName);
      }
      if (GameServerSessionRegion.Length != 0) {
        output.WriteRawTag(66);
        output.WriteString(GameServerSessionRegion);
      }
      gameProperties_.WriteTo(output, _repeated_gameProperties_codec);
      if (MaximumPlayerSessionCount != 0) {
        output.WriteRawTag(80);
        output.WriteUInt32(MaximumPlayerSessionCount);
      }
      if (GameServerSessionData.Length != 0) {
        output.WriteRawTag(90);
        output.WriteString(GameServerSessionData);
      }
      if (IpAddress.Length != 0) {
        output.WriteRawTag(98);
        output.WriteString(IpAddress);
      }
      if (Port != 0) {
        output.WriteRawTag(104);
        output.WriteUInt32(Port);
      }
      if (MatchmakerData.Length != 0) {
        output.WriteRawTag(114);
        output.WriteString(MatchmakerData);
      }
      placedPlayerSessions_.WriteTo(output, _repeated_placedPlayerSessions_codec);
      if (StartTime != 0UL) {
        output.WriteRawTag(128, 1);
        output.WriteUInt64(StartTime);
      }
      if (EndTime != 0UL) {
        output.WriteRawTag(136, 1);
        output.WriteUInt64(EndTime);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (PlacementId.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(PlacementId);
      }
      if (GameServerSessionQueueName.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(GameServerSessionQueueName);
      }
      size += playerLatencies_.CalculateSize(_repeated_playerLatencies_codec);
      if (Status != 0) {
        size += 1 + pb::CodedOutputStream.ComputeEnumSize((int) Status);
      }
      if (DnsName.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(DnsName);
      }
      if (GameServerSessionId.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(GameServerSessionId);
      }
      if (GameServerSessionName.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(GameServerSessionName);
      }
      if (GameServerSessionRegion.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(GameServerSessionRegion);
      }
      size += gameProperties_.CalculateSize(_repeated_gameProperties_codec);
      if (MaximumPlayerSessionCount != 0) {
        size += 1 + pb::CodedOutputStream.ComputeUInt32Size(MaximumPlayerSessionCount);
      }
      if (GameServerSessionData.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(GameServerSessionData);
      }
      if (IpAddress.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(IpAddress);
      }
      if (Port != 0) {
        size += 1 + pb::CodedOutputStream.ComputeUInt32Size(Port);
      }
      if (MatchmakerData.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(MatchmakerData);
      }
      size += placedPlayerSessions_.CalculateSize(_repeated_placedPlayerSessions_codec);
      if (StartTime != 0UL) {
        size += 2 + pb::CodedOutputStream.ComputeUInt64Size(StartTime);
      }
      if (EndTime != 0UL) {
        size += 2 + pb::CodedOutputStream.ComputeUInt64Size(EndTime);
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(GseGameSession other) {
      if (other == null) {
        return;
      }
      if (other.PlacementId.Length != 0) {
        PlacementId = other.PlacementId;
      }
      if (other.GameServerSessionQueueName.Length != 0) {
        GameServerSessionQueueName = other.GameServerSessionQueueName;
      }
      playerLatencies_.Add(other.playerLatencies_);
      if (other.Status != 0) {
        Status = other.Status;
      }
      if (other.DnsName.Length != 0) {
        DnsName = other.DnsName;
      }
      if (other.GameServerSessionId.Length != 0) {
        GameServerSessionId = other.GameServerSessionId;
      }
      if (other.GameServerSessionName.Length != 0) {
        GameServerSessionName = other.GameServerSessionName;
      }
      if (other.GameServerSessionRegion.Length != 0) {
        GameServerSessionRegion = other.GameServerSessionRegion;
      }
      gameProperties_.Add(other.gameProperties_);
      if (other.MaximumPlayerSessionCount != 0) {
        MaximumPlayerSessionCount = other.MaximumPlayerSessionCount;
      }
      if (other.GameServerSessionData.Length != 0) {
        GameServerSessionData = other.GameServerSessionData;
      }
      if (other.IpAddress.Length != 0) {
        IpAddress = other.IpAddress;
      }
      if (other.Port != 0) {
        Port = other.Port;
      }
      if (other.MatchmakerData.Length != 0) {
        MatchmakerData = other.MatchmakerData;
      }
      placedPlayerSessions_.Add(other.placedPlayerSessions_);
      if (other.StartTime != 0UL) {
        StartTime = other.StartTime;
      }
      if (other.EndTime != 0UL) {
        EndTime = other.EndTime;
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 10: {
            PlacementId = input.ReadString();
            break;
          }
          case 18: {
            GameServerSessionQueueName = input.ReadString();
            break;
          }
          case 26: {
            playerLatencies_.AddEntriesFrom(input, _repeated_playerLatencies_codec);
            break;
          }
          case 32: {
            Status = (global::com.unity.mgobe.PlacementStatus) input.ReadEnum();
            break;
          }
          case 42: {
            DnsName = input.ReadString();
            break;
          }
          case 50: {
            GameServerSessionId = input.ReadString();
            break;
          }
          case 58: {
            GameServerSessionName = input.ReadString();
            break;
          }
          case 66: {
            GameServerSessionRegion = input.ReadString();
            break;
          }
          case 74: {
            gameProperties_.AddEntriesFrom(input, _repeated_gameProperties_codec);
            break;
          }
          case 80: {
            MaximumPlayerSessionCount = input.ReadUInt32();
            break;
          }
          case 90: {
            GameServerSessionData = input.ReadString();
            break;
          }
          case 98: {
            IpAddress = input.ReadString();
            break;
          }
          case 104: {
            Port = input.ReadUInt32();
            break;
          }
          case 114: {
            MatchmakerData = input.ReadString();
            break;
          }
          case 122: {
            placedPlayerSessions_.AddEntriesFrom(input, _repeated_placedPlayerSessions_codec);
            break;
          }
          case 128: {
            StartTime = input.ReadUInt64();
            break;
          }
          case 136: {
            EndTime = input.ReadUInt64();
            break;
          }
        }
      }
    }

  }

  /// <summary>
  ///
  ///放置（place）对局（match）请求
  /// </summary>
  public sealed partial class PlaceMatchReq : pb::IMessage<PlaceMatchReq> {
    private static readonly pb::MessageParser<PlaceMatchReq> _parser = new pb::MessageParser<PlaceMatchReq>(() => new PlaceMatchReq());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<PlaceMatchReq> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::com.unity.mgobe.ProtoReflection.Descriptor.MessageTypes[86]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public PlaceMatchReq() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public PlaceMatchReq(PlaceMatchReq other) : this() {
      seq_ = other.seq_;
      gameId_ = other.gameId_;
      matchId_ = other.matchId_;
      type_ = other.type_;
      jobBody_ = other.jobBody_;
      matchCode_ = other.matchCode_;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public PlaceMatchReq Clone() {
      return new PlaceMatchReq(this);
    }

    /// <summary>Field number for the "seq" field.</summary>
    public const int SeqFieldNumber = 1;
    private string seq_ = "";
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string Seq {
      get { return seq_; }
      set {
        seq_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "game_id" field.</summary>
    public const int GameIdFieldNumber = 2;
    private string gameId_ = "";
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string GameId {
      get { return gameId_; }
      set {
        gameId_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "match_id" field.</summary>
    public const int MatchIdFieldNumber = 3;
    private string matchId_ = "";
    /// <summary>
    //// 对局id
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string MatchId {
      get { return matchId_; }
      set {
        matchId_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "type" field.</summary>
    public const int TypeFieldNumber = 4;
    private global::com.unity.mgobe.MatchPlacementType type_ = 0;
    /// <summary>
    //// 对局放置类型 MP_MGOBE / MP_GSE / MP_THIRDPARTY
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::com.unity.mgobe.MatchPlacementType Type {
      get { return type_; }
      set {
        type_ = value;
      }
    }

    /// <summary>Field number for the "job_body" field.</summary>
    public const int JobBodyFieldNumber = 5;
    private pb::ByteString jobBody_ = pb::ByteString.Empty;
    /// <summary>
    //// 对局放置参数 MgobePlacementJob / GsePlacementJob / ThirdpartyPlacementJob
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pb::ByteString JobBody {
      get { return jobBody_; }
      set {
        jobBody_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "match_code" field.</summary>
    public const int MatchCodeFieldNumber = 6;
    private string matchCode_ = "";
    /// <summary>
    //// 匹配code
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string MatchCode {
      get { return matchCode_; }
      set {
        matchCode_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as PlaceMatchReq);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(PlaceMatchReq other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (Seq != other.Seq) return false;
      if (GameId != other.GameId) return false;
      if (MatchId != other.MatchId) return false;
      if (Type != other.Type) return false;
      if (JobBody != other.JobBody) return false;
      if (MatchCode != other.MatchCode) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (Seq.Length != 0) hash ^= Seq.GetHashCode();
      if (GameId.Length != 0) hash ^= GameId.GetHashCode();
      if (MatchId.Length != 0) hash ^= MatchId.GetHashCode();
      if (Type != 0) hash ^= Type.GetHashCode();
      if (JobBody.Length != 0) hash ^= JobBody.GetHashCode();
      if (MatchCode.Length != 0) hash ^= MatchCode.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (Seq.Length != 0) {
        output.WriteRawTag(10);
        output.WriteString(Seq);
      }
      if (GameId.Length != 0) {
        output.WriteRawTag(18);
        output.WriteString(GameId);
      }
      if (MatchId.Length != 0) {
        output.WriteRawTag(26);
        output.WriteString(MatchId);
      }
      if (Type != 0) {
        output.WriteRawTag(32);
        output.WriteEnum((int) Type);
      }
      if (JobBody.Length != 0) {
        output.WriteRawTag(42);
        output.WriteBytes(JobBody);
      }
      if (MatchCode.Length != 0) {
        output.WriteRawTag(50);
        output.WriteString(MatchCode);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (Seq.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(Seq);
      }
      if (GameId.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(GameId);
      }
      if (MatchId.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(MatchId);
      }
      if (Type != 0) {
        size += 1 + pb::CodedOutputStream.ComputeEnumSize((int) Type);
      }
      if (JobBody.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeBytesSize(JobBody);
      }
      if (MatchCode.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(MatchCode);
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(PlaceMatchReq other) {
      if (other == null) {
        return;
      }
      if (other.Seq.Length != 0) {
        Seq = other.Seq;
      }
      if (other.GameId.Length != 0) {
        GameId = other.GameId;
      }
      if (other.MatchId.Length != 0) {
        MatchId = other.MatchId;
      }
      if (other.Type != 0) {
        Type = other.Type;
      }
      if (other.JobBody.Length != 0) {
        JobBody = other.JobBody;
      }
      if (other.MatchCode.Length != 0) {
        MatchCode = other.MatchCode;
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 10: {
            Seq = input.ReadString();
            break;
          }
          case 18: {
            GameId = input.ReadString();
            break;
          }
          case 26: {
            MatchId = input.ReadString();
            break;
          }
          case 32: {
            Type = (global::com.unity.mgobe.MatchPlacementType) input.ReadEnum();
            break;
          }
          case 42: {
            JobBody = input.ReadBytes();
            break;
          }
          case 50: {
            MatchCode = input.ReadString();
            break;
          }
        }
      }
    }

  }

  /// <summary>
  //// 放置对局响应（异步，为空）
  /// </summary>
  public sealed partial class PlaceMatchRsp : pb::IMessage<PlaceMatchRsp> {
    private static readonly pb::MessageParser<PlaceMatchRsp> _parser = new pb::MessageParser<PlaceMatchRsp>(() => new PlaceMatchRsp());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<PlaceMatchRsp> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::com.unity.mgobe.ProtoReflection.Descriptor.MessageTypes[87]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public PlaceMatchRsp() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public PlaceMatchRsp(PlaceMatchRsp other) : this() {
      matchPlacementResult_ = other.matchPlacementResult_ != null ? other.matchPlacementResult_.Clone() : null;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public PlaceMatchRsp Clone() {
      return new PlaceMatchRsp(this);
    }

    /// <summary>Field number for the "match_placement_result" field.</summary>
    public const int MatchPlacementResultFieldNumber = 1;
    private global::com.unity.mgobe.MatchPlacementResult matchPlacementResult_;
    /// <summary>
    //// 同步模式，响应结果
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::com.unity.mgobe.MatchPlacementResult MatchPlacementResult {
      get { return matchPlacementResult_; }
      set {
        matchPlacementResult_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as PlaceMatchRsp);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(PlaceMatchRsp other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (!object.Equals(MatchPlacementResult, other.MatchPlacementResult)) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (matchPlacementResult_ != null) hash ^= MatchPlacementResult.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (matchPlacementResult_ != null) {
        output.WriteRawTag(10);
        output.WriteMessage(MatchPlacementResult);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (matchPlacementResult_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(MatchPlacementResult);
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(PlaceMatchRsp other) {
      if (other == null) {
        return;
      }
      if (other.matchPlacementResult_ != null) {
        if (matchPlacementResult_ == null) {
          MatchPlacementResult = new global::com.unity.mgobe.MatchPlacementResult();
        }
        MatchPlacementResult.MergeFrom(other.MatchPlacementResult);
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 10: {
            if (matchPlacementResult_ == null) {
              MatchPlacementResult = new global::com.unity.mgobe.MatchPlacementResult();
            }
            input.ReadMessage(MatchPlacementResult);
            break;
          }
        }
      }
    }

  }

  /// <summary>
  ///
  ///placeMatch结果
  ///MgobePlacementResult/GsePlacementResult/ThirdpartyPlacementResult
  ///[rm-sdk-para]
  /// </summary>
  public sealed partial class MatchPlacementResult : pb::IMessage<MatchPlacementResult> {
    private static readonly pb::MessageParser<MatchPlacementResult> _parser = new pb::MessageParser<MatchPlacementResult>(() => new MatchPlacementResult());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<MatchPlacementResult> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::com.unity.mgobe.ProtoReflection.Descriptor.MessageTypes[88]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public MatchPlacementResult() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public MatchPlacementResult(MatchPlacementResult other) : this() {
      seq_ = other.seq_;
      gameId_ = other.gameId_;
      matchId_ = other.matchId_;
      type_ = other.type_;
      status_ = other.status_;
      resultBody_ = other.resultBody_;
      errCode_ = other.errCode_;
      matchCode_ = other.matchCode_;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public MatchPlacementResult Clone() {
      return new MatchPlacementResult(this);
    }

    /// <summary>Field number for the "seq" field.</summary>
    public const int SeqFieldNumber = 1;
    private string seq_ = "";
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string Seq {
      get { return seq_; }
      set {
        seq_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "game_id" field.</summary>
    public const int GameIdFieldNumber = 2;
    private string gameId_ = "";
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string GameId {
      get { return gameId_; }
      set {
        gameId_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "match_id" field.</summary>
    public const int MatchIdFieldNumber = 3;
    private string matchId_ = "";
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string MatchId {
      get { return matchId_; }
      set {
        matchId_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "type" field.</summary>
    public const int TypeFieldNumber = 4;
    private global::com.unity.mgobe.MatchPlacementType type_ = 0;
    /// <summary>
    //// MP_MGOBE / MP_GSE / MP_THIRDPARTY
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::com.unity.mgobe.MatchPlacementType Type {
      get { return type_; }
      set {
        type_ = value;
      }
    }

    /// <summary>Field number for the "status" field.</summary>
    public const int StatusFieldNumber = 5;
    private global::com.unity.mgobe.PlacementStatus status_ = 0;
    /// <summary>
    //// 操作结果：成功、失败、超时...
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::com.unity.mgobe.PlacementStatus Status {
      get { return status_; }
      set {
        status_ = value;
      }
    }

    /// <summary>Field number for the "result_body" field.</summary>
    public const int ResultBodyFieldNumber = 6;
    private pb::ByteString resultBody_ = pb::ByteString.Empty;
    /// <summary>
    //// 如果成功 设置 result body
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pb::ByteString ResultBody {
      get { return resultBody_; }
      set {
        resultBody_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "err_code" field.</summary>
    public const int ErrCodeFieldNumber = 7;
    private int errCode_;
    /// <summary>
    //// 如果失败，设置 business err code
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int ErrCode {
      get { return errCode_; }
      set {
        errCode_ = value;
      }
    }

    /// <summary>Field number for the "match_code" field.</summary>
    public const int MatchCodeFieldNumber = 8;
    private string matchCode_ = "";
    /// <summary>
    //// 匹配code
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string MatchCode {
      get { return matchCode_; }
      set {
        matchCode_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as MatchPlacementResult);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(MatchPlacementResult other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (Seq != other.Seq) return false;
      if (GameId != other.GameId) return false;
      if (MatchId != other.MatchId) return false;
      if (Type != other.Type) return false;
      if (Status != other.Status) return false;
      if (ResultBody != other.ResultBody) return false;
      if (ErrCode != other.ErrCode) return false;
      if (MatchCode != other.MatchCode) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (Seq.Length != 0) hash ^= Seq.GetHashCode();
      if (GameId.Length != 0) hash ^= GameId.GetHashCode();
      if (MatchId.Length != 0) hash ^= MatchId.GetHashCode();
      if (Type != 0) hash ^= Type.GetHashCode();
      if (Status != 0) hash ^= Status.GetHashCode();
      if (ResultBody.Length != 0) hash ^= ResultBody.GetHashCode();
      if (ErrCode != 0) hash ^= ErrCode.GetHashCode();
      if (MatchCode.Length != 0) hash ^= MatchCode.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (Seq.Length != 0) {
        output.WriteRawTag(10);
        output.WriteString(Seq);
      }
      if (GameId.Length != 0) {
        output.WriteRawTag(18);
        output.WriteString(GameId);
      }
      if (MatchId.Length != 0) {
        output.WriteRawTag(26);
        output.WriteString(MatchId);
      }
      if (Type != 0) {
        output.WriteRawTag(32);
        output.WriteEnum((int) Type);
      }
      if (Status != 0) {
        output.WriteRawTag(40);
        output.WriteEnum((int) Status);
      }
      if (ResultBody.Length != 0) {
        output.WriteRawTag(50);
        output.WriteBytes(ResultBody);
      }
      if (ErrCode != 0) {
        output.WriteRawTag(56);
        output.WriteInt32(ErrCode);
      }
      if (MatchCode.Length != 0) {
        output.WriteRawTag(66);
        output.WriteString(MatchCode);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (Seq.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(Seq);
      }
      if (GameId.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(GameId);
      }
      if (MatchId.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(MatchId);
      }
      if (Type != 0) {
        size += 1 + pb::CodedOutputStream.ComputeEnumSize((int) Type);
      }
      if (Status != 0) {
        size += 1 + pb::CodedOutputStream.ComputeEnumSize((int) Status);
      }
      if (ResultBody.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeBytesSize(ResultBody);
      }
      if (ErrCode != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(ErrCode);
      }
      if (MatchCode.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(MatchCode);
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(MatchPlacementResult other) {
      if (other == null) {
        return;
      }
      if (other.Seq.Length != 0) {
        Seq = other.Seq;
      }
      if (other.GameId.Length != 0) {
        GameId = other.GameId;
      }
      if (other.MatchId.Length != 0) {
        MatchId = other.MatchId;
      }
      if (other.Type != 0) {
        Type = other.Type;
      }
      if (other.Status != 0) {
        Status = other.Status;
      }
      if (other.ResultBody.Length != 0) {
        ResultBody = other.ResultBody;
      }
      if (other.ErrCode != 0) {
        ErrCode = other.ErrCode;
      }
      if (other.MatchCode.Length != 0) {
        MatchCode = other.MatchCode;
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 10: {
            Seq = input.ReadString();
            break;
          }
          case 18: {
            GameId = input.ReadString();
            break;
          }
          case 26: {
            MatchId = input.ReadString();
            break;
          }
          case 32: {
            Type = (global::com.unity.mgobe.MatchPlacementType) input.ReadEnum();
            break;
          }
          case 40: {
            Status = (global::com.unity.mgobe.PlacementStatus) input.ReadEnum();
            break;
          }
          case 50: {
            ResultBody = input.ReadBytes();
            break;
          }
          case 56: {
            ErrCode = input.ReadInt32();
            break;
          }
          case 66: {
            MatchCode = input.ReadString();
            break;
          }
        }
      }
    }

  }

  /// <summary>
  //// 异步更新placeMatch结果
  /// </summary>
  public sealed partial class UpdateMatchPlacementResultReq : pb::IMessage<UpdateMatchPlacementResultReq> {
    private static readonly pb::MessageParser<UpdateMatchPlacementResultReq> _parser = new pb::MessageParser<UpdateMatchPlacementResultReq>(() => new UpdateMatchPlacementResultReq());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<UpdateMatchPlacementResultReq> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::com.unity.mgobe.ProtoReflection.Descriptor.MessageTypes[89]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public UpdateMatchPlacementResultReq() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public UpdateMatchPlacementResultReq(UpdateMatchPlacementResultReq other) : this() {
      matchPlacementResult_ = other.matchPlacementResult_ != null ? other.matchPlacementResult_.Clone() : null;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public UpdateMatchPlacementResultReq Clone() {
      return new UpdateMatchPlacementResultReq(this);
    }

    /// <summary>Field number for the "match_placement_result" field.</summary>
    public const int MatchPlacementResultFieldNumber = 1;
    private global::com.unity.mgobe.MatchPlacementResult matchPlacementResult_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::com.unity.mgobe.MatchPlacementResult MatchPlacementResult {
      get { return matchPlacementResult_; }
      set {
        matchPlacementResult_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as UpdateMatchPlacementResultReq);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(UpdateMatchPlacementResultReq other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (!object.Equals(MatchPlacementResult, other.MatchPlacementResult)) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (matchPlacementResult_ != null) hash ^= MatchPlacementResult.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (matchPlacementResult_ != null) {
        output.WriteRawTag(10);
        output.WriteMessage(MatchPlacementResult);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (matchPlacementResult_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(MatchPlacementResult);
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(UpdateMatchPlacementResultReq other) {
      if (other == null) {
        return;
      }
      if (other.matchPlacementResult_ != null) {
        if (matchPlacementResult_ == null) {
          MatchPlacementResult = new global::com.unity.mgobe.MatchPlacementResult();
        }
        MatchPlacementResult.MergeFrom(other.MatchPlacementResult);
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 10: {
            if (matchPlacementResult_ == null) {
              MatchPlacementResult = new global::com.unity.mgobe.MatchPlacementResult();
            }
            input.ReadMessage(MatchPlacementResult);
            break;
          }
        }
      }
    }

  }

  /// <summary>
  //// 异步更新placeMatch结果响应
  /// </summary>
  public sealed partial class UpdateMatchPlacementResultRsp : pb::IMessage<UpdateMatchPlacementResultRsp> {
    private static readonly pb::MessageParser<UpdateMatchPlacementResultRsp> _parser = new pb::MessageParser<UpdateMatchPlacementResultRsp>(() => new UpdateMatchPlacementResultRsp());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<UpdateMatchPlacementResultRsp> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::com.unity.mgobe.ProtoReflection.Descriptor.MessageTypes[90]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public UpdateMatchPlacementResultRsp() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public UpdateMatchPlacementResultRsp(UpdateMatchPlacementResultRsp other) : this() {
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public UpdateMatchPlacementResultRsp Clone() {
      return new UpdateMatchPlacementResultRsp(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as UpdateMatchPlacementResultRsp);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(UpdateMatchPlacementResultRsp other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(UpdateMatchPlacementResultRsp other) {
      if (other == null) {
        return;
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
        }
      }
    }

  }

  /// <summary>
  ///
  ///cmq message
  ///[rm-sdk-para]
  /// </summary>
  public sealed partial class CmqPlacementResult : pb::IMessage<CmqPlacementResult> {
    private static readonly pb::MessageParser<CmqPlacementResult> _parser = new pb::MessageParser<CmqPlacementResult>(() => new CmqPlacementResult());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<CmqPlacementResult> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::com.unity.mgobe.ProtoReflection.Descriptor.MessageTypes[91]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public CmqPlacementResult() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public CmqPlacementResult(CmqPlacementResult other) : this() {
      placementId_ = other.placementId_;
      placementType_ = other.placementType_;
      resultBody_ = other.resultBody_;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public CmqPlacementResult Clone() {
      return new CmqPlacementResult(this);
    }

    /// <summary>Field number for the "placement_id" field.</summary>
    public const int PlacementIdFieldNumber = 1;
    private string placementId_ = "";
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string PlacementId {
      get { return placementId_; }
      set {
        placementId_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "placement_type" field.</summary>
    public const int PlacementTypeFieldNumber = 2;
    private global::com.unity.mgobe.MatchPlacementType placementType_ = 0;
    /// <summary>
    //// MP_MGOBE / MP_GSE / MP_THIRDPARTY
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::com.unity.mgobe.MatchPlacementType PlacementType {
      get { return placementType_; }
      set {
        placementType_ = value;
      }
    }

    /// <summary>Field number for the "result_body" field.</summary>
    public const int ResultBodyFieldNumber = 3;
    private pb::ByteString resultBody_ = pb::ByteString.Empty;
    /// <summary>
    //// MgobePlacementResult/GsePlacementResult/ThirdpartyPlacementResult
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pb::ByteString ResultBody {
      get { return resultBody_; }
      set {
        resultBody_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as CmqPlacementResult);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(CmqPlacementResult other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (PlacementId != other.PlacementId) return false;
      if (PlacementType != other.PlacementType) return false;
      if (ResultBody != other.ResultBody) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (PlacementId.Length != 0) hash ^= PlacementId.GetHashCode();
      if (PlacementType != 0) hash ^= PlacementType.GetHashCode();
      if (ResultBody.Length != 0) hash ^= ResultBody.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (PlacementId.Length != 0) {
        output.WriteRawTag(10);
        output.WriteString(PlacementId);
      }
      if (PlacementType != 0) {
        output.WriteRawTag(16);
        output.WriteEnum((int) PlacementType);
      }
      if (ResultBody.Length != 0) {
        output.WriteRawTag(26);
        output.WriteBytes(ResultBody);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (PlacementId.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(PlacementId);
      }
      if (PlacementType != 0) {
        size += 1 + pb::CodedOutputStream.ComputeEnumSize((int) PlacementType);
      }
      if (ResultBody.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeBytesSize(ResultBody);
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(CmqPlacementResult other) {
      if (other == null) {
        return;
      }
      if (other.PlacementId.Length != 0) {
        PlacementId = other.PlacementId;
      }
      if (other.PlacementType != 0) {
        PlacementType = other.PlacementType;
      }
      if (other.ResultBody.Length != 0) {
        ResultBody = other.ResultBody;
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 10: {
            PlacementId = input.ReadString();
            break;
          }
          case 16: {
            PlacementType = (global::com.unity.mgobe.MatchPlacementType) input.ReadEnum();
            break;
          }
          case 26: {
            ResultBody = input.ReadBytes();
            break;
          }
        }
      }
    }

  }

  /// <summary>
  ///
  ///玩家匹配请求
  /// </summary>
  public sealed partial class MatchPlayersReq : pb::IMessage<MatchPlayersReq> {
    private static readonly pb::MessageParser<MatchPlayersReq> _parser = new pb::MessageParser<MatchPlayersReq>(() => new MatchPlayersReq());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<MatchPlayersReq> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::com.unity.mgobe.ProtoReflection.Descriptor.MessageTypes[92]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public MatchPlayersReq() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public MatchPlayersReq(MatchPlayersReq other) : this() {
      matchCode_ = other.matchCode_;
      playerInfo_ = other.playerInfo_ != null ? other.playerInfo_.Clone() : null;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public MatchPlayersReq Clone() {
      return new MatchPlayersReq(this);
    }

    /// <summary>Field number for the "match_code" field.</summary>
    public const int MatchCodeFieldNumber = 2;
    private string matchCode_ = "";
    /// <summary>
    //// 玩法id
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string MatchCode {
      get { return matchCode_; }
      set {
        matchCode_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "player_info" field.</summary>
    public const int PlayerInfoFieldNumber = 3;
    private global::com.unity.mgobe.MatchPlayerInfo playerInfo_;
    /// <summary>
    //// 匹配的玩家信息
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::com.unity.mgobe.MatchPlayerInfo PlayerInfo {
      get { return playerInfo_; }
      set {
        playerInfo_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as MatchPlayersReq);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(MatchPlayersReq other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (MatchCode != other.MatchCode) return false;
      if (!object.Equals(PlayerInfo, other.PlayerInfo)) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (MatchCode.Length != 0) hash ^= MatchCode.GetHashCode();
      if (playerInfo_ != null) hash ^= PlayerInfo.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (MatchCode.Length != 0) {
        output.WriteRawTag(18);
        output.WriteString(MatchCode);
      }
      if (playerInfo_ != null) {
        output.WriteRawTag(26);
        output.WriteMessage(PlayerInfo);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (MatchCode.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(MatchCode);
      }
      if (playerInfo_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(PlayerInfo);
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(MatchPlayersReq other) {
      if (other == null) {
        return;
      }
      if (other.MatchCode.Length != 0) {
        MatchCode = other.MatchCode;
      }
      if (other.playerInfo_ != null) {
        if (playerInfo_ == null) {
          PlayerInfo = new global::com.unity.mgobe.MatchPlayerInfo();
        }
        PlayerInfo.MergeFrom(other.PlayerInfo);
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 18: {
            MatchCode = input.ReadString();
            break;
          }
          case 26: {
            if (playerInfo_ == null) {
              PlayerInfo = new global::com.unity.mgobe.MatchPlayerInfo();
            }
            input.ReadMessage(PlayerInfo);
            break;
          }
        }
      }
    }

  }

  /// <summary>
  ///
  ///玩家匹配响应
  /// </summary>
  public sealed partial class MatchPlayersRsp : pb::IMessage<MatchPlayersRsp> {
    private static readonly pb::MessageParser<MatchPlayersRsp> _parser = new pb::MessageParser<MatchPlayersRsp>(() => new MatchPlayersRsp());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<MatchPlayersRsp> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::com.unity.mgobe.ProtoReflection.Descriptor.MessageTypes[93]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public MatchPlayersRsp() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public MatchPlayersRsp(MatchPlayersRsp other) : this() {
      matchCode_ = other.matchCode_;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public MatchPlayersRsp Clone() {
      return new MatchPlayersRsp(this);
    }

    /// <summary>Field number for the "match_code" field.</summary>
    public const int MatchCodeFieldNumber = 1;
    private string matchCode_ = "";
    /// <summary>
    //// 玩法id
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string MatchCode {
      get { return matchCode_; }
      set {
        matchCode_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as MatchPlayersRsp);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(MatchPlayersRsp other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (MatchCode != other.MatchCode) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (MatchCode.Length != 0) hash ^= MatchCode.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (MatchCode.Length != 0) {
        output.WriteRawTag(10);
        output.WriteString(MatchCode);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (MatchCode.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(MatchCode);
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(MatchPlayersRsp other) {
      if (other == null) {
        return;
      }
      if (other.MatchCode.Length != 0) {
        MatchCode = other.MatchCode;
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 10: {
            MatchCode = input.ReadString();
            break;
          }
        }
      }
    }

  }

  /// <summary>
  ///
  ///玩家组匹配请求
  /// </summary>
  public sealed partial class MatchGroupReq : pb::IMessage<MatchGroupReq> {
    private static readonly pb::MessageParser<MatchGroupReq> _parser = new pb::MessageParser<MatchGroupReq>(() => new MatchGroupReq());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<MatchGroupReq> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::com.unity.mgobe.ProtoReflection.Descriptor.MessageTypes[94]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public MatchGroupReq() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public MatchGroupReq(MatchGroupReq other) : this() {
      matchCode_ = other.matchCode_;
      playerInfoList_ = other.playerInfoList_.Clone();
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public MatchGroupReq Clone() {
      return new MatchGroupReq(this);
    }

    /// <summary>Field number for the "match_code" field.</summary>
    public const int MatchCodeFieldNumber = 1;
    private string matchCode_ = "";
    /// <summary>
    //// 玩法id
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string MatchCode {
      get { return matchCode_; }
      set {
        matchCode_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "player_info_list" field.</summary>
    public const int PlayerInfoListFieldNumber = 2;
    private static readonly pb::FieldCodec<global::com.unity.mgobe.MatchGroupPlayerInfo> _repeated_playerInfoList_codec
        = pb::FieldCodec.ForMessage(18, global::com.unity.mgobe.MatchGroupPlayerInfo.Parser);
    private readonly pbc::RepeatedField<global::com.unity.mgobe.MatchGroupPlayerInfo> playerInfoList_ = new pbc::RepeatedField<global::com.unity.mgobe.MatchGroupPlayerInfo>();
    /// <summary>
    //// 好友列表
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::RepeatedField<global::com.unity.mgobe.MatchGroupPlayerInfo> PlayerInfoList {
      get { return playerInfoList_; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as MatchGroupReq);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(MatchGroupReq other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (MatchCode != other.MatchCode) return false;
      if(!playerInfoList_.Equals(other.playerInfoList_)) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (MatchCode.Length != 0) hash ^= MatchCode.GetHashCode();
      hash ^= playerInfoList_.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (MatchCode.Length != 0) {
        output.WriteRawTag(10);
        output.WriteString(MatchCode);
      }
      playerInfoList_.WriteTo(output, _repeated_playerInfoList_codec);
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (MatchCode.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(MatchCode);
      }
      size += playerInfoList_.CalculateSize(_repeated_playerInfoList_codec);
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(MatchGroupReq other) {
      if (other == null) {
        return;
      }
      if (other.MatchCode.Length != 0) {
        MatchCode = other.MatchCode;
      }
      playerInfoList_.Add(other.playerInfoList_);
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 10: {
            MatchCode = input.ReadString();
            break;
          }
          case 18: {
            playerInfoList_.AddEntriesFrom(input, _repeated_playerInfoList_codec);
            break;
          }
        }
      }
    }

  }

  /// <summary>
  ///
  ///玩家组匹配响应
  /// </summary>
  public sealed partial class MatchGroupRsp : pb::IMessage<MatchGroupRsp> {
    private static readonly pb::MessageParser<MatchGroupRsp> _parser = new pb::MessageParser<MatchGroupRsp>(() => new MatchGroupRsp());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<MatchGroupRsp> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::com.unity.mgobe.ProtoReflection.Descriptor.MessageTypes[95]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public MatchGroupRsp() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public MatchGroupRsp(MatchGroupRsp other) : this() {
      matchCode_ = other.matchCode_;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public MatchGroupRsp Clone() {
      return new MatchGroupRsp(this);
    }

    /// <summary>Field number for the "match_code" field.</summary>
    public const int MatchCodeFieldNumber = 1;
    private string matchCode_ = "";
    /// <summary>
    //// 玩法id
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string MatchCode {
      get { return matchCode_; }
      set {
        matchCode_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as MatchGroupRsp);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(MatchGroupRsp other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (MatchCode != other.MatchCode) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (MatchCode.Length != 0) hash ^= MatchCode.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (MatchCode.Length != 0) {
        output.WriteRawTag(10);
        output.WriteString(MatchCode);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (MatchCode.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(MatchCode);
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(MatchGroupRsp other) {
      if (other == null) {
        return;
      }
      if (other.MatchCode.Length != 0) {
        MatchCode = other.MatchCode;
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 10: {
            MatchCode = input.ReadString();
            break;
          }
        }
      }
    }

  }

  /// <summary>
  ///
  ///匹配进度查询
  /// </summary>
  public sealed partial class DescribeMatchReq : pb::IMessage<DescribeMatchReq> {
    private static readonly pb::MessageParser<DescribeMatchReq> _parser = new pb::MessageParser<DescribeMatchReq>(() => new DescribeMatchReq());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<DescribeMatchReq> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::com.unity.mgobe.ProtoReflection.Descriptor.MessageTypes[96]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public DescribeMatchReq() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public DescribeMatchReq(DescribeMatchReq other) : this() {
      requestIdList_ = other.requestIdList_.Clone();
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public DescribeMatchReq Clone() {
      return new DescribeMatchReq(this);
    }

    /// <summary>Field number for the "request_id_list" field.</summary>
    public const int RequestIdListFieldNumber = 1;
    private static readonly pb::FieldCodec<string> _repeated_requestIdList_codec
        = pb::FieldCodec.ForString(10);
    private readonly pbc::RepeatedField<string> requestIdList_ = new pbc::RepeatedField<string>();
    /// <summary>
    //// 批量请求id进度查询
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::RepeatedField<string> RequestIdList {
      get { return requestIdList_; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as DescribeMatchReq);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(DescribeMatchReq other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if(!requestIdList_.Equals(other.requestIdList_)) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      hash ^= requestIdList_.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      requestIdList_.WriteTo(output, _repeated_requestIdList_codec);
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      size += requestIdList_.CalculateSize(_repeated_requestIdList_codec);
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(DescribeMatchReq other) {
      if (other == null) {
        return;
      }
      requestIdList_.Add(other.requestIdList_);
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 10: {
            requestIdList_.AddEntriesFrom(input, _repeated_requestIdList_codec);
            break;
          }
        }
      }
    }

  }

  public sealed partial class MatchProgress : pb::IMessage<MatchProgress> {
    private static readonly pb::MessageParser<MatchProgress> _parser = new pb::MessageParser<MatchProgress>(() => new MatchProgress());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<MatchProgress> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::com.unity.mgobe.ProtoReflection.Descriptor.MessageTypes[97]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public MatchProgress() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public MatchProgress(MatchProgress other) : this() {
      requestId_ = other.requestId_;
      playerIdList_ = other.playerIdList_.Clone();
      playerInfoList_ = other.playerInfoList_.Clone();
      status_ = other.status_;
      eventType_ = other.eventType_;
      playerInfoSuccessList_ = other.playerInfoSuccessList_.Clone();
      teamInfoList_ = other.teamInfoList_.Clone();
      completedTime_ = other.completedTime_;
      startMatchTime_ = other.startMatchTime_;
      gameSessionConnectionInfo_ = other.gameSessionConnectionInfo_ != null ? other.gameSessionConnectionInfo_.Clone() : null;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public MatchProgress Clone() {
      return new MatchProgress(this);
    }

    /// <summary>Field number for the "request_id" field.</summary>
    public const int RequestIdFieldNumber = 1;
    private string requestId_ = "";
    /// <summary>
    //// 请求id
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string RequestId {
      get { return requestId_; }
      set {
        requestId_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "player_id_list" field.</summary>
    public const int PlayerIdListFieldNumber = 2;
    private static readonly pb::FieldCodec<string> _repeated_playerIdList_codec
        = pb::FieldCodec.ForString(18);
    private readonly pbc::RepeatedField<string> playerIdList_ = new pbc::RepeatedField<string>();
    /// <summary>
    //// 匹配成功的玩家id列表
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::RepeatedField<string> PlayerIdList {
      get { return playerIdList_; }
    }

    /// <summary>Field number for the "player_info_list" field.</summary>
    public const int PlayerInfoListFieldNumber = 3;
    private static readonly pb::FieldCodec<global::com.unity.mgobe.MatchPlayerInfo> _repeated_playerInfoList_codec
        = pb::FieldCodec.ForMessage(26, global::com.unity.mgobe.MatchPlayerInfo.Parser);
    private readonly pbc::RepeatedField<global::com.unity.mgobe.MatchPlayerInfo> playerInfoList_ = new pbc::RepeatedField<global::com.unity.mgobe.MatchPlayerInfo>();
    /// <summary>
    //// requestId对应的玩家信息列表
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::RepeatedField<global::com.unity.mgobe.MatchPlayerInfo> PlayerInfoList {
      get { return playerInfoList_; }
    }

    /// <summary>Field number for the "status" field.</summary>
    public const int StatusFieldNumber = 4;
    private string status_ = "";
    /// <summary>
    //// 匹配状态：SEARCHING / COMPLETED / FAILED / CANCELLED / TIMED_OUT
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string Status {
      get { return status_; }
      set {
        status_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "event_type" field.</summary>
    public const int EventTypeFieldNumber = 5;
    private uint eventType_;
    /// <summary>
    //// 事件类型：0表示每个requestId使用，1 表示全部匹配上的
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public uint EventType {
      get { return eventType_; }
      set {
        eventType_ = value;
      }
    }

    /// <summary>Field number for the "player_info_success_list" field.</summary>
    public const int PlayerInfoSuccessListFieldNumber = 6;
    private static readonly pb::FieldCodec<global::com.unity.mgobe.PlayerInfo> _repeated_playerInfoSuccessList_codec
        = pb::FieldCodec.ForMessage(50, global::com.unity.mgobe.PlayerInfo.Parser);
    private readonly pbc::RepeatedField<global::com.unity.mgobe.PlayerInfo> playerInfoSuccessList_ = new pbc::RepeatedField<global::com.unity.mgobe.PlayerInfo>();
    /// <summary>
    //// 当 status 为 COMPLETED 并且 event_type 为 1 时 传递总的玩家信息
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::RepeatedField<global::com.unity.mgobe.PlayerInfo> PlayerInfoSuccessList {
      get { return playerInfoSuccessList_; }
    }

    /// <summary>Field number for the "team_info_list" field.</summary>
    public const int TeamInfoListFieldNumber = 7;
    private static readonly pb::FieldCodec<global::com.unity.mgobe.TeamInfo> _repeated_teamInfoList_codec
        = pb::FieldCodec.ForMessage(58, global::com.unity.mgobe.TeamInfo.Parser);
    private readonly pbc::RepeatedField<global::com.unity.mgobe.TeamInfo> teamInfoList_ = new pbc::RepeatedField<global::com.unity.mgobe.TeamInfo>();
    /// <summary>
    //// 当 status 为 COMPLETED 并且 event_type 为 1 时 队伍信息列表
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::RepeatedField<global::com.unity.mgobe.TeamInfo> TeamInfoList {
      get { return teamInfoList_; }
    }

    /// <summary>Field number for the "completed_time" field.</summary>
    public const int CompletedTimeFieldNumber = 8;
    private ulong completedTime_;
    /// <summary>
    //// 当 status 为 COMPLETED 并且 event_type 为 1 时 该字段表示匹配完成时间
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ulong CompletedTime {
      get { return completedTime_; }
      set {
        completedTime_ = value;
      }
    }

    /// <summary>Field number for the "start_match_time" field.</summary>
    public const int StartMatchTimeFieldNumber = 9;
    private ulong startMatchTime_;
    /// <summary>
    //// 开始匹配的时间
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ulong StartMatchTime {
      get { return startMatchTime_; }
      set {
        startMatchTime_ = value;
      }
    }

    /// <summary>Field number for the "game_session_connection_info" field.</summary>
    public const int GameSessionConnectionInfoFieldNumber = 10;
    private global::com.unity.mgobe.GameSessionConnectionInfo gameSessionConnectionInfo_;
    /// <summary>
    //// 游戏信息 当 status 为 COMPLETED 时 该字段才有具体数据
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::com.unity.mgobe.GameSessionConnectionInfo GameSessionConnectionInfo {
      get { return gameSessionConnectionInfo_; }
      set {
        gameSessionConnectionInfo_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as MatchProgress);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(MatchProgress other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (RequestId != other.RequestId) return false;
      if(!playerIdList_.Equals(other.playerIdList_)) return false;
      if(!playerInfoList_.Equals(other.playerInfoList_)) return false;
      if (Status != other.Status) return false;
      if (EventType != other.EventType) return false;
      if(!playerInfoSuccessList_.Equals(other.playerInfoSuccessList_)) return false;
      if(!teamInfoList_.Equals(other.teamInfoList_)) return false;
      if (CompletedTime != other.CompletedTime) return false;
      if (StartMatchTime != other.StartMatchTime) return false;
      if (!object.Equals(GameSessionConnectionInfo, other.GameSessionConnectionInfo)) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (RequestId.Length != 0) hash ^= RequestId.GetHashCode();
      hash ^= playerIdList_.GetHashCode();
      hash ^= playerInfoList_.GetHashCode();
      if (Status.Length != 0) hash ^= Status.GetHashCode();
      if (EventType != 0) hash ^= EventType.GetHashCode();
      hash ^= playerInfoSuccessList_.GetHashCode();
      hash ^= teamInfoList_.GetHashCode();
      if (CompletedTime != 0UL) hash ^= CompletedTime.GetHashCode();
      if (StartMatchTime != 0UL) hash ^= StartMatchTime.GetHashCode();
      if (gameSessionConnectionInfo_ != null) hash ^= GameSessionConnectionInfo.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (RequestId.Length != 0) {
        output.WriteRawTag(10);
        output.WriteString(RequestId);
      }
      playerIdList_.WriteTo(output, _repeated_playerIdList_codec);
      playerInfoList_.WriteTo(output, _repeated_playerInfoList_codec);
      if (Status.Length != 0) {
        output.WriteRawTag(34);
        output.WriteString(Status);
      }
      if (EventType != 0) {
        output.WriteRawTag(40);
        output.WriteUInt32(EventType);
      }
      playerInfoSuccessList_.WriteTo(output, _repeated_playerInfoSuccessList_codec);
      teamInfoList_.WriteTo(output, _repeated_teamInfoList_codec);
      if (CompletedTime != 0UL) {
        output.WriteRawTag(64);
        output.WriteUInt64(CompletedTime);
      }
      if (StartMatchTime != 0UL) {
        output.WriteRawTag(72);
        output.WriteUInt64(StartMatchTime);
      }
      if (gameSessionConnectionInfo_ != null) {
        output.WriteRawTag(82);
        output.WriteMessage(GameSessionConnectionInfo);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (RequestId.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(RequestId);
      }
      size += playerIdList_.CalculateSize(_repeated_playerIdList_codec);
      size += playerInfoList_.CalculateSize(_repeated_playerInfoList_codec);
      if (Status.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(Status);
      }
      if (EventType != 0) {
        size += 1 + pb::CodedOutputStream.ComputeUInt32Size(EventType);
      }
      size += playerInfoSuccessList_.CalculateSize(_repeated_playerInfoSuccessList_codec);
      size += teamInfoList_.CalculateSize(_repeated_teamInfoList_codec);
      if (CompletedTime != 0UL) {
        size += 1 + pb::CodedOutputStream.ComputeUInt64Size(CompletedTime);
      }
      if (StartMatchTime != 0UL) {
        size += 1 + pb::CodedOutputStream.ComputeUInt64Size(StartMatchTime);
      }
      if (gameSessionConnectionInfo_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(GameSessionConnectionInfo);
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(MatchProgress other) {
      if (other == null) {
        return;
      }
      if (other.RequestId.Length != 0) {
        RequestId = other.RequestId;
      }
      playerIdList_.Add(other.playerIdList_);
      playerInfoList_.Add(other.playerInfoList_);
      if (other.Status.Length != 0) {
        Status = other.Status;
      }
      if (other.EventType != 0) {
        EventType = other.EventType;
      }
      playerInfoSuccessList_.Add(other.playerInfoSuccessList_);
      teamInfoList_.Add(other.teamInfoList_);
      if (other.CompletedTime != 0UL) {
        CompletedTime = other.CompletedTime;
      }
      if (other.StartMatchTime != 0UL) {
        StartMatchTime = other.StartMatchTime;
      }
      if (other.gameSessionConnectionInfo_ != null) {
        if (gameSessionConnectionInfo_ == null) {
          GameSessionConnectionInfo = new global::com.unity.mgobe.GameSessionConnectionInfo();
        }
        GameSessionConnectionInfo.MergeFrom(other.GameSessionConnectionInfo);
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 10: {
            RequestId = input.ReadString();
            break;
          }
          case 18: {
            playerIdList_.AddEntriesFrom(input, _repeated_playerIdList_codec);
            break;
          }
          case 26: {
            playerInfoList_.AddEntriesFrom(input, _repeated_playerInfoList_codec);
            break;
          }
          case 34: {
            Status = input.ReadString();
            break;
          }
          case 40: {
            EventType = input.ReadUInt32();
            break;
          }
          case 50: {
            playerInfoSuccessList_.AddEntriesFrom(input, _repeated_playerInfoSuccessList_codec);
            break;
          }
          case 58: {
            teamInfoList_.AddEntriesFrom(input, _repeated_teamInfoList_codec);
            break;
          }
          case 64: {
            CompletedTime = input.ReadUInt64();
            break;
          }
          case 72: {
            StartMatchTime = input.ReadUInt64();
            break;
          }
          case 82: {
            if (gameSessionConnectionInfo_ == null) {
              GameSessionConnectionInfo = new global::com.unity.mgobe.GameSessionConnectionInfo();
            }
            input.ReadMessage(GameSessionConnectionInfo);
            break;
          }
        }
      }
    }

  }

  public sealed partial class DescribeMatchRsp : pb::IMessage<DescribeMatchRsp> {
    private static readonly pb::MessageParser<DescribeMatchRsp> _parser = new pb::MessageParser<DescribeMatchRsp>(() => new DescribeMatchRsp());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<DescribeMatchRsp> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::com.unity.mgobe.ProtoReflection.Descriptor.MessageTypes[98]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public DescribeMatchRsp() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public DescribeMatchRsp(DescribeMatchRsp other) : this() {
      matchProgressList_ = other.matchProgressList_.Clone();
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public DescribeMatchRsp Clone() {
      return new DescribeMatchRsp(this);
    }

    /// <summary>Field number for the "match_progress_list" field.</summary>
    public const int MatchProgressListFieldNumber = 1;
    private static readonly pb::FieldCodec<global::com.unity.mgobe.MatchProgress> _repeated_matchProgressList_codec
        = pb::FieldCodec.ForMessage(10, global::com.unity.mgobe.MatchProgress.Parser);
    private readonly pbc::RepeatedField<global::com.unity.mgobe.MatchProgress> matchProgressList_ = new pbc::RepeatedField<global::com.unity.mgobe.MatchProgress>();
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::RepeatedField<global::com.unity.mgobe.MatchProgress> MatchProgressList {
      get { return matchProgressList_; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as DescribeMatchRsp);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(DescribeMatchRsp other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if(!matchProgressList_.Equals(other.matchProgressList_)) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      hash ^= matchProgressList_.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      matchProgressList_.WriteTo(output, _repeated_matchProgressList_codec);
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      size += matchProgressList_.CalculateSize(_repeated_matchProgressList_codec);
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(DescribeMatchRsp other) {
      if (other == null) {
        return;
      }
      matchProgressList_.Add(other.matchProgressList_);
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 10: {
            matchProgressList_.AddEntriesFrom(input, _repeated_matchProgressList_codec);
            break;
          }
        }
      }
    }

  }

  /// <summary>
  ///
  ///玩家匹配
  ///取消匹配
  /// </summary>
  public sealed partial class CancelPlayerMatchReq : pb::IMessage<CancelPlayerMatchReq> {
    private static readonly pb::MessageParser<CancelPlayerMatchReq> _parser = new pb::MessageParser<CancelPlayerMatchReq>(() => new CancelPlayerMatchReq());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<CancelPlayerMatchReq> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::com.unity.mgobe.ProtoReflection.Descriptor.MessageTypes[99]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public CancelPlayerMatchReq() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public CancelPlayerMatchReq(CancelPlayerMatchReq other) : this() {
      matchType_ = other.matchType_;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public CancelPlayerMatchReq Clone() {
      return new CancelPlayerMatchReq(this);
    }

    /// <summary>Field number for the "match_type" field.</summary>
    public const int MatchTypeFieldNumber = 3;
    private global::com.unity.mgobe.MatchType matchType_ = 0;
    /// <summary>
    //// 匹配类型
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::com.unity.mgobe.MatchType MatchType {
      get { return matchType_; }
      set {
        matchType_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as CancelPlayerMatchReq);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(CancelPlayerMatchReq other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (MatchType != other.MatchType) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (MatchType != 0) hash ^= MatchType.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (MatchType != 0) {
        output.WriteRawTag(24);
        output.WriteEnum((int) MatchType);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (MatchType != 0) {
        size += 1 + pb::CodedOutputStream.ComputeEnumSize((int) MatchType);
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(CancelPlayerMatchReq other) {
      if (other == null) {
        return;
      }
      if (other.MatchType != 0) {
        MatchType = other.MatchType;
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 24: {
            MatchType = (global::com.unity.mgobe.MatchType) input.ReadEnum();
            break;
          }
        }
      }
    }

  }

  /// <summary>
  //// 无
  /// </summary>
  public sealed partial class CancelPlayerMatchRsp : pb::IMessage<CancelPlayerMatchRsp> {
    private static readonly pb::MessageParser<CancelPlayerMatchRsp> _parser = new pb::MessageParser<CancelPlayerMatchRsp>(() => new CancelPlayerMatchRsp());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<CancelPlayerMatchRsp> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::com.unity.mgobe.ProtoReflection.Descriptor.MessageTypes[100]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public CancelPlayerMatchRsp() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public CancelPlayerMatchRsp(CancelPlayerMatchRsp other) : this() {
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public CancelPlayerMatchRsp Clone() {
      return new CancelPlayerMatchRsp(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as CancelPlayerMatchRsp);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(CancelPlayerMatchRsp other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(CancelPlayerMatchRsp other) {
      if (other == null) {
        return;
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
        }
      }
    }

  }

  public sealed partial class ApiMatchGroupReq : pb::IMessage<ApiMatchGroupReq> {
    private static readonly pb::MessageParser<ApiMatchGroupReq> _parser = new pb::MessageParser<ApiMatchGroupReq>(() => new ApiMatchGroupReq());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<ApiMatchGroupReq> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::com.unity.mgobe.ProtoReflection.Descriptor.MessageTypes[101]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ApiMatchGroupReq() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ApiMatchGroupReq(ApiMatchGroupReq other) : this() {
      matchCode_ = other.matchCode_;
      playerInfoList_ = other.playerInfoList_.Clone();
      requestId_ = other.requestId_;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ApiMatchGroupReq Clone() {
      return new ApiMatchGroupReq(this);
    }

    /// <summary>Field number for the "match_code" field.</summary>
    public const int MatchCodeFieldNumber = 1;
    private string matchCode_ = "";
    /// <summary>
    //// 匹配code
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string MatchCode {
      get { return matchCode_; }
      set {
        matchCode_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "player_info_list" field.</summary>
    public const int PlayerInfoListFieldNumber = 2;
    private static readonly pb::FieldCodec<global::com.unity.mgobe.MatchPlayerInfo> _repeated_playerInfoList_codec
        = pb::FieldCodec.ForMessage(18, global::com.unity.mgobe.MatchPlayerInfo.Parser);
    private readonly pbc::RepeatedField<global::com.unity.mgobe.MatchPlayerInfo> playerInfoList_ = new pbc::RepeatedField<global::com.unity.mgobe.MatchPlayerInfo>();
    /// <summary>
    //// 好友列表
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::RepeatedField<global::com.unity.mgobe.MatchPlayerInfo> PlayerInfoList {
      get { return playerInfoList_; }
    }

    /// <summary>Field number for the "request_id" field.</summary>
    public const int RequestIdFieldNumber = 3;
    private string requestId_ = "";
    /// <summary>
    //// 请求id 如果客户没填可以拿云api平台的来使用
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string RequestId {
      get { return requestId_; }
      set {
        requestId_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as ApiMatchGroupReq);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(ApiMatchGroupReq other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (MatchCode != other.MatchCode) return false;
      if(!playerInfoList_.Equals(other.playerInfoList_)) return false;
      if (RequestId != other.RequestId) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (MatchCode.Length != 0) hash ^= MatchCode.GetHashCode();
      hash ^= playerInfoList_.GetHashCode();
      if (RequestId.Length != 0) hash ^= RequestId.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (MatchCode.Length != 0) {
        output.WriteRawTag(10);
        output.WriteString(MatchCode);
      }
      playerInfoList_.WriteTo(output, _repeated_playerInfoList_codec);
      if (RequestId.Length != 0) {
        output.WriteRawTag(26);
        output.WriteString(RequestId);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (MatchCode.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(MatchCode);
      }
      size += playerInfoList_.CalculateSize(_repeated_playerInfoList_codec);
      if (RequestId.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(RequestId);
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(ApiMatchGroupReq other) {
      if (other == null) {
        return;
      }
      if (other.MatchCode.Length != 0) {
        MatchCode = other.MatchCode;
      }
      playerInfoList_.Add(other.playerInfoList_);
      if (other.RequestId.Length != 0) {
        RequestId = other.RequestId;
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 10: {
            MatchCode = input.ReadString();
            break;
          }
          case 18: {
            playerInfoList_.AddEntriesFrom(input, _repeated_playerInfoList_codec);
            break;
          }
          case 26: {
            RequestId = input.ReadString();
            break;
          }
        }
      }
    }

  }

  public sealed partial class ApiMatchGroupRsp : pb::IMessage<ApiMatchGroupRsp> {
    private static readonly pb::MessageParser<ApiMatchGroupRsp> _parser = new pb::MessageParser<ApiMatchGroupRsp>(() => new ApiMatchGroupRsp());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<ApiMatchGroupRsp> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::com.unity.mgobe.ProtoReflection.Descriptor.MessageTypes[102]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ApiMatchGroupRsp() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ApiMatchGroupRsp(ApiMatchGroupRsp other) : this() {
      requestId_ = other.requestId_;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ApiMatchGroupRsp Clone() {
      return new ApiMatchGroupRsp(this);
    }

    /// <summary>Field number for the "request_id" field.</summary>
    public const int RequestIdFieldNumber = 1;
    private string requestId_ = "";
    /// <summary>
    //// 请求id 如果客户没填可以拿云api平台的来使用
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string RequestId {
      get { return requestId_; }
      set {
        requestId_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as ApiMatchGroupRsp);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(ApiMatchGroupRsp other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (RequestId != other.RequestId) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (RequestId.Length != 0) hash ^= RequestId.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (RequestId.Length != 0) {
        output.WriteRawTag(10);
        output.WriteString(RequestId);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (RequestId.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(RequestId);
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(ApiMatchGroupRsp other) {
      if (other == null) {
        return;
      }
      if (other.RequestId.Length != 0) {
        RequestId = other.RequestId;
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 10: {
            RequestId = input.ReadString();
            break;
          }
        }
      }
    }

  }

  public sealed partial class ApiDescribeMatchReq : pb::IMessage<ApiDescribeMatchReq> {
    private static readonly pb::MessageParser<ApiDescribeMatchReq> _parser = new pb::MessageParser<ApiDescribeMatchReq>(() => new ApiDescribeMatchReq());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<ApiDescribeMatchReq> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::com.unity.mgobe.ProtoReflection.Descriptor.MessageTypes[103]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ApiDescribeMatchReq() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ApiDescribeMatchReq(ApiDescribeMatchReq other) : this() {
      requestIdList_ = other.requestIdList_.Clone();
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ApiDescribeMatchReq Clone() {
      return new ApiDescribeMatchReq(this);
    }

    /// <summary>Field number for the "request_id_list" field.</summary>
    public const int RequestIdListFieldNumber = 1;
    private static readonly pb::FieldCodec<string> _repeated_requestIdList_codec
        = pb::FieldCodec.ForString(10);
    private readonly pbc::RepeatedField<string> requestIdList_ = new pbc::RepeatedField<string>();
    /// <summary>
    //// 请求id列表
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::RepeatedField<string> RequestIdList {
      get { return requestIdList_; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as ApiDescribeMatchReq);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(ApiDescribeMatchReq other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if(!requestIdList_.Equals(other.requestIdList_)) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      hash ^= requestIdList_.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      requestIdList_.WriteTo(output, _repeated_requestIdList_codec);
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      size += requestIdList_.CalculateSize(_repeated_requestIdList_codec);
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(ApiDescribeMatchReq other) {
      if (other == null) {
        return;
      }
      requestIdList_.Add(other.requestIdList_);
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 10: {
            requestIdList_.AddEntriesFrom(input, _repeated_requestIdList_codec);
            break;
          }
        }
      }
    }

  }

  public sealed partial class ApiDescribeMatchRsp : pb::IMessage<ApiDescribeMatchRsp> {
    private static readonly pb::MessageParser<ApiDescribeMatchRsp> _parser = new pb::MessageParser<ApiDescribeMatchRsp>(() => new ApiDescribeMatchRsp());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<ApiDescribeMatchRsp> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::com.unity.mgobe.ProtoReflection.Descriptor.MessageTypes[104]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ApiDescribeMatchRsp() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ApiDescribeMatchRsp(ApiDescribeMatchRsp other) : this() {
      matchProgressList_ = other.matchProgressList_.Clone();
      gameId_ = other.gameId_;
      matchCode_ = other.matchCode_;
      startMatchTime_ = other.startMatchTime_;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ApiDescribeMatchRsp Clone() {
      return new ApiDescribeMatchRsp(this);
    }

    /// <summary>Field number for the "match_progress_list" field.</summary>
    public const int MatchProgressListFieldNumber = 1;
    private static readonly pb::FieldCodec<global::com.unity.mgobe.MatchProgress> _repeated_matchProgressList_codec
        = pb::FieldCodec.ForMessage(10, global::com.unity.mgobe.MatchProgress.Parser);
    private readonly pbc::RepeatedField<global::com.unity.mgobe.MatchProgress> matchProgressList_ = new pbc::RepeatedField<global::com.unity.mgobe.MatchProgress>();
    /// <summary>
    //// 进度信息列表
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::RepeatedField<global::com.unity.mgobe.MatchProgress> MatchProgressList {
      get { return matchProgressList_; }
    }

    /// <summary>Field number for the "game_id" field.</summary>
    public const int GameIdFieldNumber = 2;
    private string gameId_ = "";
    /// <summary>
    //// 游戏id
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string GameId {
      get { return gameId_; }
      set {
        gameId_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "match_code" field.</summary>
    public const int MatchCodeFieldNumber = 3;
    private string matchCode_ = "";
    /// <summary>
    //// 匹配code
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string MatchCode {
      get { return matchCode_; }
      set {
        matchCode_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "start_match_time" field.</summary>
    public const int StartMatchTimeFieldNumber = 4;
    private ulong startMatchTime_;
    /// <summary>
    //// 开始匹配的时间
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ulong StartMatchTime {
      get { return startMatchTime_; }
      set {
        startMatchTime_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as ApiDescribeMatchRsp);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(ApiDescribeMatchRsp other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if(!matchProgressList_.Equals(other.matchProgressList_)) return false;
      if (GameId != other.GameId) return false;
      if (MatchCode != other.MatchCode) return false;
      if (StartMatchTime != other.StartMatchTime) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      hash ^= matchProgressList_.GetHashCode();
      if (GameId.Length != 0) hash ^= GameId.GetHashCode();
      if (MatchCode.Length != 0) hash ^= MatchCode.GetHashCode();
      if (StartMatchTime != 0UL) hash ^= StartMatchTime.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      matchProgressList_.WriteTo(output, _repeated_matchProgressList_codec);
      if (GameId.Length != 0) {
        output.WriteRawTag(18);
        output.WriteString(GameId);
      }
      if (MatchCode.Length != 0) {
        output.WriteRawTag(26);
        output.WriteString(MatchCode);
      }
      if (StartMatchTime != 0UL) {
        output.WriteRawTag(32);
        output.WriteUInt64(StartMatchTime);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      size += matchProgressList_.CalculateSize(_repeated_matchProgressList_codec);
      if (GameId.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(GameId);
      }
      if (MatchCode.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(MatchCode);
      }
      if (StartMatchTime != 0UL) {
        size += 1 + pb::CodedOutputStream.ComputeUInt64Size(StartMatchTime);
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(ApiDescribeMatchRsp other) {
      if (other == null) {
        return;
      }
      matchProgressList_.Add(other.matchProgressList_);
      if (other.GameId.Length != 0) {
        GameId = other.GameId;
      }
      if (other.MatchCode.Length != 0) {
        MatchCode = other.MatchCode;
      }
      if (other.StartMatchTime != 0UL) {
        StartMatchTime = other.StartMatchTime;
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 10: {
            matchProgressList_.AddEntriesFrom(input, _repeated_matchProgressList_codec);
            break;
          }
          case 18: {
            GameId = input.ReadString();
            break;
          }
          case 26: {
            MatchCode = input.ReadString();
            break;
          }
          case 32: {
            StartMatchTime = input.ReadUInt64();
            break;
          }
        }
      }
    }

  }

  /// <summary>
  //// 游戏信息(ges返回)
  /// </summary>
  public sealed partial class GameSessionConnectionInfo : pb::IMessage<GameSessionConnectionInfo> {
    private static readonly pb::MessageParser<GameSessionConnectionInfo> _parser = new pb::MessageParser<GameSessionConnectionInfo>(() => new GameSessionConnectionInfo());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<GameSessionConnectionInfo> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::com.unity.mgobe.ProtoReflection.Descriptor.MessageTypes[105]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public GameSessionConnectionInfo() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public GameSessionConnectionInfo(GameSessionConnectionInfo other) : this() {
      dnsName_ = other.dnsName_;
      ipAddress_ = other.ipAddress_;
      matchedPlayerSessions_ = other.matchedPlayerSessions_.Clone();
      port_ = other.port_;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public GameSessionConnectionInfo Clone() {
      return new GameSessionConnectionInfo(this);
    }

    /// <summary>Field number for the "dns_name" field.</summary>
    public const int DnsNameFieldNumber = 1;
    private string dnsName_ = "";
    /// <summary>
    //// 分配给正在运行游戏会话的实例的DNS标识符注意：此字段可能返回 null，表示取不到有效值。
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string DnsName {
      get { return dnsName_; }
      set {
        dnsName_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "ip_address" field.</summary>
    public const int IpAddressFieldNumber = 2;
    private string ipAddress_ = "";
    /// <summary>
    //// 运行游戏会话的实例的IP地址注意：此字段可能返回 null，表示取不到有效值。
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string IpAddress {
      get { return ipAddress_; }
      set {
        ipAddress_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "matched_player_sessions" field.</summary>
    public const int MatchedPlayerSessionsFieldNumber = 3;
    private static readonly pb::FieldCodec<global::com.unity.mgobe.MatchedPlayerSession> _repeated_matchedPlayerSessions_codec
        = pb::FieldCodec.ForMessage(26, global::com.unity.mgobe.MatchedPlayerSession.Parser);
    private readonly pbc::RepeatedField<global::com.unity.mgobe.MatchedPlayerSession> matchedPlayerSessions_ = new pbc::RepeatedField<global::com.unity.mgobe.MatchedPlayerSession>();
    /// <summary>
    //// 游戏玩家信息列表
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::RepeatedField<global::com.unity.mgobe.MatchedPlayerSession> MatchedPlayerSessions {
      get { return matchedPlayerSessions_; }
    }

    /// <summary>Field number for the "port" field.</summary>
    public const int PortFieldNumber = 4;
    private long port_;
    /// <summary>
    //// 运行游戏会话的实例的端口号注意：此字段可能返回 null，表示取不到有效值。
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public long Port {
      get { return port_; }
      set {
        port_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as GameSessionConnectionInfo);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(GameSessionConnectionInfo other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (DnsName != other.DnsName) return false;
      if (IpAddress != other.IpAddress) return false;
      if(!matchedPlayerSessions_.Equals(other.matchedPlayerSessions_)) return false;
      if (Port != other.Port) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (DnsName.Length != 0) hash ^= DnsName.GetHashCode();
      if (IpAddress.Length != 0) hash ^= IpAddress.GetHashCode();
      hash ^= matchedPlayerSessions_.GetHashCode();
      if (Port != 0L) hash ^= Port.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (DnsName.Length != 0) {
        output.WriteRawTag(10);
        output.WriteString(DnsName);
      }
      if (IpAddress.Length != 0) {
        output.WriteRawTag(18);
        output.WriteString(IpAddress);
      }
      matchedPlayerSessions_.WriteTo(output, _repeated_matchedPlayerSessions_codec);
      if (Port != 0L) {
        output.WriteRawTag(32);
        output.WriteInt64(Port);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (DnsName.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(DnsName);
      }
      if (IpAddress.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(IpAddress);
      }
      size += matchedPlayerSessions_.CalculateSize(_repeated_matchedPlayerSessions_codec);
      if (Port != 0L) {
        size += 1 + pb::CodedOutputStream.ComputeInt64Size(Port);
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(GameSessionConnectionInfo other) {
      if (other == null) {
        return;
      }
      if (other.DnsName.Length != 0) {
        DnsName = other.DnsName;
      }
      if (other.IpAddress.Length != 0) {
        IpAddress = other.IpAddress;
      }
      matchedPlayerSessions_.Add(other.matchedPlayerSessions_);
      if (other.Port != 0L) {
        Port = other.Port;
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 10: {
            DnsName = input.ReadString();
            break;
          }
          case 18: {
            IpAddress = input.ReadString();
            break;
          }
          case 26: {
            matchedPlayerSessions_.AddEntriesFrom(input, _repeated_matchedPlayerSessions_codec);
            break;
          }
          case 32: {
            Port = input.ReadInt64();
            break;
          }
        }
      }
    }

  }

  /// <summary>
  //// 被匹配的完整player
  /// </summary>
  public sealed partial class MatchedPlayerSession : pb::IMessage<MatchedPlayerSession> {
    private static readonly pb::MessageParser<MatchedPlayerSession> _parser = new pb::MessageParser<MatchedPlayerSession>(() => new MatchedPlayerSession());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<MatchedPlayerSession> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::com.unity.mgobe.ProtoReflection.Descriptor.MessageTypes[106]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public MatchedPlayerSession() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public MatchedPlayerSession(MatchedPlayerSession other) : this() {
      playerId_ = other.playerId_;
      playerSessionId_ = other.playerSessionId_;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public MatchedPlayerSession Clone() {
      return new MatchedPlayerSession(this);
    }

    /// <summary>Field number for the "player_id" field.</summary>
    public const int PlayerIdFieldNumber = 1;
    private string playerId_ = "";
    /// <summary>
    //// 玩家ID
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string PlayerId {
      get { return playerId_; }
      set {
        playerId_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "player_session_id" field.</summary>
    public const int PlayerSessionIdFieldNumber = 2;
    private string playerSessionId_ = "";
    /// <summary>
    //// 玩家会话ID
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string PlayerSessionId {
      get { return playerSessionId_; }
      set {
        playerSessionId_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as MatchedPlayerSession);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(MatchedPlayerSession other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (PlayerId != other.PlayerId) return false;
      if (PlayerSessionId != other.PlayerSessionId) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (PlayerId.Length != 0) hash ^= PlayerId.GetHashCode();
      if (PlayerSessionId.Length != 0) hash ^= PlayerSessionId.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (PlayerId.Length != 0) {
        output.WriteRawTag(10);
        output.WriteString(PlayerId);
      }
      if (PlayerSessionId.Length != 0) {
        output.WriteRawTag(18);
        output.WriteString(PlayerSessionId);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (PlayerId.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(PlayerId);
      }
      if (PlayerSessionId.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(PlayerSessionId);
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(MatchedPlayerSession other) {
      if (other == null) {
        return;
      }
      if (other.PlayerId.Length != 0) {
        PlayerId = other.PlayerId;
      }
      if (other.PlayerSessionId.Length != 0) {
        PlayerSessionId = other.PlayerSessionId;
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 10: {
            PlayerId = input.ReadString();
            break;
          }
          case 18: {
            PlayerSessionId = input.ReadString();
            break;
          }
        }
      }
    }

  }

  public sealed partial class StartMatchPlacement : pb::IMessage<StartMatchPlacement> {
    private static readonly pb::MessageParser<StartMatchPlacement> _parser = new pb::MessageParser<StartMatchPlacement>(() => new StartMatchPlacement());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<StartMatchPlacement> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::com.unity.mgobe.ProtoReflection.Descriptor.MessageTypes[107]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public StartMatchPlacement() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public StartMatchPlacement(StartMatchPlacement other) : this() {
      region_ = other.region_;
      placementId_ = other.placementId_;
      queueName_ = other.queueName_;
      maximumPlayerSessionCount_ = other.maximumPlayerSessionCount_;
      desiredPlayerSessions_ = other.desiredPlayerSessions_.Clone();
      gameProperties_ = other.gameProperties_.Clone();
      matchMakerData_ = other.matchMakerData_;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public StartMatchPlacement Clone() {
      return new StartMatchPlacement(this);
    }

    /// <summary>Field number for the "region" field.</summary>
    public const int RegionFieldNumber = 1;
    private string region_ = "";
    /// <summary>
    //// 创建匹配时选择的地域
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string Region {
      get { return region_; }
      set {
        region_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "placement_id" field.</summary>
    public const int PlacementIdFieldNumber = 2;
    private string placementId_ = "";
    /// <summary>
    //// 匹配服务后台分配的id，用于追踪每一次placement请求
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string PlacementId {
      get { return placementId_; }
      set {
        placementId_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "queue_name" field.</summary>
    public const int QueueNameFieldNumber = 3;
    private string queueName_ = "";
    /// <summary>
    //// 创建匹配时选择的队列名
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string QueueName {
      get { return queueName_; }
      set {
        queueName_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "maximum_player_session_count" field.</summary>
    public const int MaximumPlayerSessionCountFieldNumber = 4;
    private long maximumPlayerSessionCount_;
    /// <summary>
    //// 根据匹配规则计算出的游戏对局最大玩家数
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public long MaximumPlayerSessionCount {
      get { return maximumPlayerSessionCount_; }
      set {
        maximumPlayerSessionCount_ = value;
      }
    }

    /// <summary>Field number for the "desired_player_sessions" field.</summary>
    public const int DesiredPlayerSessionsFieldNumber = 5;
    private static readonly pb::FieldCodec<global::com.unity.mgobe.DesiredPlayerSession> _repeated_desiredPlayerSessions_codec
        = pb::FieldCodec.ForMessage(42, global::com.unity.mgobe.DesiredPlayerSession.Parser);
    private readonly pbc::RepeatedField<global::com.unity.mgobe.DesiredPlayerSession> desiredPlayerSessions_ = new pbc::RepeatedField<global::com.unity.mgobe.DesiredPlayerSession>();
    /// <summary>
    //// 玩家游戏会话信息 来自发起匹配的参数
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::RepeatedField<global::com.unity.mgobe.DesiredPlayerSession> DesiredPlayerSessions {
      get { return desiredPlayerSessions_; }
    }

    /// <summary>Field number for the "game_properties" field.</summary>
    public const int GamePropertiesFieldNumber = 6;
    private static readonly pb::FieldCodec<global::com.unity.mgobe.GameProperty> _repeated_gameProperties_codec
        = pb::FieldCodec.ForMessage(50, global::com.unity.mgobe.GameProperty.Parser);
    private readonly pbc::RepeatedField<global::com.unity.mgobe.GameProperty> gameProperties_ = new pbc::RepeatedField<global::com.unity.mgobe.GameProperty>();
    /// <summary>
    //// 游戏属性详情 来自匹配配置
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::RepeatedField<global::com.unity.mgobe.GameProperty> GameProperties {
      get { return gameProperties_; }
    }

    /// <summary>Field number for the "match_maker_data" field.</summary>
    public const int MatchMakerDataFieldNumber = 7;
    private string matchMakerData_ = "";
    /// <summary>
    //// 匹配数据
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string MatchMakerData {
      get { return matchMakerData_; }
      set {
        matchMakerData_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as StartMatchPlacement);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(StartMatchPlacement other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (Region != other.Region) return false;
      if (PlacementId != other.PlacementId) return false;
      if (QueueName != other.QueueName) return false;
      if (MaximumPlayerSessionCount != other.MaximumPlayerSessionCount) return false;
      if(!desiredPlayerSessions_.Equals(other.desiredPlayerSessions_)) return false;
      if(!gameProperties_.Equals(other.gameProperties_)) return false;
      if (MatchMakerData != other.MatchMakerData) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (Region.Length != 0) hash ^= Region.GetHashCode();
      if (PlacementId.Length != 0) hash ^= PlacementId.GetHashCode();
      if (QueueName.Length != 0) hash ^= QueueName.GetHashCode();
      if (MaximumPlayerSessionCount != 0L) hash ^= MaximumPlayerSessionCount.GetHashCode();
      hash ^= desiredPlayerSessions_.GetHashCode();
      hash ^= gameProperties_.GetHashCode();
      if (MatchMakerData.Length != 0) hash ^= MatchMakerData.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (Region.Length != 0) {
        output.WriteRawTag(10);
        output.WriteString(Region);
      }
      if (PlacementId.Length != 0) {
        output.WriteRawTag(18);
        output.WriteString(PlacementId);
      }
      if (QueueName.Length != 0) {
        output.WriteRawTag(26);
        output.WriteString(QueueName);
      }
      if (MaximumPlayerSessionCount != 0L) {
        output.WriteRawTag(32);
        output.WriteInt64(MaximumPlayerSessionCount);
      }
      desiredPlayerSessions_.WriteTo(output, _repeated_desiredPlayerSessions_codec);
      gameProperties_.WriteTo(output, _repeated_gameProperties_codec);
      if (MatchMakerData.Length != 0) {
        output.WriteRawTag(58);
        output.WriteString(MatchMakerData);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (Region.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(Region);
      }
      if (PlacementId.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(PlacementId);
      }
      if (QueueName.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(QueueName);
      }
      if (MaximumPlayerSessionCount != 0L) {
        size += 1 + pb::CodedOutputStream.ComputeInt64Size(MaximumPlayerSessionCount);
      }
      size += desiredPlayerSessions_.CalculateSize(_repeated_desiredPlayerSessions_codec);
      size += gameProperties_.CalculateSize(_repeated_gameProperties_codec);
      if (MatchMakerData.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(MatchMakerData);
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(StartMatchPlacement other) {
      if (other == null) {
        return;
      }
      if (other.Region.Length != 0) {
        Region = other.Region;
      }
      if (other.PlacementId.Length != 0) {
        PlacementId = other.PlacementId;
      }
      if (other.QueueName.Length != 0) {
        QueueName = other.QueueName;
      }
      if (other.MaximumPlayerSessionCount != 0L) {
        MaximumPlayerSessionCount = other.MaximumPlayerSessionCount;
      }
      desiredPlayerSessions_.Add(other.desiredPlayerSessions_);
      gameProperties_.Add(other.gameProperties_);
      if (other.MatchMakerData.Length != 0) {
        MatchMakerData = other.MatchMakerData;
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 10: {
            Region = input.ReadString();
            break;
          }
          case 18: {
            PlacementId = input.ReadString();
            break;
          }
          case 26: {
            QueueName = input.ReadString();
            break;
          }
          case 32: {
            MaximumPlayerSessionCount = input.ReadInt64();
            break;
          }
          case 42: {
            desiredPlayerSessions_.AddEntriesFrom(input, _repeated_desiredPlayerSessions_codec);
            break;
          }
          case 50: {
            gameProperties_.AddEntriesFrom(input, _repeated_gameProperties_codec);
            break;
          }
          case 58: {
            MatchMakerData = input.ReadString();
            break;
          }
        }
      }
    }

  }

  public sealed partial class DesiredPlayerSession : pb::IMessage<DesiredPlayerSession> {
    private static readonly pb::MessageParser<DesiredPlayerSession> _parser = new pb::MessageParser<DesiredPlayerSession>(() => new DesiredPlayerSession());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<DesiredPlayerSession> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::com.unity.mgobe.ProtoReflection.Descriptor.MessageTypes[108]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public DesiredPlayerSession() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public DesiredPlayerSession(DesiredPlayerSession other) : this() {
      playerId_ = other.playerId_;
      playerData_ = other.playerData_;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public DesiredPlayerSession Clone() {
      return new DesiredPlayerSession(this);
    }

    /// <summary>Field number for the "player_id" field.</summary>
    public const int PlayerIdFieldNumber = 1;
    private string playerId_ = "";
    /// <summary>
    //// 发起匹配中传入的playerId
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string PlayerId {
      get { return playerId_; }
      set {
        playerId_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "player_data" field.</summary>
    public const int PlayerDataFieldNumber = 2;
    private string playerData_ = "";
    /// <summary>
    //// 发起匹配时，MatchGroupPlayerInfoPara组成的string
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string PlayerData {
      get { return playerData_; }
      set {
        playerData_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as DesiredPlayerSession);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(DesiredPlayerSession other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (PlayerId != other.PlayerId) return false;
      if (PlayerData != other.PlayerData) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (PlayerId.Length != 0) hash ^= PlayerId.GetHashCode();
      if (PlayerData.Length != 0) hash ^= PlayerData.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (PlayerId.Length != 0) {
        output.WriteRawTag(10);
        output.WriteString(PlayerId);
      }
      if (PlayerData.Length != 0) {
        output.WriteRawTag(18);
        output.WriteString(PlayerData);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (PlayerId.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(PlayerId);
      }
      if (PlayerData.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(PlayerData);
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(DesiredPlayerSession other) {
      if (other == null) {
        return;
      }
      if (other.PlayerId.Length != 0) {
        PlayerId = other.PlayerId;
      }
      if (other.PlayerData.Length != 0) {
        PlayerData = other.PlayerData;
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 10: {
            PlayerId = input.ReadString();
            break;
          }
          case 18: {
            PlayerData = input.ReadString();
            break;
          }
        }
      }
    }

  }

  public sealed partial class GameProperty : pb::IMessage<GameProperty> {
    private static readonly pb::MessageParser<GameProperty> _parser = new pb::MessageParser<GameProperty>(() => new GameProperty());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<GameProperty> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::com.unity.mgobe.ProtoReflection.Descriptor.MessageTypes[109]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public GameProperty() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public GameProperty(GameProperty other) : this() {
      key_ = other.key_;
      value_ = other.value_;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public GameProperty Clone() {
      return new GameProperty(this);
    }

    /// <summary>Field number for the "key" field.</summary>
    public const int KeyFieldNumber = 1;
    private string key_ = "";
    /// <summary>
    //// 匹配配置的游戏key
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string Key {
      get { return key_; }
      set {
        key_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "value" field.</summary>
    public const int ValueFieldNumber = 2;
    private string value_ = "";
    /// <summary>
    //// 匹配配置的游戏value
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string Value {
      get { return value_; }
      set {
        value_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as GameProperty);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(GameProperty other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (Key != other.Key) return false;
      if (Value != other.Value) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (Key.Length != 0) hash ^= Key.GetHashCode();
      if (Value.Length != 0) hash ^= Value.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (Key.Length != 0) {
        output.WriteRawTag(10);
        output.WriteString(Key);
      }
      if (Value.Length != 0) {
        output.WriteRawTag(18);
        output.WriteString(Value);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (Key.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(Key);
      }
      if (Value.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(Value);
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(GameProperty other) {
      if (other == null) {
        return;
      }
      if (other.Key.Length != 0) {
        Key = other.Key;
      }
      if (other.Value.Length != 0) {
        Value = other.Value;
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 10: {
            Key = input.ReadString();
            break;
          }
          case 18: {
            Value = input.ReadString();
            break;
          }
        }
      }
    }

  }

  public sealed partial class ApiCancelPlayerMatchReq : pb::IMessage<ApiCancelPlayerMatchReq> {
    private static readonly pb::MessageParser<ApiCancelPlayerMatchReq> _parser = new pb::MessageParser<ApiCancelPlayerMatchReq>(() => new ApiCancelPlayerMatchReq());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<ApiCancelPlayerMatchReq> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::com.unity.mgobe.ProtoReflection.Descriptor.MessageTypes[110]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ApiCancelPlayerMatchReq() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ApiCancelPlayerMatchReq(ApiCancelPlayerMatchReq other) : this() {
      matchType_ = other.matchType_;
      requestIdList_ = other.requestIdList_.Clone();
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ApiCancelPlayerMatchReq Clone() {
      return new ApiCancelPlayerMatchReq(this);
    }

    /// <summary>Field number for the "match_type" field.</summary>
    public const int MatchTypeFieldNumber = 1;
    private global::com.unity.mgobe.MatchType matchType_ = 0;
    /// <summary>
    //// 匹配类型 MatchType 传 PLAYER_COMPLEX
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::com.unity.mgobe.MatchType MatchType {
      get { return matchType_; }
      set {
        matchType_ = value;
      }
    }

    /// <summary>Field number for the "request_id_list" field.</summary>
    public const int RequestIdListFieldNumber = 2;
    private static readonly pb::FieldCodec<string> _repeated_requestIdList_codec
        = pb::FieldCodec.ForString(18);
    private readonly pbc::RepeatedField<string> requestIdList_ = new pbc::RepeatedField<string>();
    /// <summary>
    //// 请求id列表
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::RepeatedField<string> RequestIdList {
      get { return requestIdList_; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as ApiCancelPlayerMatchReq);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(ApiCancelPlayerMatchReq other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (MatchType != other.MatchType) return false;
      if(!requestIdList_.Equals(other.requestIdList_)) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (MatchType != 0) hash ^= MatchType.GetHashCode();
      hash ^= requestIdList_.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (MatchType != 0) {
        output.WriteRawTag(8);
        output.WriteEnum((int) MatchType);
      }
      requestIdList_.WriteTo(output, _repeated_requestIdList_codec);
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (MatchType != 0) {
        size += 1 + pb::CodedOutputStream.ComputeEnumSize((int) MatchType);
      }
      size += requestIdList_.CalculateSize(_repeated_requestIdList_codec);
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(ApiCancelPlayerMatchReq other) {
      if (other == null) {
        return;
      }
      if (other.MatchType != 0) {
        MatchType = other.MatchType;
      }
      requestIdList_.Add(other.requestIdList_);
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 8: {
            MatchType = (global::com.unity.mgobe.MatchType) input.ReadEnum();
            break;
          }
          case 18: {
            requestIdList_.AddEntriesFrom(input, _repeated_requestIdList_codec);
            break;
          }
        }
      }
    }

  }

  public sealed partial class ApiCancelPlayerMatchRsp : pb::IMessage<ApiCancelPlayerMatchRsp> {
    private static readonly pb::MessageParser<ApiCancelPlayerMatchRsp> _parser = new pb::MessageParser<ApiCancelPlayerMatchRsp>(() => new ApiCancelPlayerMatchRsp());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<ApiCancelPlayerMatchRsp> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::com.unity.mgobe.ProtoReflection.Descriptor.MessageTypes[111]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ApiCancelPlayerMatchRsp() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ApiCancelPlayerMatchRsp(ApiCancelPlayerMatchRsp other) : this() {
      requestIdList_ = other.requestIdList_.Clone();
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ApiCancelPlayerMatchRsp Clone() {
      return new ApiCancelPlayerMatchRsp(this);
    }

    /// <summary>Field number for the "request_id_list" field.</summary>
    public const int RequestIdListFieldNumber = 1;
    private static readonly pb::FieldCodec<string> _repeated_requestIdList_codec
        = pb::FieldCodec.ForString(10);
    private readonly pbc::RepeatedField<string> requestIdList_ = new pbc::RepeatedField<string>();
    /// <summary>
    //// 取消成功的请求id列表
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::RepeatedField<string> RequestIdList {
      get { return requestIdList_; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as ApiCancelPlayerMatchRsp);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(ApiCancelPlayerMatchRsp other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if(!requestIdList_.Equals(other.requestIdList_)) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      hash ^= requestIdList_.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      requestIdList_.WriteTo(output, _repeated_requestIdList_codec);
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      size += requestIdList_.CalculateSize(_repeated_requestIdList_codec);
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(ApiCancelPlayerMatchRsp other) {
      if (other == null) {
        return;
      }
      requestIdList_.Add(other.requestIdList_);
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 10: {
            requestIdList_.AddEntriesFrom(input, _repeated_requestIdList_codec);
            break;
          }
        }
      }
    }

  }

  /// <summary>
  ///
  ///创建房间 - 自定义服务通知
  /// </summary>
  public sealed partial class CreateRoomBst : pb::IMessage<CreateRoomBst> {
    private static readonly pb::MessageParser<CreateRoomBst> _parser = new pb::MessageParser<CreateRoomBst>(() => new CreateRoomBst());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<CreateRoomBst> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::com.unity.mgobe.ProtoReflection.Descriptor.MessageTypes[112]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public CreateRoomBst() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public CreateRoomBst(CreateRoomBst other) : this() {
      roomInfo_ = other.roomInfo_ != null ? other.roomInfo_.Clone() : null;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public CreateRoomBst Clone() {
      return new CreateRoomBst(this);
    }

    /// <summary>Field number for the "room_info" field.</summary>
    public const int RoomInfoFieldNumber = 1;
    private global::com.unity.mgobe.RoomInfo roomInfo_;
    /// <summary>
    //// 新的房间信息
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::com.unity.mgobe.RoomInfo RoomInfo {
      get { return roomInfo_; }
      set {
        roomInfo_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as CreateRoomBst);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(CreateRoomBst other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (!object.Equals(RoomInfo, other.RoomInfo)) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (roomInfo_ != null) hash ^= RoomInfo.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (roomInfo_ != null) {
        output.WriteRawTag(10);
        output.WriteMessage(RoomInfo);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (roomInfo_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(RoomInfo);
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(CreateRoomBst other) {
      if (other == null) {
        return;
      }
      if (other.roomInfo_ != null) {
        if (roomInfo_ == null) {
          RoomInfo = new global::com.unity.mgobe.RoomInfo();
        }
        RoomInfo.MergeFrom(other.RoomInfo);
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 10: {
            if (roomInfo_ == null) {
              RoomInfo = new global::com.unity.mgobe.RoomInfo();
            }
            input.ReadMessage(RoomInfo);
            break;
          }
        }
      }
    }

  }

  /// <summary>
  ///
  ///销毁房间 - 自定义服务通知
  /// </summary>
  public sealed partial class DestroyRoomBst : pb::IMessage<DestroyRoomBst> {
    private static readonly pb::MessageParser<DestroyRoomBst> _parser = new pb::MessageParser<DestroyRoomBst>(() => new DestroyRoomBst());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<DestroyRoomBst> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::com.unity.mgobe.ProtoReflection.Descriptor.MessageTypes[113]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public DestroyRoomBst() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public DestroyRoomBst(DestroyRoomBst other) : this() {
      roomInfo_ = other.roomInfo_ != null ? other.roomInfo_.Clone() : null;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public DestroyRoomBst Clone() {
      return new DestroyRoomBst(this);
    }

    /// <summary>Field number for the "room_info" field.</summary>
    public const int RoomInfoFieldNumber = 1;
    private global::com.unity.mgobe.RoomInfo roomInfo_;
    /// <summary>
    //// 房间信息， 只设置roomid
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::com.unity.mgobe.RoomInfo RoomInfo {
      get { return roomInfo_; }
      set {
        roomInfo_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as DestroyRoomBst);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(DestroyRoomBst other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (!object.Equals(RoomInfo, other.RoomInfo)) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (roomInfo_ != null) hash ^= RoomInfo.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (roomInfo_ != null) {
        output.WriteRawTag(10);
        output.WriteMessage(RoomInfo);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (roomInfo_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(RoomInfo);
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(DestroyRoomBst other) {
      if (other == null) {
        return;
      }
      if (other.roomInfo_ != null) {
        if (roomInfo_ == null) {
          RoomInfo = new global::com.unity.mgobe.RoomInfo();
        }
        RoomInfo.MergeFrom(other.RoomInfo);
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 10: {
            if (roomInfo_ == null) {
              RoomInfo = new global::com.unity.mgobe.RoomInfo();
            }
            input.ReadMessage(RoomInfo);
            break;
          }
        }
      }
    }

  }

  /// <summary>
  ///
  ///加入房间广播（客户端）
  /// </summary>
  public sealed partial class JoinRoomBst : pb::IMessage<JoinRoomBst> {
    private static readonly pb::MessageParser<JoinRoomBst> _parser = new pb::MessageParser<JoinRoomBst>(() => new JoinRoomBst());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<JoinRoomBst> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::com.unity.mgobe.ProtoReflection.Descriptor.MessageTypes[114]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public JoinRoomBst() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public JoinRoomBst(JoinRoomBst other) : this() {
      roomInfo_ = other.roomInfo_ != null ? other.roomInfo_.Clone() : null;
      joinPlayerId_ = other.joinPlayerId_;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public JoinRoomBst Clone() {
      return new JoinRoomBst(this);
    }

    /// <summary>Field number for the "room_info" field.</summary>
    public const int RoomInfoFieldNumber = 1;
    private global::com.unity.mgobe.RoomInfo roomInfo_;
    /// <summary>
    //// 新的房间信息
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::com.unity.mgobe.RoomInfo RoomInfo {
      get { return roomInfo_; }
      set {
        roomInfo_ = value;
      }
    }

    /// <summary>Field number for the "join_player_id" field.</summary>
    public const int JoinPlayerIdFieldNumber = 2;
    private string joinPlayerId_ = "";
    /// <summary>
    //// 加入房间openid
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string JoinPlayerId {
      get { return joinPlayerId_; }
      set {
        joinPlayerId_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as JoinRoomBst);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(JoinRoomBst other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (!object.Equals(RoomInfo, other.RoomInfo)) return false;
      if (JoinPlayerId != other.JoinPlayerId) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (roomInfo_ != null) hash ^= RoomInfo.GetHashCode();
      if (JoinPlayerId.Length != 0) hash ^= JoinPlayerId.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (roomInfo_ != null) {
        output.WriteRawTag(10);
        output.WriteMessage(RoomInfo);
      }
      if (JoinPlayerId.Length != 0) {
        output.WriteRawTag(18);
        output.WriteString(JoinPlayerId);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (roomInfo_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(RoomInfo);
      }
      if (JoinPlayerId.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(JoinPlayerId);
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(JoinRoomBst other) {
      if (other == null) {
        return;
      }
      if (other.roomInfo_ != null) {
        if (roomInfo_ == null) {
          RoomInfo = new global::com.unity.mgobe.RoomInfo();
        }
        RoomInfo.MergeFrom(other.RoomInfo);
      }
      if (other.JoinPlayerId.Length != 0) {
        JoinPlayerId = other.JoinPlayerId;
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 10: {
            if (roomInfo_ == null) {
              RoomInfo = new global::com.unity.mgobe.RoomInfo();
            }
            input.ReadMessage(RoomInfo);
            break;
          }
          case 18: {
            JoinPlayerId = input.ReadString();
            break;
          }
        }
      }
    }

  }

  /// <summary>
  ///
  ///退房广播信息（客户端）
  /// </summary>
  public sealed partial class LeaveRoomBst : pb::IMessage<LeaveRoomBst> {
    private static readonly pb::MessageParser<LeaveRoomBst> _parser = new pb::MessageParser<LeaveRoomBst>(() => new LeaveRoomBst());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<LeaveRoomBst> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::com.unity.mgobe.ProtoReflection.Descriptor.MessageTypes[115]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public LeaveRoomBst() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public LeaveRoomBst(LeaveRoomBst other) : this() {
      roomInfo_ = other.roomInfo_ != null ? other.roomInfo_.Clone() : null;
      leavePlayerId_ = other.leavePlayerId_;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public LeaveRoomBst Clone() {
      return new LeaveRoomBst(this);
    }

    /// <summary>Field number for the "room_info" field.</summary>
    public const int RoomInfoFieldNumber = 1;
    private global::com.unity.mgobe.RoomInfo roomInfo_;
    /// <summary>
    //// 新的房间信息
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::com.unity.mgobe.RoomInfo RoomInfo {
      get { return roomInfo_; }
      set {
        roomInfo_ = value;
      }
    }

    /// <summary>Field number for the "leave_player_id" field.</summary>
    public const int LeavePlayerIdFieldNumber = 2;
    private string leavePlayerId_ = "";
    /// <summary>
    //// 离开房间openid
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string LeavePlayerId {
      get { return leavePlayerId_; }
      set {
        leavePlayerId_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as LeaveRoomBst);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(LeaveRoomBst other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (!object.Equals(RoomInfo, other.RoomInfo)) return false;
      if (LeavePlayerId != other.LeavePlayerId) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (roomInfo_ != null) hash ^= RoomInfo.GetHashCode();
      if (LeavePlayerId.Length != 0) hash ^= LeavePlayerId.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (roomInfo_ != null) {
        output.WriteRawTag(10);
        output.WriteMessage(RoomInfo);
      }
      if (LeavePlayerId.Length != 0) {
        output.WriteRawTag(18);
        output.WriteString(LeavePlayerId);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (roomInfo_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(RoomInfo);
      }
      if (LeavePlayerId.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(LeavePlayerId);
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(LeaveRoomBst other) {
      if (other == null) {
        return;
      }
      if (other.roomInfo_ != null) {
        if (roomInfo_ == null) {
          RoomInfo = new global::com.unity.mgobe.RoomInfo();
        }
        RoomInfo.MergeFrom(other.RoomInfo);
      }
      if (other.LeavePlayerId.Length != 0) {
        LeavePlayerId = other.LeavePlayerId;
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 10: {
            if (roomInfo_ == null) {
              RoomInfo = new global::com.unity.mgobe.RoomInfo();
            }
            input.ReadMessage(RoomInfo);
            break;
          }
          case 18: {
            LeavePlayerId = input.ReadString();
            break;
          }
        }
      }
    }

  }

  /// <summary>
  ///
  ///踢人广播信息（客户端）
  /// </summary>
  public sealed partial class RemovePlayerBst : pb::IMessage<RemovePlayerBst> {
    private static readonly pb::MessageParser<RemovePlayerBst> _parser = new pb::MessageParser<RemovePlayerBst>(() => new RemovePlayerBst());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<RemovePlayerBst> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::com.unity.mgobe.ProtoReflection.Descriptor.MessageTypes[116]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public RemovePlayerBst() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public RemovePlayerBst(RemovePlayerBst other) : this() {
      roomInfo_ = other.roomInfo_ != null ? other.roomInfo_.Clone() : null;
      removePlayerId_ = other.removePlayerId_;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public RemovePlayerBst Clone() {
      return new RemovePlayerBst(this);
    }

    /// <summary>Field number for the "room_info" field.</summary>
    public const int RoomInfoFieldNumber = 1;
    private global::com.unity.mgobe.RoomInfo roomInfo_;
    /// <summary>
    //// 房间信息
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::com.unity.mgobe.RoomInfo RoomInfo {
      get { return roomInfo_; }
      set {
        roomInfo_ = value;
      }
    }

    /// <summary>Field number for the "remove_player_id" field.</summary>
    public const int RemovePlayerIdFieldNumber = 2;
    private string removePlayerId_ = "";
    /// <summary>
    //// 移除的用户openid
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string RemovePlayerId {
      get { return removePlayerId_; }
      set {
        removePlayerId_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as RemovePlayerBst);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(RemovePlayerBst other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (!object.Equals(RoomInfo, other.RoomInfo)) return false;
      if (RemovePlayerId != other.RemovePlayerId) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (roomInfo_ != null) hash ^= RoomInfo.GetHashCode();
      if (RemovePlayerId.Length != 0) hash ^= RemovePlayerId.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (roomInfo_ != null) {
        output.WriteRawTag(10);
        output.WriteMessage(RoomInfo);
      }
      if (RemovePlayerId.Length != 0) {
        output.WriteRawTag(18);
        output.WriteString(RemovePlayerId);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (roomInfo_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(RoomInfo);
      }
      if (RemovePlayerId.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(RemovePlayerId);
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(RemovePlayerBst other) {
      if (other == null) {
        return;
      }
      if (other.roomInfo_ != null) {
        if (roomInfo_ == null) {
          RoomInfo = new global::com.unity.mgobe.RoomInfo();
        }
        RoomInfo.MergeFrom(other.RoomInfo);
      }
      if (other.RemovePlayerId.Length != 0) {
        RemovePlayerId = other.RemovePlayerId;
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 10: {
            if (roomInfo_ == null) {
              RoomInfo = new global::com.unity.mgobe.RoomInfo();
            }
            input.ReadMessage(RoomInfo);
            break;
          }
          case 18: {
            RemovePlayerId = input.ReadString();
            break;
          }
        }
      }
    }

  }

  /// <summary>
  ///
  ///解散房间广播信息（客户端）
  /// </summary>
  public sealed partial class DismissRoomBst : pb::IMessage<DismissRoomBst> {
    private static readonly pb::MessageParser<DismissRoomBst> _parser = new pb::MessageParser<DismissRoomBst>(() => new DismissRoomBst());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<DismissRoomBst> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::com.unity.mgobe.ProtoReflection.Descriptor.MessageTypes[117]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public DismissRoomBst() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public DismissRoomBst(DismissRoomBst other) : this() {
      roomInfo_ = other.roomInfo_ != null ? other.roomInfo_.Clone() : null;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public DismissRoomBst Clone() {
      return new DismissRoomBst(this);
    }

    /// <summary>Field number for the "room_info" field.</summary>
    public const int RoomInfoFieldNumber = 1;
    private global::com.unity.mgobe.RoomInfo roomInfo_;
    /// <summary>
    //// 房间信息， 只设置roomid
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::com.unity.mgobe.RoomInfo RoomInfo {
      get { return roomInfo_; }
      set {
        roomInfo_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as DismissRoomBst);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(DismissRoomBst other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (!object.Equals(RoomInfo, other.RoomInfo)) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (roomInfo_ != null) hash ^= RoomInfo.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (roomInfo_ != null) {
        output.WriteRawTag(10);
        output.WriteMessage(RoomInfo);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (roomInfo_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(RoomInfo);
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(DismissRoomBst other) {
      if (other == null) {
        return;
      }
      if (other.roomInfo_ != null) {
        if (roomInfo_ == null) {
          RoomInfo = new global::com.unity.mgobe.RoomInfo();
        }
        RoomInfo.MergeFrom(other.RoomInfo);
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 10: {
            if (roomInfo_ == null) {
              RoomInfo = new global::com.unity.mgobe.RoomInfo();
            }
            input.ReadMessage(RoomInfo);
            break;
          }
        }
      }
    }

  }

  /// <summary>
  ///
  ///房间属性变更广播信息（客户端）
  /// </summary>
  public sealed partial class ChangeRoomBst : pb::IMessage<ChangeRoomBst> {
    private static readonly pb::MessageParser<ChangeRoomBst> _parser = new pb::MessageParser<ChangeRoomBst>(() => new ChangeRoomBst());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<ChangeRoomBst> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::com.unity.mgobe.ProtoReflection.Descriptor.MessageTypes[118]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ChangeRoomBst() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ChangeRoomBst(ChangeRoomBst other) : this() {
      roomInfo_ = other.roomInfo_ != null ? other.roomInfo_.Clone() : null;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ChangeRoomBst Clone() {
      return new ChangeRoomBst(this);
    }

    /// <summary>Field number for the "room_info" field.</summary>
    public const int RoomInfoFieldNumber = 1;
    private global::com.unity.mgobe.RoomInfo roomInfo_;
    /// <summary>
    //// 变更后房间信息
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::com.unity.mgobe.RoomInfo RoomInfo {
      get { return roomInfo_; }
      set {
        roomInfo_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as ChangeRoomBst);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(ChangeRoomBst other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (!object.Equals(RoomInfo, other.RoomInfo)) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (roomInfo_ != null) hash ^= RoomInfo.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (roomInfo_ != null) {
        output.WriteRawTag(10);
        output.WriteMessage(RoomInfo);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (roomInfo_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(RoomInfo);
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(ChangeRoomBst other) {
      if (other == null) {
        return;
      }
      if (other.roomInfo_ != null) {
        if (roomInfo_ == null) {
          RoomInfo = new global::com.unity.mgobe.RoomInfo();
        }
        RoomInfo.MergeFrom(other.RoomInfo);
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 10: {
            if (roomInfo_ == null) {
              RoomInfo = new global::com.unity.mgobe.RoomInfo();
            }
            input.ReadMessage(RoomInfo);
            break;
          }
        }
      }
    }

  }

  /// <summary>
  ///
  ///房间消息信息广播（客户端）
  /// </summary>
  public sealed partial class RecvFromClientBst : pb::IMessage<RecvFromClientBst> {
    private static readonly pb::MessageParser<RecvFromClientBst> _parser = new pb::MessageParser<RecvFromClientBst>(() => new RecvFromClientBst());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<RecvFromClientBst> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::com.unity.mgobe.ProtoReflection.Descriptor.MessageTypes[119]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public RecvFromClientBst() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public RecvFromClientBst(RecvFromClientBst other) : this() {
      roomId_ = other.roomId_;
      sendPlayerId_ = other.sendPlayerId_;
      msg_ = other.msg_;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public RecvFromClientBst Clone() {
      return new RecvFromClientBst(this);
    }

    /// <summary>Field number for the "room_id" field.</summary>
    public const int RoomIdFieldNumber = 1;
    private string roomId_ = "";
    /// <summary>
    //// 房间id
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string RoomId {
      get { return roomId_; }
      set {
        roomId_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "send_player_id" field.</summary>
    public const int SendPlayerIdFieldNumber = 2;
    private string sendPlayerId_ = "";
    /// <summary>
    //// 发送信息的用户
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string SendPlayerId {
      get { return sendPlayerId_; }
      set {
        sendPlayerId_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "msg" field.</summary>
    public const int MsgFieldNumber = 3;
    private string msg_ = "";
    /// <summary>
    //// 消息详细内容
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string Msg {
      get { return msg_; }
      set {
        msg_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as RecvFromClientBst);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(RecvFromClientBst other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (RoomId != other.RoomId) return false;
      if (SendPlayerId != other.SendPlayerId) return false;
      if (Msg != other.Msg) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (RoomId.Length != 0) hash ^= RoomId.GetHashCode();
      if (SendPlayerId.Length != 0) hash ^= SendPlayerId.GetHashCode();
      if (Msg.Length != 0) hash ^= Msg.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (RoomId.Length != 0) {
        output.WriteRawTag(10);
        output.WriteString(RoomId);
      }
      if (SendPlayerId.Length != 0) {
        output.WriteRawTag(18);
        output.WriteString(SendPlayerId);
      }
      if (Msg.Length != 0) {
        output.WriteRawTag(26);
        output.WriteString(Msg);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (RoomId.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(RoomId);
      }
      if (SendPlayerId.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(SendPlayerId);
      }
      if (Msg.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(Msg);
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(RecvFromClientBst other) {
      if (other == null) {
        return;
      }
      if (other.RoomId.Length != 0) {
        RoomId = other.RoomId;
      }
      if (other.SendPlayerId.Length != 0) {
        SendPlayerId = other.SendPlayerId;
      }
      if (other.Msg.Length != 0) {
        Msg = other.Msg;
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 10: {
            RoomId = input.ReadString();
            break;
          }
          case 18: {
            SendPlayerId = input.ReadString();
            break;
          }
          case 26: {
            Msg = input.ReadString();
            break;
          }
        }
      }
    }

  }

  /// <summary>
  ///
  ///更改用户状态广播（客户端）
  /// </summary>
  public sealed partial class ChangeCustomPlayerStatusBst : pb::IMessage<ChangeCustomPlayerStatusBst> {
    private static readonly pb::MessageParser<ChangeCustomPlayerStatusBst> _parser = new pb::MessageParser<ChangeCustomPlayerStatusBst>(() => new ChangeCustomPlayerStatusBst());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<ChangeCustomPlayerStatusBst> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::com.unity.mgobe.ProtoReflection.Descriptor.MessageTypes[120]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ChangeCustomPlayerStatusBst() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ChangeCustomPlayerStatusBst(ChangeCustomPlayerStatusBst other) : this() {
      changePlayerId_ = other.changePlayerId_;
      customPlayerStatus_ = other.customPlayerStatus_;
      roomInfo_ = other.roomInfo_ != null ? other.roomInfo_.Clone() : null;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ChangeCustomPlayerStatusBst Clone() {
      return new ChangeCustomPlayerStatusBst(this);
    }

    /// <summary>Field number for the "change_player_id" field.</summary>
    public const int ChangePlayerIdFieldNumber = 1;
    private string changePlayerId_ = "";
    /// <summary>
    //// 变更的用户
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string ChangePlayerId {
      get { return changePlayerId_; }
      set {
        changePlayerId_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "custom_player_status" field.</summary>
    public const int CustomPlayerStatusFieldNumber = 2;
    private ulong customPlayerStatus_;
    /// <summary>
    //// 用户状态
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ulong CustomPlayerStatus {
      get { return customPlayerStatus_; }
      set {
        customPlayerStatus_ = value;
      }
    }

    /// <summary>Field number for the "room_info" field.</summary>
    public const int RoomInfoFieldNumber = 3;
    private global::com.unity.mgobe.RoomInfo roomInfo_;
    /// <summary>
    //// 房间信息
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::com.unity.mgobe.RoomInfo RoomInfo {
      get { return roomInfo_; }
      set {
        roomInfo_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as ChangeCustomPlayerStatusBst);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(ChangeCustomPlayerStatusBst other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (ChangePlayerId != other.ChangePlayerId) return false;
      if (CustomPlayerStatus != other.CustomPlayerStatus) return false;
      if (!object.Equals(RoomInfo, other.RoomInfo)) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (ChangePlayerId.Length != 0) hash ^= ChangePlayerId.GetHashCode();
      if (CustomPlayerStatus != 0UL) hash ^= CustomPlayerStatus.GetHashCode();
      if (roomInfo_ != null) hash ^= RoomInfo.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (ChangePlayerId.Length != 0) {
        output.WriteRawTag(10);
        output.WriteString(ChangePlayerId);
      }
      if (CustomPlayerStatus != 0UL) {
        output.WriteRawTag(16);
        output.WriteUInt64(CustomPlayerStatus);
      }
      if (roomInfo_ != null) {
        output.WriteRawTag(26);
        output.WriteMessage(RoomInfo);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (ChangePlayerId.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(ChangePlayerId);
      }
      if (CustomPlayerStatus != 0UL) {
        size += 1 + pb::CodedOutputStream.ComputeUInt64Size(CustomPlayerStatus);
      }
      if (roomInfo_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(RoomInfo);
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(ChangeCustomPlayerStatusBst other) {
      if (other == null) {
        return;
      }
      if (other.ChangePlayerId.Length != 0) {
        ChangePlayerId = other.ChangePlayerId;
      }
      if (other.CustomPlayerStatus != 0UL) {
        CustomPlayerStatus = other.CustomPlayerStatus;
      }
      if (other.roomInfo_ != null) {
        if (roomInfo_ == null) {
          RoomInfo = new global::com.unity.mgobe.RoomInfo();
        }
        RoomInfo.MergeFrom(other.RoomInfo);
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 10: {
            ChangePlayerId = input.ReadString();
            break;
          }
          case 16: {
            CustomPlayerStatus = input.ReadUInt64();
            break;
          }
          case 26: {
            if (roomInfo_ == null) {
              RoomInfo = new global::com.unity.mgobe.RoomInfo();
            }
            input.ReadMessage(RoomInfo);
            break;
          }
        }
      }
    }

  }

  /// <summary>
  ///
  ///更改用户网络状态广播（客户端）
  /// </summary>
  public sealed partial class ChangePlayerNetworkStateBst : pb::IMessage<ChangePlayerNetworkStateBst> {
    private static readonly pb::MessageParser<ChangePlayerNetworkStateBst> _parser = new pb::MessageParser<ChangePlayerNetworkStateBst>(() => new ChangePlayerNetworkStateBst());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<ChangePlayerNetworkStateBst> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::com.unity.mgobe.ProtoReflection.Descriptor.MessageTypes[121]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ChangePlayerNetworkStateBst() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ChangePlayerNetworkStateBst(ChangePlayerNetworkStateBst other) : this() {
      changePlayerId_ = other.changePlayerId_;
      networkState_ = other.networkState_;
      roomInfo_ = other.roomInfo_ != null ? other.roomInfo_.Clone() : null;
      groupIdList_ = other.groupIdList_.Clone();
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ChangePlayerNetworkStateBst Clone() {
      return new ChangePlayerNetworkStateBst(this);
    }

    /// <summary>Field number for the "change_player_id" field.</summary>
    public const int ChangePlayerIdFieldNumber = 1;
    private string changePlayerId_ = "";
    /// <summary>
    //// 变更的用户
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string ChangePlayerId {
      get { return changePlayerId_; }
      set {
        changePlayerId_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "network_state" field.</summary>
    public const int NetworkStateFieldNumber = 2;
    private global::com.unity.mgobe.NetworkState networkState_ = 0;
    /// <summary>
    //// 用户状态, 包括房间内状态和游戏中状态两种（客户端区分）
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::com.unity.mgobe.NetworkState NetworkState {
      get { return networkState_; }
      set {
        networkState_ = value;
      }
    }

    /// <summary>Field number for the "room_info" field.</summary>
    public const int RoomInfoFieldNumber = 3;
    private global::com.unity.mgobe.RoomInfo roomInfo_;
    /// <summary>
    //// 房间信息
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::com.unity.mgobe.RoomInfo RoomInfo {
      get { return roomInfo_; }
      set {
        roomInfo_ = value;
      }
    }

    /// <summary>Field number for the "group_id_list" field.</summary>
    public const int GroupIdListFieldNumber = 4;
    private static readonly pb::FieldCodec<string> _repeated_groupIdList_codec
        = pb::FieldCodec.ForString(34);
    private readonly pbc::RepeatedField<string> groupIdList_ = new pbc::RepeatedField<string>();
    /// <summary>
    //// 网络状态变更的玩家和接受广播的玩家同在一个对组Id
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::RepeatedField<string> GroupIdList {
      get { return groupIdList_; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as ChangePlayerNetworkStateBst);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(ChangePlayerNetworkStateBst other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (ChangePlayerId != other.ChangePlayerId) return false;
      if (NetworkState != other.NetworkState) return false;
      if (!object.Equals(RoomInfo, other.RoomInfo)) return false;
      if(!groupIdList_.Equals(other.groupIdList_)) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (ChangePlayerId.Length != 0) hash ^= ChangePlayerId.GetHashCode();
      if (NetworkState != 0) hash ^= NetworkState.GetHashCode();
      if (roomInfo_ != null) hash ^= RoomInfo.GetHashCode();
      hash ^= groupIdList_.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (ChangePlayerId.Length != 0) {
        output.WriteRawTag(10);
        output.WriteString(ChangePlayerId);
      }
      if (NetworkState != 0) {
        output.WriteRawTag(16);
        output.WriteEnum((int) NetworkState);
      }
      if (roomInfo_ != null) {
        output.WriteRawTag(26);
        output.WriteMessage(RoomInfo);
      }
      groupIdList_.WriteTo(output, _repeated_groupIdList_codec);
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (ChangePlayerId.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(ChangePlayerId);
      }
      if (NetworkState != 0) {
        size += 1 + pb::CodedOutputStream.ComputeEnumSize((int) NetworkState);
      }
      if (roomInfo_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(RoomInfo);
      }
      size += groupIdList_.CalculateSize(_repeated_groupIdList_codec);
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(ChangePlayerNetworkStateBst other) {
      if (other == null) {
        return;
      }
      if (other.ChangePlayerId.Length != 0) {
        ChangePlayerId = other.ChangePlayerId;
      }
      if (other.NetworkState != 0) {
        NetworkState = other.NetworkState;
      }
      if (other.roomInfo_ != null) {
        if (roomInfo_ == null) {
          RoomInfo = new global::com.unity.mgobe.RoomInfo();
        }
        RoomInfo.MergeFrom(other.RoomInfo);
      }
      groupIdList_.Add(other.groupIdList_);
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 10: {
            ChangePlayerId = input.ReadString();
            break;
          }
          case 16: {
            NetworkState = (global::com.unity.mgobe.NetworkState) input.ReadEnum();
            break;
          }
          case 26: {
            if (roomInfo_ == null) {
              RoomInfo = new global::com.unity.mgobe.RoomInfo();
            }
            input.ReadMessage(RoomInfo);
            break;
          }
          case 34: {
            groupIdList_.AddEntriesFrom(input, _repeated_groupIdList_codec);
            break;
          }
        }
      }
    }

  }

  /// <summary>
  ///
  ///匹配超时广播（客户端）
  ///匹配失败也通过该接口广播，失败原因详见err_code
  /// </summary>
  public sealed partial class MatchTimeoutBst : pb::IMessage<MatchTimeoutBst> {
    private static readonly pb::MessageParser<MatchTimeoutBst> _parser = new pb::MessageParser<MatchTimeoutBst>(() => new MatchTimeoutBst());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<MatchTimeoutBst> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::com.unity.mgobe.ProtoReflection.Descriptor.MessageTypes[122]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public MatchTimeoutBst() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public MatchTimeoutBst(MatchTimeoutBst other) : this() {
      matchType_ = other.matchType_;
      errCode_ = other.errCode_;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public MatchTimeoutBst Clone() {
      return new MatchTimeoutBst(this);
    }

    /// <summary>Field number for the "match_type" field.</summary>
    public const int MatchTypeFieldNumber = 1;
    private global::com.unity.mgobe.MatchType matchType_ = 0;
    /// <summary>
    //// 匹配类型
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::com.unity.mgobe.MatchType MatchType {
      get { return matchType_; }
      set {
        matchType_ = value;
      }
    }

    /// <summary>Field number for the "err_code" field.</summary>
    public const int ErrCodeFieldNumber = 2;
    private int errCode_;
    /// <summary>
    //// 业务错误码，如果非0，表示匹配失败，0表示匹配超时
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int ErrCode {
      get { return errCode_; }
      set {
        errCode_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as MatchTimeoutBst);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(MatchTimeoutBst other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (MatchType != other.MatchType) return false;
      if (ErrCode != other.ErrCode) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (MatchType != 0) hash ^= MatchType.GetHashCode();
      if (ErrCode != 0) hash ^= ErrCode.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (MatchType != 0) {
        output.WriteRawTag(8);
        output.WriteEnum((int) MatchType);
      }
      if (ErrCode != 0) {
        output.WriteRawTag(16);
        output.WriteInt32(ErrCode);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (MatchType != 0) {
        size += 1 + pb::CodedOutputStream.ComputeEnumSize((int) MatchType);
      }
      if (ErrCode != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(ErrCode);
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(MatchTimeoutBst other) {
      if (other == null) {
        return;
      }
      if (other.MatchType != 0) {
        MatchType = other.MatchType;
      }
      if (other.ErrCode != 0) {
        ErrCode = other.ErrCode;
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 8: {
            MatchType = (global::com.unity.mgobe.MatchType) input.ReadEnum();
            break;
          }
          case 16: {
            ErrCode = input.ReadInt32();
            break;
          }
        }
      }
    }

  }

  /// <summary>
  ///
  ///小组取消匹配广播（客户端）
  /// </summary>
  public sealed partial class CancelMatchBst : pb::IMessage<CancelMatchBst> {
    private static readonly pb::MessageParser<CancelMatchBst> _parser = new pb::MessageParser<CancelMatchBst>(() => new CancelMatchBst());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<CancelMatchBst> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::com.unity.mgobe.ProtoReflection.Descriptor.MessageTypes[123]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public CancelMatchBst() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public CancelMatchBst(CancelMatchBst other) : this() {
      matchCode_ = other.matchCode_;
      playerId_ = other.playerId_;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public CancelMatchBst Clone() {
      return new CancelMatchBst(this);
    }

    /// <summary>Field number for the "match_code" field.</summary>
    public const int MatchCodeFieldNumber = 1;
    private string matchCode_ = "";
    /// <summary>
    //// 玩法id
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string MatchCode {
      get { return matchCode_; }
      set {
        matchCode_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "player_id" field.</summary>
    public const int PlayerIdFieldNumber = 2;
    private string playerId_ = "";
    /// <summary>
    //// 发起取消匹配的玩家ID
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string PlayerId {
      get { return playerId_; }
      set {
        playerId_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as CancelMatchBst);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(CancelMatchBst other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (MatchCode != other.MatchCode) return false;
      if (PlayerId != other.PlayerId) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (MatchCode.Length != 0) hash ^= MatchCode.GetHashCode();
      if (PlayerId.Length != 0) hash ^= PlayerId.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (MatchCode.Length != 0) {
        output.WriteRawTag(10);
        output.WriteString(MatchCode);
      }
      if (PlayerId.Length != 0) {
        output.WriteRawTag(18);
        output.WriteString(PlayerId);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (MatchCode.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(MatchCode);
      }
      if (PlayerId.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(PlayerId);
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(CancelMatchBst other) {
      if (other == null) {
        return;
      }
      if (other.MatchCode.Length != 0) {
        MatchCode = other.MatchCode;
      }
      if (other.PlayerId.Length != 0) {
        PlayerId = other.PlayerId;
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 10: {
            MatchCode = input.ReadString();
            break;
          }
          case 18: {
            PlayerId = input.ReadString();
            break;
          }
        }
      }
    }

  }

  /// <summary>
  ///
  ///匹配用户广播（客户端）
  ///用户匹配成功，广播给客户端
  /// </summary>
  public sealed partial class MatchPlayersBst : pb::IMessage<MatchPlayersBst> {
    private static readonly pb::MessageParser<MatchPlayersBst> _parser = new pb::MessageParser<MatchPlayersBst>(() => new MatchPlayersBst());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<MatchPlayersBst> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::com.unity.mgobe.ProtoReflection.Descriptor.MessageTypes[124]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public MatchPlayersBst() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public MatchPlayersBst(MatchPlayersBst other) : this() {
      matchType_ = other.matchType_;
      roomInfo_ = other.roomInfo_ != null ? other.roomInfo_.Clone() : null;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public MatchPlayersBst Clone() {
      return new MatchPlayersBst(this);
    }

    /// <summary>Field number for the "match_type" field.</summary>
    public const int MatchTypeFieldNumber = 1;
    private global::com.unity.mgobe.MatchType matchType_ = 0;
    /// <summary>
    //// 匹配类型
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::com.unity.mgobe.MatchType MatchType {
      get { return matchType_; }
      set {
        matchType_ = value;
      }
    }

    /// <summary>Field number for the "room_info" field.</summary>
    public const int RoomInfoFieldNumber = 2;
    private global::com.unity.mgobe.RoomInfo roomInfo_;
    /// <summary>
    //// 新的房间信息
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::com.unity.mgobe.RoomInfo RoomInfo {
      get { return roomInfo_; }
      set {
        roomInfo_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as MatchPlayersBst);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(MatchPlayersBst other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (MatchType != other.MatchType) return false;
      if (!object.Equals(RoomInfo, other.RoomInfo)) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (MatchType != 0) hash ^= MatchType.GetHashCode();
      if (roomInfo_ != null) hash ^= RoomInfo.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (MatchType != 0) {
        output.WriteRawTag(8);
        output.WriteEnum((int) MatchType);
      }
      if (roomInfo_ != null) {
        output.WriteRawTag(18);
        output.WriteMessage(RoomInfo);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (MatchType != 0) {
        size += 1 + pb::CodedOutputStream.ComputeEnumSize((int) MatchType);
      }
      if (roomInfo_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(RoomInfo);
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(MatchPlayersBst other) {
      if (other == null) {
        return;
      }
      if (other.MatchType != 0) {
        MatchType = other.MatchType;
      }
      if (other.roomInfo_ != null) {
        if (roomInfo_ == null) {
          RoomInfo = new global::com.unity.mgobe.RoomInfo();
        }
        RoomInfo.MergeFrom(other.RoomInfo);
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 8: {
            MatchType = (global::com.unity.mgobe.MatchType) input.ReadEnum();
            break;
          }
          case 18: {
            if (roomInfo_ == null) {
              RoomInfo = new global::com.unity.mgobe.RoomInfo();
            }
            input.ReadMessage(RoomInfo);
            break;
          }
        }
      }
    }

  }

  /// <summary>
  ///
  ///开始帧同步的广播
  /// </summary>
  public sealed partial class StartFrameSyncBst : pb::IMessage<StartFrameSyncBst> {
    private static readonly pb::MessageParser<StartFrameSyncBst> _parser = new pb::MessageParser<StartFrameSyncBst>(() => new StartFrameSyncBst());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<StartFrameSyncBst> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::com.unity.mgobe.ProtoReflection.Descriptor.MessageTypes[125]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public StartFrameSyncBst() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public StartFrameSyncBst(StartFrameSyncBst other) : this() {
      roomInfo_ = other.roomInfo_ != null ? other.roomInfo_.Clone() : null;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public StartFrameSyncBst Clone() {
      return new StartFrameSyncBst(this);
    }

    /// <summary>Field number for the "room_info" field.</summary>
    public const int RoomInfoFieldNumber = 1;
    private global::com.unity.mgobe.RoomInfo roomInfo_;
    /// <summary>
    //// 房间信息
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::com.unity.mgobe.RoomInfo RoomInfo {
      get { return roomInfo_; }
      set {
        roomInfo_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as StartFrameSyncBst);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(StartFrameSyncBst other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (!object.Equals(RoomInfo, other.RoomInfo)) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (roomInfo_ != null) hash ^= RoomInfo.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (roomInfo_ != null) {
        output.WriteRawTag(10);
        output.WriteMessage(RoomInfo);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (roomInfo_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(RoomInfo);
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(StartFrameSyncBst other) {
      if (other == null) {
        return;
      }
      if (other.roomInfo_ != null) {
        if (roomInfo_ == null) {
          RoomInfo = new global::com.unity.mgobe.RoomInfo();
        }
        RoomInfo.MergeFrom(other.RoomInfo);
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 10: {
            if (roomInfo_ == null) {
              RoomInfo = new global::com.unity.mgobe.RoomInfo();
            }
            input.ReadMessage(RoomInfo);
            break;
          }
        }
      }
    }

  }

  /// <summary>
  ///
  ///结束帧同步的广播
  /// </summary>
  public sealed partial class StopFrameSyncBst : pb::IMessage<StopFrameSyncBst> {
    private static readonly pb::MessageParser<StopFrameSyncBst> _parser = new pb::MessageParser<StopFrameSyncBst>(() => new StopFrameSyncBst());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<StopFrameSyncBst> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::com.unity.mgobe.ProtoReflection.Descriptor.MessageTypes[126]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public StopFrameSyncBst() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public StopFrameSyncBst(StopFrameSyncBst other) : this() {
      roomInfo_ = other.roomInfo_ != null ? other.roomInfo_.Clone() : null;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public StopFrameSyncBst Clone() {
      return new StopFrameSyncBst(this);
    }

    /// <summary>Field number for the "room_info" field.</summary>
    public const int RoomInfoFieldNumber = 1;
    private global::com.unity.mgobe.RoomInfo roomInfo_;
    /// <summary>
    //// 房间信息
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::com.unity.mgobe.RoomInfo RoomInfo {
      get { return roomInfo_; }
      set {
        roomInfo_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as StopFrameSyncBst);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(StopFrameSyncBst other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (!object.Equals(RoomInfo, other.RoomInfo)) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (roomInfo_ != null) hash ^= RoomInfo.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (roomInfo_ != null) {
        output.WriteRawTag(10);
        output.WriteMessage(RoomInfo);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (roomInfo_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(RoomInfo);
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(StopFrameSyncBst other) {
      if (other == null) {
        return;
      }
      if (other.roomInfo_ != null) {
        if (roomInfo_ == null) {
          RoomInfo = new global::com.unity.mgobe.RoomInfo();
        }
        RoomInfo.MergeFrom(other.RoomInfo);
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 10: {
            if (roomInfo_ == null) {
              RoomInfo = new global::com.unity.mgobe.RoomInfo();
            }
            input.ReadMessage(RoomInfo);
            break;
          }
        }
      }
    }

  }

  /// <summary>
  ////帧同步消息广播
  /// </summary>
  public sealed partial class RecvFrameBst : pb::IMessage<RecvFrameBst> {
    private static readonly pb::MessageParser<RecvFrameBst> _parser = new pb::MessageParser<RecvFrameBst>(() => new RecvFrameBst());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<RecvFrameBst> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::com.unity.mgobe.ProtoReflection.Descriptor.MessageTypes[127]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public RecvFrameBst() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public RecvFrameBst(RecvFrameBst other) : this() {
      frame_ = other.frame_ != null ? other.frame_.Clone() : null;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public RecvFrameBst Clone() {
      return new RecvFrameBst(this);
    }

    /// <summary>Field number for the "frame" field.</summary>
    public const int FrameFieldNumber = 1;
    private global::com.unity.mgobe.Frame frame_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::com.unity.mgobe.Frame Frame {
      get { return frame_; }
      set {
        frame_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as RecvFrameBst);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(RecvFrameBst other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (!object.Equals(Frame, other.Frame)) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (frame_ != null) hash ^= Frame.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (frame_ != null) {
        output.WriteRawTag(10);
        output.WriteMessage(Frame);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (frame_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(Frame);
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(RecvFrameBst other) {
      if (other == null) {
        return;
      }
      if (other.frame_ != null) {
        if (frame_ == null) {
          Frame = new global::com.unity.mgobe.Frame();
        }
        Frame.MergeFrom(other.Frame);
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 10: {
            if (frame_ == null) {
              Frame = new global::com.unity.mgobe.Frame();
            }
            input.ReadMessage(Frame);
            break;
          }
        }
      }
    }

  }

  public sealed partial class GameSvrCommunication : pb::IMessage<GameSvrCommunication> {
    private static readonly pb::MessageParser<GameSvrCommunication> _parser = new pb::MessageParser<GameSvrCommunication>(() => new GameSvrCommunication());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<GameSvrCommunication> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::com.unity.mgobe.ProtoReflection.Descriptor.MessageTypes[128]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public GameSvrCommunication() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public GameSvrCommunication(GameSvrCommunication other) : this() {
      type_ = other.type_;
      body_ = other.body_;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public GameSvrCommunication Clone() {
      return new GameSvrCommunication(this);
    }

    /// <summary>Field number for the "type" field.</summary>
    public const int TypeFieldNumber = 1;
    private global::com.unity.mgobe.GameSvrForwardType type_ = 0;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::com.unity.mgobe.GameSvrForwardType Type {
      get { return type_; }
      set {
        type_ = value;
      }
    }

    /// <summary>Field number for the "body" field.</summary>
    public const int BodyFieldNumber = 2;
    private pb::ByteString body_ = pb::ByteString.Empty;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pb::ByteString Body {
      get { return body_; }
      set {
        body_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as GameSvrCommunication);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(GameSvrCommunication other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (Type != other.Type) return false;
      if (Body != other.Body) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (Type != 0) hash ^= Type.GetHashCode();
      if (Body.Length != 0) hash ^= Body.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (Type != 0) {
        output.WriteRawTag(8);
        output.WriteEnum((int) Type);
      }
      if (Body.Length != 0) {
        output.WriteRawTag(18);
        output.WriteBytes(Body);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (Type != 0) {
        size += 1 + pb::CodedOutputStream.ComputeEnumSize((int) Type);
      }
      if (Body.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeBytesSize(Body);
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(GameSvrCommunication other) {
      if (other == null) {
        return;
      }
      if (other.Type != 0) {
        Type = other.Type;
      }
      if (other.Body.Length != 0) {
        Body = other.Body;
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 8: {
            Type = (global::com.unity.mgobe.GameSvrForwardType) input.ReadEnum();
            break;
          }
          case 18: {
            Body = input.ReadBytes();
            break;
          }
        }
      }
    }

  }

  public sealed partial class NotifyRelayConnectionReq : pb::IMessage<NotifyRelayConnectionReq> {
    private static readonly pb::MessageParser<NotifyRelayConnectionReq> _parser = new pb::MessageParser<NotifyRelayConnectionReq>(() => new NotifyRelayConnectionReq());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<NotifyRelayConnectionReq> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::com.unity.mgobe.ProtoReflection.Descriptor.MessageTypes[129]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public NotifyRelayConnectionReq() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public NotifyRelayConnectionReq(NotifyRelayConnectionReq other) : this() {
      roomId_ = other.roomId_;
      ip_ = other.ip_;
      port_ = other.port_;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public NotifyRelayConnectionReq Clone() {
      return new NotifyRelayConnectionReq(this);
    }

    /// <summary>Field number for the "room_id" field.</summary>
    public const int RoomIdFieldNumber = 1;
    private string roomId_ = "";
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string RoomId {
      get { return roomId_; }
      set {
        roomId_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "ip" field.</summary>
    public const int IpFieldNumber = 2;
    private string ip_ = "";
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string Ip {
      get { return ip_; }
      set {
        ip_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "port" field.</summary>
    public const int PortFieldNumber = 3;
    private uint port_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public uint Port {
      get { return port_; }
      set {
        port_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as NotifyRelayConnectionReq);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(NotifyRelayConnectionReq other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (RoomId != other.RoomId) return false;
      if (Ip != other.Ip) return false;
      if (Port != other.Port) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (RoomId.Length != 0) hash ^= RoomId.GetHashCode();
      if (Ip.Length != 0) hash ^= Ip.GetHashCode();
      if (Port != 0) hash ^= Port.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (RoomId.Length != 0) {
        output.WriteRawTag(10);
        output.WriteString(RoomId);
      }
      if (Ip.Length != 0) {
        output.WriteRawTag(18);
        output.WriteString(Ip);
      }
      if (Port != 0) {
        output.WriteRawTag(24);
        output.WriteUInt32(Port);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (RoomId.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(RoomId);
      }
      if (Ip.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(Ip);
      }
      if (Port != 0) {
        size += 1 + pb::CodedOutputStream.ComputeUInt32Size(Port);
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(NotifyRelayConnectionReq other) {
      if (other == null) {
        return;
      }
      if (other.RoomId.Length != 0) {
        RoomId = other.RoomId;
      }
      if (other.Ip.Length != 0) {
        Ip = other.Ip;
      }
      if (other.Port != 0) {
        Port = other.Port;
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 10: {
            RoomId = input.ReadString();
            break;
          }
          case 18: {
            Ip = input.ReadString();
            break;
          }
          case 24: {
            Port = input.ReadUInt32();
            break;
          }
        }
      }
    }

  }

  public sealed partial class NotifyRoomEventReq : pb::IMessage<NotifyRoomEventReq> {
    private static readonly pb::MessageParser<NotifyRoomEventReq> _parser = new pb::MessageParser<NotifyRoomEventReq>(() => new NotifyRoomEventReq());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<NotifyRoomEventReq> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::com.unity.mgobe.ProtoReflection.Descriptor.MessageTypes[130]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public NotifyRoomEventReq() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public NotifyRoomEventReq(NotifyRoomEventReq other) : this() {
      cmd_ = other.cmd_;
      msg_ = other.msg_;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public NotifyRoomEventReq Clone() {
      return new NotifyRoomEventReq(this);
    }

    /// <summary>Field number for the "cmd" field.</summary>
    public const int CmdFieldNumber = 1;
    private global::com.unity.mgobe.ServerSendClientBstWrap2Type cmd_ = 0;
    /// <summary>
    ////业务命令字
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::com.unity.mgobe.ServerSendClientBstWrap2Type Cmd {
      get { return cmd_; }
      set {
        cmd_ = value;
      }
    }

    /// <summary>Field number for the "msg" field.</summary>
    public const int MsgFieldNumber = 2;
    private pb::ByteString msg_ = pb::ByteString.Empty;
    /// <summary>
    ////业务body, 比如CreateRoomRsp
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pb::ByteString Msg {
      get { return msg_; }
      set {
        msg_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as NotifyRoomEventReq);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(NotifyRoomEventReq other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (Cmd != other.Cmd) return false;
      if (Msg != other.Msg) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (Cmd != 0) hash ^= Cmd.GetHashCode();
      if (Msg.Length != 0) hash ^= Msg.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (Cmd != 0) {
        output.WriteRawTag(8);
        output.WriteEnum((int) Cmd);
      }
      if (Msg.Length != 0) {
        output.WriteRawTag(18);
        output.WriteBytes(Msg);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (Cmd != 0) {
        size += 1 + pb::CodedOutputStream.ComputeEnumSize((int) Cmd);
      }
      if (Msg.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeBytesSize(Msg);
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(NotifyRoomEventReq other) {
      if (other == null) {
        return;
      }
      if (other.Cmd != 0) {
        Cmd = other.Cmd;
      }
      if (other.Msg.Length != 0) {
        Msg = other.Msg;
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 8: {
            Cmd = (global::com.unity.mgobe.ServerSendClientBstWrap2Type) input.ReadEnum();
            break;
          }
          case 18: {
            Msg = input.ReadBytes();
            break;
          }
        }
      }
    }

  }

  /// <summary>
  ////给自定义扩展svr发送消息
  /// </summary>
  public sealed partial class SendToGameSvrReq : pb::IMessage<SendToGameSvrReq> {
    private static readonly pb::MessageParser<SendToGameSvrReq> _parser = new pb::MessageParser<SendToGameSvrReq>(() => new SendToGameSvrReq());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<SendToGameSvrReq> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::com.unity.mgobe.ProtoReflection.Descriptor.MessageTypes[131]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public SendToGameSvrReq() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public SendToGameSvrReq(SendToGameSvrReq other) : this() {
      roomId_ = other.roomId_;
      playerId_ = other.playerId_;
      data_ = other.data_;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public SendToGameSvrReq Clone() {
      return new SendToGameSvrReq(this);
    }

    /// <summary>Field number for the "room_id" field.</summary>
    public const int RoomIdFieldNumber = 1;
    private string roomId_ = "";
    /// <summary>
    //// [rm-sdk-para]
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string RoomId {
      get { return roomId_; }
      set {
        roomId_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "player_id" field.</summary>
    public const int PlayerIdFieldNumber = 2;
    private string playerId_ = "";
    /// <summary>
    //// [rm-sdk-para]
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string PlayerId {
      get { return playerId_; }
      set {
        playerId_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "data" field.</summary>
    public const int DataFieldNumber = 3;
    private string data_ = "";
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string Data {
      get { return data_; }
      set {
        data_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as SendToGameSvrReq);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(SendToGameSvrReq other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (RoomId != other.RoomId) return false;
      if (PlayerId != other.PlayerId) return false;
      if (Data != other.Data) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (RoomId.Length != 0) hash ^= RoomId.GetHashCode();
      if (PlayerId.Length != 0) hash ^= PlayerId.GetHashCode();
      if (Data.Length != 0) hash ^= Data.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (RoomId.Length != 0) {
        output.WriteRawTag(10);
        output.WriteString(RoomId);
      }
      if (PlayerId.Length != 0) {
        output.WriteRawTag(18);
        output.WriteString(PlayerId);
      }
      if (Data.Length != 0) {
        output.WriteRawTag(26);
        output.WriteString(Data);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (RoomId.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(RoomId);
      }
      if (PlayerId.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(PlayerId);
      }
      if (Data.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(Data);
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(SendToGameSvrReq other) {
      if (other == null) {
        return;
      }
      if (other.RoomId.Length != 0) {
        RoomId = other.RoomId;
      }
      if (other.PlayerId.Length != 0) {
        PlayerId = other.PlayerId;
      }
      if (other.Data.Length != 0) {
        Data = other.Data;
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 10: {
            RoomId = input.ReadString();
            break;
          }
          case 18: {
            PlayerId = input.ReadString();
            break;
          }
          case 26: {
            Data = input.ReadString();
            break;
          }
        }
      }
    }

  }

  public sealed partial class SendToGameSvrRsp : pb::IMessage<SendToGameSvrRsp> {
    private static readonly pb::MessageParser<SendToGameSvrRsp> _parser = new pb::MessageParser<SendToGameSvrRsp>(() => new SendToGameSvrRsp());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<SendToGameSvrRsp> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::com.unity.mgobe.ProtoReflection.Descriptor.MessageTypes[132]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public SendToGameSvrRsp() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public SendToGameSvrRsp(SendToGameSvrRsp other) : this() {
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public SendToGameSvrRsp Clone() {
      return new SendToGameSvrRsp(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as SendToGameSvrRsp);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(SendToGameSvrRsp other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(SendToGameSvrRsp other) {
      if (other == null) {
        return;
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
        }
      }
    }

  }

  /// <summary>
  ////gamesvr反向推送给客户端的消息
  /// </summary>
  public sealed partial class RecvFromGameSvrBst : pb::IMessage<RecvFromGameSvrBst> {
    private static readonly pb::MessageParser<RecvFromGameSvrBst> _parser = new pb::MessageParser<RecvFromGameSvrBst>(() => new RecvFromGameSvrBst());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<RecvFromGameSvrBst> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::com.unity.mgobe.ProtoReflection.Descriptor.MessageTypes[133]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public RecvFromGameSvrBst() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public RecvFromGameSvrBst(RecvFromGameSvrBst other) : this() {
      roomId_ = other.roomId_;
      recvPlayerIdList_ = other.recvPlayerIdList_.Clone();
      data_ = other.data_;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public RecvFromGameSvrBst Clone() {
      return new RecvFromGameSvrBst(this);
    }

    /// <summary>Field number for the "room_id" field.</summary>
    public const int RoomIdFieldNumber = 1;
    private string roomId_ = "";
    /// <summary>
    ////必填
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string RoomId {
      get { return roomId_; }
      set {
        roomId_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "recv_player_id_list" field.</summary>
    public const int RecvPlayerIdListFieldNumber = 2;
    private static readonly pb::FieldCodec<string> _repeated_recvPlayerIdList_codec
        = pb::FieldCodec.ForString(18);
    private readonly pbc::RepeatedField<string> recvPlayerIdList_ = new pbc::RepeatedField<string>();
    /// <summary>
    //// 要推送的用户列表, 为空则给对局内所有成员推送
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::RepeatedField<string> RecvPlayerIdList {
      get { return recvPlayerIdList_; }
    }

    /// <summary>Field number for the "data" field.</summary>
    public const int DataFieldNumber = 3;
    private string data_ = "";
    /// <summary>
    //// 推送的内容
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string Data {
      get { return data_; }
      set {
        data_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as RecvFromGameSvrBst);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(RecvFromGameSvrBst other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (RoomId != other.RoomId) return false;
      if(!recvPlayerIdList_.Equals(other.recvPlayerIdList_)) return false;
      if (Data != other.Data) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (RoomId.Length != 0) hash ^= RoomId.GetHashCode();
      hash ^= recvPlayerIdList_.GetHashCode();
      if (Data.Length != 0) hash ^= Data.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (RoomId.Length != 0) {
        output.WriteRawTag(10);
        output.WriteString(RoomId);
      }
      recvPlayerIdList_.WriteTo(output, _repeated_recvPlayerIdList_codec);
      if (Data.Length != 0) {
        output.WriteRawTag(26);
        output.WriteString(Data);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (RoomId.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(RoomId);
      }
      size += recvPlayerIdList_.CalculateSize(_repeated_recvPlayerIdList_codec);
      if (Data.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(Data);
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(RecvFromGameSvrBst other) {
      if (other == null) {
        return;
      }
      if (other.RoomId.Length != 0) {
        RoomId = other.RoomId;
      }
      recvPlayerIdList_.Add(other.recvPlayerIdList_);
      if (other.Data.Length != 0) {
        Data = other.Data;
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 10: {
            RoomId = input.ReadString();
            break;
          }
          case 18: {
            recvPlayerIdList_.AddEntriesFrom(input, _repeated_recvPlayerIdList_codec);
            break;
          }
          case 26: {
            Data = input.ReadString();
            break;
          }
        }
      }
    }

  }

  public sealed partial class ClientRecvFromGameSvrRsp : pb::IMessage<ClientRecvFromGameSvrRsp> {
    private static readonly pb::MessageParser<ClientRecvFromGameSvrRsp> _parser = new pb::MessageParser<ClientRecvFromGameSvrRsp>(() => new ClientRecvFromGameSvrRsp());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<ClientRecvFromGameSvrRsp> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::com.unity.mgobe.ProtoReflection.Descriptor.MessageTypes[134]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ClientRecvFromGameSvrRsp() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ClientRecvFromGameSvrRsp(ClientRecvFromGameSvrRsp other) : this() {
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ClientRecvFromGameSvrRsp Clone() {
      return new ClientRecvFromGameSvrRsp(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as ClientRecvFromGameSvrRsp);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(ClientRecvFromGameSvrRsp other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(ClientRecvFromGameSvrRsp other) {
      if (other == null) {
        return;
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
        }
      }
    }

  }

  /// <summary>
  //// 队组信息
  /// </summary>
  public sealed partial class GroupInfo : pb::IMessage<GroupInfo> {
    private static readonly pb::MessageParser<GroupInfo> _parser = new pb::MessageParser<GroupInfo>(() => new GroupInfo());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<GroupInfo> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::com.unity.mgobe.ProtoReflection.Descriptor.MessageTypes[135]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public GroupInfo() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public GroupInfo(GroupInfo other) : this() {
      id_ = other.id_;
      name_ = other.name_;
      type_ = other.type_;
      maxPlayers_ = other.maxPlayers_;
      owner_ = other.owner_;
      customProperties_ = other.customProperties_;
      createTime_ = other.createTime_;
      isForbidJoin_ = other.isForbidJoin_;
      isPersistent_ = other.isPersistent_;
      groupPlayerList_ = other.groupPlayerList_.Clone();
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public GroupInfo Clone() {
      return new GroupInfo(this);
    }

    /// <summary>Field number for the "id" field.</summary>
    public const int IdFieldNumber = 1;
    private string id_ = "";
    /// <summary>
    //// 队组id
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string Id {
      get { return id_; }
      set {
        id_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "name" field.</summary>
    public const int NameFieldNumber = 2;
    private string name_ = "";
    /// <summary>
    //// 队组名称
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string Name {
      get { return name_; }
      set {
        name_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "type" field.</summary>
    public const int TypeFieldNumber = 3;
    private global::com.unity.mgobe.GroupType type_ = 0;
    /// <summary>
    //// 队组类型
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::com.unity.mgobe.GroupType Type {
      get { return type_; }
      set {
        type_ = value;
      }
    }

    /// <summary>Field number for the "max_players" field.</summary>
    public const int MaxPlayersFieldNumber = 4;
    private ulong maxPlayers_;
    /// <summary>
    //// 队组最大用户数
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ulong MaxPlayers {
      get { return maxPlayers_; }
      set {
        maxPlayers_ = value;
      }
    }

    /// <summary>Field number for the "owner" field.</summary>
    public const int OwnerFieldNumber = 5;
    private string owner_ = "";
    /// <summary>
    //// 队组管理员
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string Owner {
      get { return owner_; }
      set {
        owner_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "custom_properties" field.</summary>
    public const int CustomPropertiesFieldNumber = 6;
    private string customProperties_ = "";
    /// <summary>
    //// 自定义队组属性
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string CustomProperties {
      get { return customProperties_; }
      set {
        customProperties_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "create_time" field.</summary>
    public const int CreateTimeFieldNumber = 7;
    private ulong createTime_;
    /// <summary>
    //// 创建时间
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ulong CreateTime {
      get { return createTime_; }
      set {
        createTime_ = value;
      }
    }

    /// <summary>Field number for the "is_forbid_join" field.</summary>
    public const int IsForbidJoinFieldNumber = 8;
    private bool isForbidJoin_;
    /// <summary>
    //// 是否禁止加人，默认false
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool IsForbidJoin {
      get { return isForbidJoin_; }
      set {
        isForbidJoin_ = value;
      }
    }

    /// <summary>Field number for the "is_persistent" field.</summary>
    public const int IsPersistentFieldNumber = 9;
    private bool isPersistent_;
    /// <summary>
    //// 是否持久化，默认false
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool IsPersistent {
      get { return isPersistent_; }
      set {
        isPersistent_ = value;
      }
    }

    /// <summary>Field number for the "group_player_list" field.</summary>
    public const int GroupPlayerListFieldNumber = 10;
    private static readonly pb::FieldCodec<global::com.unity.mgobe.GroupPlayerInfo> _repeated_groupPlayerList_codec
        = pb::FieldCodec.ForMessage(82, global::com.unity.mgobe.GroupPlayerInfo.Parser);
    private readonly pbc::RepeatedField<global::com.unity.mgobe.GroupPlayerInfo> groupPlayerList_ = new pbc::RepeatedField<global::com.unity.mgobe.GroupPlayerInfo>();
    /// <summary>
    //// 对组内用户列表
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::RepeatedField<global::com.unity.mgobe.GroupPlayerInfo> GroupPlayerList {
      get { return groupPlayerList_; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as GroupInfo);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(GroupInfo other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (Id != other.Id) return false;
      if (Name != other.Name) return false;
      if (Type != other.Type) return false;
      if (MaxPlayers != other.MaxPlayers) return false;
      if (Owner != other.Owner) return false;
      if (CustomProperties != other.CustomProperties) return false;
      if (CreateTime != other.CreateTime) return false;
      if (IsForbidJoin != other.IsForbidJoin) return false;
      if (IsPersistent != other.IsPersistent) return false;
      if(!groupPlayerList_.Equals(other.groupPlayerList_)) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (Id.Length != 0) hash ^= Id.GetHashCode();
      if (Name.Length != 0) hash ^= Name.GetHashCode();
      if (Type != 0) hash ^= Type.GetHashCode();
      if (MaxPlayers != 0UL) hash ^= MaxPlayers.GetHashCode();
      if (Owner.Length != 0) hash ^= Owner.GetHashCode();
      if (CustomProperties.Length != 0) hash ^= CustomProperties.GetHashCode();
      if (CreateTime != 0UL) hash ^= CreateTime.GetHashCode();
      if (IsForbidJoin != false) hash ^= IsForbidJoin.GetHashCode();
      if (IsPersistent != false) hash ^= IsPersistent.GetHashCode();
      hash ^= groupPlayerList_.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (Id.Length != 0) {
        output.WriteRawTag(10);
        output.WriteString(Id);
      }
      if (Name.Length != 0) {
        output.WriteRawTag(18);
        output.WriteString(Name);
      }
      if (Type != 0) {
        output.WriteRawTag(24);
        output.WriteEnum((int) Type);
      }
      if (MaxPlayers != 0UL) {
        output.WriteRawTag(32);
        output.WriteUInt64(MaxPlayers);
      }
      if (Owner.Length != 0) {
        output.WriteRawTag(42);
        output.WriteString(Owner);
      }
      if (CustomProperties.Length != 0) {
        output.WriteRawTag(50);
        output.WriteString(CustomProperties);
      }
      if (CreateTime != 0UL) {
        output.WriteRawTag(56);
        output.WriteUInt64(CreateTime);
      }
      if (IsForbidJoin != false) {
        output.WriteRawTag(64);
        output.WriteBool(IsForbidJoin);
      }
      if (IsPersistent != false) {
        output.WriteRawTag(72);
        output.WriteBool(IsPersistent);
      }
      groupPlayerList_.WriteTo(output, _repeated_groupPlayerList_codec);
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (Id.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(Id);
      }
      if (Name.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(Name);
      }
      if (Type != 0) {
        size += 1 + pb::CodedOutputStream.ComputeEnumSize((int) Type);
      }
      if (MaxPlayers != 0UL) {
        size += 1 + pb::CodedOutputStream.ComputeUInt64Size(MaxPlayers);
      }
      if (Owner.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(Owner);
      }
      if (CustomProperties.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(CustomProperties);
      }
      if (CreateTime != 0UL) {
        size += 1 + pb::CodedOutputStream.ComputeUInt64Size(CreateTime);
      }
      if (IsForbidJoin != false) {
        size += 1 + 1;
      }
      if (IsPersistent != false) {
        size += 1 + 1;
      }
      size += groupPlayerList_.CalculateSize(_repeated_groupPlayerList_codec);
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(GroupInfo other) {
      if (other == null) {
        return;
      }
      if (other.Id.Length != 0) {
        Id = other.Id;
      }
      if (other.Name.Length != 0) {
        Name = other.Name;
      }
      if (other.Type != 0) {
        Type = other.Type;
      }
      if (other.MaxPlayers != 0UL) {
        MaxPlayers = other.MaxPlayers;
      }
      if (other.Owner.Length != 0) {
        Owner = other.Owner;
      }
      if (other.CustomProperties.Length != 0) {
        CustomProperties = other.CustomProperties;
      }
      if (other.CreateTime != 0UL) {
        CreateTime = other.CreateTime;
      }
      if (other.IsForbidJoin != false) {
        IsForbidJoin = other.IsForbidJoin;
      }
      if (other.IsPersistent != false) {
        IsPersistent = other.IsPersistent;
      }
      groupPlayerList_.Add(other.groupPlayerList_);
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 10: {
            Id = input.ReadString();
            break;
          }
          case 18: {
            Name = input.ReadString();
            break;
          }
          case 24: {
            Type = (global::com.unity.mgobe.GroupType) input.ReadEnum();
            break;
          }
          case 32: {
            MaxPlayers = input.ReadUInt64();
            break;
          }
          case 42: {
            Owner = input.ReadString();
            break;
          }
          case 50: {
            CustomProperties = input.ReadString();
            break;
          }
          case 56: {
            CreateTime = input.ReadUInt64();
            break;
          }
          case 64: {
            IsForbidJoin = input.ReadBool();
            break;
          }
          case 72: {
            IsPersistent = input.ReadBool();
            break;
          }
          case 82: {
            groupPlayerList_.AddEntriesFrom(input, _repeated_groupPlayerList_codec);
            break;
          }
        }
      }
    }

  }

  /// <summary>
  //// 队组玩家信息
  /// </summary>
  public sealed partial class GroupPlayerInfo : pb::IMessage<GroupPlayerInfo> {
    private static readonly pb::MessageParser<GroupPlayerInfo> _parser = new pb::MessageParser<GroupPlayerInfo>(() => new GroupPlayerInfo());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<GroupPlayerInfo> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::com.unity.mgobe.ProtoReflection.Descriptor.MessageTypes[136]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public GroupPlayerInfo() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public GroupPlayerInfo(GroupPlayerInfo other) : this() {
      id_ = other.id_;
      name_ = other.name_;
      customGroupPlayerStatus_ = other.customGroupPlayerStatus_;
      customGroupPlayerProfile_ = other.customGroupPlayerProfile_;
      commonGroupNetworkState_ = other.commonGroupNetworkState_;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public GroupPlayerInfo Clone() {
      return new GroupPlayerInfo(this);
    }

    /// <summary>Field number for the "id" field.</summary>
    public const int IdFieldNumber = 1;
    private string id_ = "";
    /// <summary>
    //// [rm-sdk-para] 玩家 ID（系统生成）
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string Id {
      get { return id_; }
      set {
        id_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "name" field.</summary>
    public const int NameFieldNumber = 2;
    private string name_ = "";
    /// <summary>
    //// 玩家昵称
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string Name {
      get { return name_; }
      set {
        name_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "custom_group_player_status" field.</summary>
    public const int CustomGroupPlayerStatusFieldNumber = 3;
    private ulong customGroupPlayerStatus_;
    /// <summary>
    //// 自定义玩家状态
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ulong CustomGroupPlayerStatus {
      get { return customGroupPlayerStatus_; }
      set {
        customGroupPlayerStatus_ = value;
      }
    }

    /// <summary>Field number for the "custom_group_player_profile" field.</summary>
    public const int CustomGroupPlayerProfileFieldNumber = 4;
    private string customGroupPlayerProfile_ = "";
    /// <summary>
    //// 自定义玩家信息
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string CustomGroupPlayerProfile {
      get { return customGroupPlayerProfile_; }
      set {
        customGroupPlayerProfile_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "common_group_network_state" field.</summary>
    public const int CommonGroupNetworkStateFieldNumber = 5;
    private global::com.unity.mgobe.NetworkState commonGroupNetworkState_ = 0;
    /// <summary>
    //// [rm-sdk-para] common链路网络状态：0掉线；1在线
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::com.unity.mgobe.NetworkState CommonGroupNetworkState {
      get { return commonGroupNetworkState_; }
      set {
        commonGroupNetworkState_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as GroupPlayerInfo);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(GroupPlayerInfo other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (Id != other.Id) return false;
      if (Name != other.Name) return false;
      if (CustomGroupPlayerStatus != other.CustomGroupPlayerStatus) return false;
      if (CustomGroupPlayerProfile != other.CustomGroupPlayerProfile) return false;
      if (CommonGroupNetworkState != other.CommonGroupNetworkState) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (Id.Length != 0) hash ^= Id.GetHashCode();
      if (Name.Length != 0) hash ^= Name.GetHashCode();
      if (CustomGroupPlayerStatus != 0UL) hash ^= CustomGroupPlayerStatus.GetHashCode();
      if (CustomGroupPlayerProfile.Length != 0) hash ^= CustomGroupPlayerProfile.GetHashCode();
      if (CommonGroupNetworkState != 0) hash ^= CommonGroupNetworkState.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (Id.Length != 0) {
        output.WriteRawTag(10);
        output.WriteString(Id);
      }
      if (Name.Length != 0) {
        output.WriteRawTag(18);
        output.WriteString(Name);
      }
      if (CustomGroupPlayerStatus != 0UL) {
        output.WriteRawTag(24);
        output.WriteUInt64(CustomGroupPlayerStatus);
      }
      if (CustomGroupPlayerProfile.Length != 0) {
        output.WriteRawTag(34);
        output.WriteString(CustomGroupPlayerProfile);
      }
      if (CommonGroupNetworkState != 0) {
        output.WriteRawTag(40);
        output.WriteEnum((int) CommonGroupNetworkState);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (Id.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(Id);
      }
      if (Name.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(Name);
      }
      if (CustomGroupPlayerStatus != 0UL) {
        size += 1 + pb::CodedOutputStream.ComputeUInt64Size(CustomGroupPlayerStatus);
      }
      if (CustomGroupPlayerProfile.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(CustomGroupPlayerProfile);
      }
      if (CommonGroupNetworkState != 0) {
        size += 1 + pb::CodedOutputStream.ComputeEnumSize((int) CommonGroupNetworkState);
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(GroupPlayerInfo other) {
      if (other == null) {
        return;
      }
      if (other.Id.Length != 0) {
        Id = other.Id;
      }
      if (other.Name.Length != 0) {
        Name = other.Name;
      }
      if (other.CustomGroupPlayerStatus != 0UL) {
        CustomGroupPlayerStatus = other.CustomGroupPlayerStatus;
      }
      if (other.CustomGroupPlayerProfile.Length != 0) {
        CustomGroupPlayerProfile = other.CustomGroupPlayerProfile;
      }
      if (other.CommonGroupNetworkState != 0) {
        CommonGroupNetworkState = other.CommonGroupNetworkState;
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 10: {
            Id = input.ReadString();
            break;
          }
          case 18: {
            Name = input.ReadString();
            break;
          }
          case 24: {
            CustomGroupPlayerStatus = input.ReadUInt64();
            break;
          }
          case 34: {
            CustomGroupPlayerProfile = input.ReadString();
            break;
          }
          case 40: {
            CommonGroupNetworkState = (global::com.unity.mgobe.NetworkState) input.ReadEnum();
            break;
          }
        }
      }
    }

  }

  /// <summary>
  //// 创建队组请求
  /// </summary>
  public sealed partial class CreateGroupReq : pb::IMessage<CreateGroupReq> {
    private static readonly pb::MessageParser<CreateGroupReq> _parser = new pb::MessageParser<CreateGroupReq>(() => new CreateGroupReq());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<CreateGroupReq> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::com.unity.mgobe.ProtoReflection.Descriptor.MessageTypes[137]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public CreateGroupReq() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public CreateGroupReq(CreateGroupReq other) : this() {
      groupName_ = other.groupName_;
      groupType_ = other.groupType_;
      maxPlayers_ = other.maxPlayers_;
      customProperties_ = other.customProperties_;
      playerInfo_ = other.playerInfo_ != null ? other.playerInfo_.Clone() : null;
      isForbidJoin_ = other.isForbidJoin_;
      isPersistent_ = other.isPersistent_;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public CreateGroupReq Clone() {
      return new CreateGroupReq(this);
    }

    /// <summary>Field number for the "group_name" field.</summary>
    public const int GroupNameFieldNumber = 1;
    private string groupName_ = "";
    /// <summary>
    //// 队组名称
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string GroupName {
      get { return groupName_; }
      set {
        groupName_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "group_type" field.</summary>
    public const int GroupTypeFieldNumber = 2;
    private global::com.unity.mgobe.GroupType groupType_ = 0;
    /// <summary>
    //// 队组类型
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::com.unity.mgobe.GroupType GroupType {
      get { return groupType_; }
      set {
        groupType_ = value;
      }
    }

    /// <summary>Field number for the "max_players" field.</summary>
    public const int MaxPlayersFieldNumber = 3;
    private ulong maxPlayers_;
    /// <summary>
    //// 队组最大用户数，默认100
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ulong MaxPlayers {
      get { return maxPlayers_; }
      set {
        maxPlayers_ = value;
      }
    }

    /// <summary>Field number for the "custom_properties" field.</summary>
    public const int CustomPropertiesFieldNumber = 4;
    private string customProperties_ = "";
    /// <summary>
    //// 自定义队组属性
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string CustomProperties {
      get { return customProperties_; }
      set {
        customProperties_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "player_info" field.</summary>
    public const int PlayerInfoFieldNumber = 5;
    private global::com.unity.mgobe.GroupPlayerInfo playerInfo_;
    /// <summary>
    //// 用户信息
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::com.unity.mgobe.GroupPlayerInfo PlayerInfo {
      get { return playerInfo_; }
      set {
        playerInfo_ = value;
      }
    }

    /// <summary>Field number for the "is_forbid_join" field.</summary>
    public const int IsForbidJoinFieldNumber = 6;
    private bool isForbidJoin_;
    /// <summary>
    //// 是否禁止加人，默认false
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool IsForbidJoin {
      get { return isForbidJoin_; }
      set {
        isForbidJoin_ = value;
      }
    }

    /// <summary>Field number for the "is_persistent" field.</summary>
    public const int IsPersistentFieldNumber = 7;
    private bool isPersistent_;
    /// <summary>
    //// 是否持久化，默认false
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool IsPersistent {
      get { return isPersistent_; }
      set {
        isPersistent_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as CreateGroupReq);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(CreateGroupReq other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (GroupName != other.GroupName) return false;
      if (GroupType != other.GroupType) return false;
      if (MaxPlayers != other.MaxPlayers) return false;
      if (CustomProperties != other.CustomProperties) return false;
      if (!object.Equals(PlayerInfo, other.PlayerInfo)) return false;
      if (IsForbidJoin != other.IsForbidJoin) return false;
      if (IsPersistent != other.IsPersistent) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (GroupName.Length != 0) hash ^= GroupName.GetHashCode();
      if (GroupType != 0) hash ^= GroupType.GetHashCode();
      if (MaxPlayers != 0UL) hash ^= MaxPlayers.GetHashCode();
      if (CustomProperties.Length != 0) hash ^= CustomProperties.GetHashCode();
      if (playerInfo_ != null) hash ^= PlayerInfo.GetHashCode();
      if (IsForbidJoin != false) hash ^= IsForbidJoin.GetHashCode();
      if (IsPersistent != false) hash ^= IsPersistent.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (GroupName.Length != 0) {
        output.WriteRawTag(10);
        output.WriteString(GroupName);
      }
      if (GroupType != 0) {
        output.WriteRawTag(16);
        output.WriteEnum((int) GroupType);
      }
      if (MaxPlayers != 0UL) {
        output.WriteRawTag(24);
        output.WriteUInt64(MaxPlayers);
      }
      if (CustomProperties.Length != 0) {
        output.WriteRawTag(34);
        output.WriteString(CustomProperties);
      }
      if (playerInfo_ != null) {
        output.WriteRawTag(42);
        output.WriteMessage(PlayerInfo);
      }
      if (IsForbidJoin != false) {
        output.WriteRawTag(48);
        output.WriteBool(IsForbidJoin);
      }
      if (IsPersistent != false) {
        output.WriteRawTag(56);
        output.WriteBool(IsPersistent);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (GroupName.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(GroupName);
      }
      if (GroupType != 0) {
        size += 1 + pb::CodedOutputStream.ComputeEnumSize((int) GroupType);
      }
      if (MaxPlayers != 0UL) {
        size += 1 + pb::CodedOutputStream.ComputeUInt64Size(MaxPlayers);
      }
      if (CustomProperties.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(CustomProperties);
      }
      if (playerInfo_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(PlayerInfo);
      }
      if (IsForbidJoin != false) {
        size += 1 + 1;
      }
      if (IsPersistent != false) {
        size += 1 + 1;
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(CreateGroupReq other) {
      if (other == null) {
        return;
      }
      if (other.GroupName.Length != 0) {
        GroupName = other.GroupName;
      }
      if (other.GroupType != 0) {
        GroupType = other.GroupType;
      }
      if (other.MaxPlayers != 0UL) {
        MaxPlayers = other.MaxPlayers;
      }
      if (other.CustomProperties.Length != 0) {
        CustomProperties = other.CustomProperties;
      }
      if (other.playerInfo_ != null) {
        if (playerInfo_ == null) {
          PlayerInfo = new global::com.unity.mgobe.GroupPlayerInfo();
        }
        PlayerInfo.MergeFrom(other.PlayerInfo);
      }
      if (other.IsForbidJoin != false) {
        IsForbidJoin = other.IsForbidJoin;
      }
      if (other.IsPersistent != false) {
        IsPersistent = other.IsPersistent;
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 10: {
            GroupName = input.ReadString();
            break;
          }
          case 16: {
            GroupType = (global::com.unity.mgobe.GroupType) input.ReadEnum();
            break;
          }
          case 24: {
            MaxPlayers = input.ReadUInt64();
            break;
          }
          case 34: {
            CustomProperties = input.ReadString();
            break;
          }
          case 42: {
            if (playerInfo_ == null) {
              PlayerInfo = new global::com.unity.mgobe.GroupPlayerInfo();
            }
            input.ReadMessage(PlayerInfo);
            break;
          }
          case 48: {
            IsForbidJoin = input.ReadBool();
            break;
          }
          case 56: {
            IsPersistent = input.ReadBool();
            break;
          }
        }
      }
    }

  }

  /// <summary>
  //// 创建队组响应
  /// </summary>
  public sealed partial class CreateGroupRsp : pb::IMessage<CreateGroupRsp> {
    private static readonly pb::MessageParser<CreateGroupRsp> _parser = new pb::MessageParser<CreateGroupRsp>(() => new CreateGroupRsp());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<CreateGroupRsp> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::com.unity.mgobe.ProtoReflection.Descriptor.MessageTypes[138]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public CreateGroupRsp() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public CreateGroupRsp(CreateGroupRsp other) : this() {
      groupInfo_ = other.groupInfo_ != null ? other.groupInfo_.Clone() : null;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public CreateGroupRsp Clone() {
      return new CreateGroupRsp(this);
    }

    /// <summary>Field number for the "group_info" field.</summary>
    public const int GroupInfoFieldNumber = 1;
    private global::com.unity.mgobe.GroupInfo groupInfo_;
    /// <summary>
    //// 队组信息
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::com.unity.mgobe.GroupInfo GroupInfo {
      get { return groupInfo_; }
      set {
        groupInfo_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as CreateGroupRsp);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(CreateGroupRsp other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (!object.Equals(GroupInfo, other.GroupInfo)) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (groupInfo_ != null) hash ^= GroupInfo.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (groupInfo_ != null) {
        output.WriteRawTag(10);
        output.WriteMessage(GroupInfo);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (groupInfo_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(GroupInfo);
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(CreateGroupRsp other) {
      if (other == null) {
        return;
      }
      if (other.groupInfo_ != null) {
        if (groupInfo_ == null) {
          GroupInfo = new global::com.unity.mgobe.GroupInfo();
        }
        GroupInfo.MergeFrom(other.GroupInfo);
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 10: {
            if (groupInfo_ == null) {
              GroupInfo = new global::com.unity.mgobe.GroupInfo();
            }
            input.ReadMessage(GroupInfo);
            break;
          }
        }
      }
    }

  }

  /// <summary>
  //// 加入队组请求
  /// </summary>
  public sealed partial class JoinGroupReq : pb::IMessage<JoinGroupReq> {
    private static readonly pb::MessageParser<JoinGroupReq> _parser = new pb::MessageParser<JoinGroupReq>(() => new JoinGroupReq());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<JoinGroupReq> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::com.unity.mgobe.ProtoReflection.Descriptor.MessageTypes[139]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public JoinGroupReq() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public JoinGroupReq(JoinGroupReq other) : this() {
      groupId_ = other.groupId_;
      playerInfo_ = other.playerInfo_ != null ? other.playerInfo_.Clone() : null;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public JoinGroupReq Clone() {
      return new JoinGroupReq(this);
    }

    /// <summary>Field number for the "group_id" field.</summary>
    public const int GroupIdFieldNumber = 1;
    private string groupId_ = "";
    /// <summary>
    //// [rm-sdk-para] 队组ID
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string GroupId {
      get { return groupId_; }
      set {
        groupId_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "player_info" field.</summary>
    public const int PlayerInfoFieldNumber = 2;
    private global::com.unity.mgobe.GroupPlayerInfo playerInfo_;
    /// <summary>
    //// 用户信息
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::com.unity.mgobe.GroupPlayerInfo PlayerInfo {
      get { return playerInfo_; }
      set {
        playerInfo_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as JoinGroupReq);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(JoinGroupReq other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (GroupId != other.GroupId) return false;
      if (!object.Equals(PlayerInfo, other.PlayerInfo)) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (GroupId.Length != 0) hash ^= GroupId.GetHashCode();
      if (playerInfo_ != null) hash ^= PlayerInfo.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (GroupId.Length != 0) {
        output.WriteRawTag(10);
        output.WriteString(GroupId);
      }
      if (playerInfo_ != null) {
        output.WriteRawTag(18);
        output.WriteMessage(PlayerInfo);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (GroupId.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(GroupId);
      }
      if (playerInfo_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(PlayerInfo);
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(JoinGroupReq other) {
      if (other == null) {
        return;
      }
      if (other.GroupId.Length != 0) {
        GroupId = other.GroupId;
      }
      if (other.playerInfo_ != null) {
        if (playerInfo_ == null) {
          PlayerInfo = new global::com.unity.mgobe.GroupPlayerInfo();
        }
        PlayerInfo.MergeFrom(other.PlayerInfo);
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 10: {
            GroupId = input.ReadString();
            break;
          }
          case 18: {
            if (playerInfo_ == null) {
              PlayerInfo = new global::com.unity.mgobe.GroupPlayerInfo();
            }
            input.ReadMessage(PlayerInfo);
            break;
          }
        }
      }
    }

  }

  /// <summary>
  //// 加入队组响应
  /// </summary>
  public sealed partial class JoinGroupRsp : pb::IMessage<JoinGroupRsp> {
    private static readonly pb::MessageParser<JoinGroupRsp> _parser = new pb::MessageParser<JoinGroupRsp>(() => new JoinGroupRsp());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<JoinGroupRsp> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::com.unity.mgobe.ProtoReflection.Descriptor.MessageTypes[140]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public JoinGroupRsp() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public JoinGroupRsp(JoinGroupRsp other) : this() {
      groupInfo_ = other.groupInfo_ != null ? other.groupInfo_.Clone() : null;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public JoinGroupRsp Clone() {
      return new JoinGroupRsp(this);
    }

    /// <summary>Field number for the "group_info" field.</summary>
    public const int GroupInfoFieldNumber = 1;
    private global::com.unity.mgobe.GroupInfo groupInfo_;
    /// <summary>
    //// 队组信息
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::com.unity.mgobe.GroupInfo GroupInfo {
      get { return groupInfo_; }
      set {
        groupInfo_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as JoinGroupRsp);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(JoinGroupRsp other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (!object.Equals(GroupInfo, other.GroupInfo)) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (groupInfo_ != null) hash ^= GroupInfo.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (groupInfo_ != null) {
        output.WriteRawTag(10);
        output.WriteMessage(GroupInfo);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (groupInfo_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(GroupInfo);
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(JoinGroupRsp other) {
      if (other == null) {
        return;
      }
      if (other.groupInfo_ != null) {
        if (groupInfo_ == null) {
          GroupInfo = new global::com.unity.mgobe.GroupInfo();
        }
        GroupInfo.MergeFrom(other.GroupInfo);
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 10: {
            if (groupInfo_ == null) {
              GroupInfo = new global::com.unity.mgobe.GroupInfo();
            }
            input.ReadMessage(GroupInfo);
            break;
          }
        }
      }
    }

  }

  /// <summary>
  //// 退出队组请求
  /// </summary>
  public sealed partial class LeaveGroupReq : pb::IMessage<LeaveGroupReq> {
    private static readonly pb::MessageParser<LeaveGroupReq> _parser = new pb::MessageParser<LeaveGroupReq>(() => new LeaveGroupReq());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<LeaveGroupReq> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::com.unity.mgobe.ProtoReflection.Descriptor.MessageTypes[141]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public LeaveGroupReq() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public LeaveGroupReq(LeaveGroupReq other) : this() {
      groupId_ = other.groupId_;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public LeaveGroupReq Clone() {
      return new LeaveGroupReq(this);
    }

    /// <summary>Field number for the "group_id" field.</summary>
    public const int GroupIdFieldNumber = 1;
    private string groupId_ = "";
    /// <summary>
    //// [rm-sdk-para] 队组ID
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string GroupId {
      get { return groupId_; }
      set {
        groupId_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as LeaveGroupReq);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(LeaveGroupReq other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (GroupId != other.GroupId) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (GroupId.Length != 0) hash ^= GroupId.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (GroupId.Length != 0) {
        output.WriteRawTag(10);
        output.WriteString(GroupId);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (GroupId.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(GroupId);
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(LeaveGroupReq other) {
      if (other == null) {
        return;
      }
      if (other.GroupId.Length != 0) {
        GroupId = other.GroupId;
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 10: {
            GroupId = input.ReadString();
            break;
          }
        }
      }
    }

  }

  /// <summary>
  //// 推出队组响应
  /// </summary>
  public sealed partial class LeaveGroupRsp : pb::IMessage<LeaveGroupRsp> {
    private static readonly pb::MessageParser<LeaveGroupRsp> _parser = new pb::MessageParser<LeaveGroupRsp>(() => new LeaveGroupRsp());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<LeaveGroupRsp> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::com.unity.mgobe.ProtoReflection.Descriptor.MessageTypes[142]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public LeaveGroupRsp() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public LeaveGroupRsp(LeaveGroupRsp other) : this() {
      groupInfo_ = other.groupInfo_ != null ? other.groupInfo_.Clone() : null;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public LeaveGroupRsp Clone() {
      return new LeaveGroupRsp(this);
    }

    /// <summary>Field number for the "group_info" field.</summary>
    public const int GroupInfoFieldNumber = 1;
    private global::com.unity.mgobe.GroupInfo groupInfo_;
    /// <summary>
    //// 队组信息
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::com.unity.mgobe.GroupInfo GroupInfo {
      get { return groupInfo_; }
      set {
        groupInfo_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as LeaveGroupRsp);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(LeaveGroupRsp other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (!object.Equals(GroupInfo, other.GroupInfo)) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (groupInfo_ != null) hash ^= GroupInfo.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (groupInfo_ != null) {
        output.WriteRawTag(10);
        output.WriteMessage(GroupInfo);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (groupInfo_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(GroupInfo);
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(LeaveGroupRsp other) {
      if (other == null) {
        return;
      }
      if (other.groupInfo_ != null) {
        if (groupInfo_ == null) {
          GroupInfo = new global::com.unity.mgobe.GroupInfo();
        }
        GroupInfo.MergeFrom(other.GroupInfo);
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 10: {
            if (groupInfo_ == null) {
              GroupInfo = new global::com.unity.mgobe.GroupInfo();
            }
            input.ReadMessage(GroupInfo);
            break;
          }
        }
      }
    }

  }

  /// <summary>
  //// 解散队组请求
  /// </summary>
  public sealed partial class DismissGroupReq : pb::IMessage<DismissGroupReq> {
    private static readonly pb::MessageParser<DismissGroupReq> _parser = new pb::MessageParser<DismissGroupReq>(() => new DismissGroupReq());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<DismissGroupReq> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::com.unity.mgobe.ProtoReflection.Descriptor.MessageTypes[143]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public DismissGroupReq() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public DismissGroupReq(DismissGroupReq other) : this() {
      groupId_ = other.groupId_;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public DismissGroupReq Clone() {
      return new DismissGroupReq(this);
    }

    /// <summary>Field number for the "group_id" field.</summary>
    public const int GroupIdFieldNumber = 1;
    private string groupId_ = "";
    /// <summary>
    //// [rm-sdk-para] 队组ID
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string GroupId {
      get { return groupId_; }
      set {
        groupId_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as DismissGroupReq);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(DismissGroupReq other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (GroupId != other.GroupId) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (GroupId.Length != 0) hash ^= GroupId.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (GroupId.Length != 0) {
        output.WriteRawTag(10);
        output.WriteString(GroupId);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (GroupId.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(GroupId);
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(DismissGroupReq other) {
      if (other == null) {
        return;
      }
      if (other.GroupId.Length != 0) {
        GroupId = other.GroupId;
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 10: {
            GroupId = input.ReadString();
            break;
          }
        }
      }
    }

  }

  /// <summary>
  //// 解散队组响应
  /// </summary>
  public sealed partial class DismissGroupRsp : pb::IMessage<DismissGroupRsp> {
    private static readonly pb::MessageParser<DismissGroupRsp> _parser = new pb::MessageParser<DismissGroupRsp>(() => new DismissGroupRsp());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<DismissGroupRsp> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::com.unity.mgobe.ProtoReflection.Descriptor.MessageTypes[144]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public DismissGroupRsp() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public DismissGroupRsp(DismissGroupRsp other) : this() {
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public DismissGroupRsp Clone() {
      return new DismissGroupRsp(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as DismissGroupRsp);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(DismissGroupRsp other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(DismissGroupRsp other) {
      if (other == null) {
        return;
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
        }
      }
    }

  }

  /// <summary>
  //// 修改队组请求
  /// </summary>
  public sealed partial class ChangeGroupReq : pb::IMessage<ChangeGroupReq> {
    private static readonly pb::MessageParser<ChangeGroupReq> _parser = new pb::MessageParser<ChangeGroupReq>(() => new ChangeGroupReq());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<ChangeGroupReq> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::com.unity.mgobe.ProtoReflection.Descriptor.MessageTypes[145]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ChangeGroupReq() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ChangeGroupReq(ChangeGroupReq other) : this() {
      groupId_ = other.groupId_;
      groupName_ = other.groupName_;
      owner_ = other.owner_;
      customProperties_ = other.customProperties_;
      isForbidJoin_ = other.isForbidJoin_;
      changeGroupOptionList_ = other.changeGroupOptionList_.Clone();
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ChangeGroupReq Clone() {
      return new ChangeGroupReq(this);
    }

    /// <summary>Field number for the "group_id" field.</summary>
    public const int GroupIdFieldNumber = 1;
    private string groupId_ = "";
    /// <summary>
    //// [rm-sdk-para] 队组ID
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string GroupId {
      get { return groupId_; }
      set {
        groupId_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "group_name" field.</summary>
    public const int GroupNameFieldNumber = 2;
    private string groupName_ = "";
    /// <summary>
    //// 队组名称
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string GroupName {
      get { return groupName_; }
      set {
        groupName_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "owner" field.</summary>
    public const int OwnerFieldNumber = 3;
    private string owner_ = "";
    /// <summary>
    //// 对长ID
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string Owner {
      get { return owner_; }
      set {
        owner_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "custom_properties" field.</summary>
    public const int CustomPropertiesFieldNumber = 4;
    private string customProperties_ = "";
    /// <summary>
    //// 自定义队组属性
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string CustomProperties {
      get { return customProperties_; }
      set {
        customProperties_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "is_forbid_join" field.</summary>
    public const int IsForbidJoinFieldNumber = 5;
    private bool isForbidJoin_;
    /// <summary>
    //// 是否禁止加入队组
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool IsForbidJoin {
      get { return isForbidJoin_; }
      set {
        isForbidJoin_ = value;
      }
    }

    /// <summary>Field number for the "change_group_option_list" field.</summary>
    public const int ChangeGroupOptionListFieldNumber = 6;
    private static readonly pb::FieldCodec<global::com.unity.mgobe.ChangeGroupOption> _repeated_changeGroupOptionList_codec
        = pb::FieldCodec.ForEnum(50, x => (int) x, x => (global::com.unity.mgobe.ChangeGroupOption) x);
    private readonly pbc::RepeatedField<global::com.unity.mgobe.ChangeGroupOption> changeGroupOptionList_ = new pbc::RepeatedField<global::com.unity.mgobe.ChangeGroupOption>();
    /// <summary>
    //// [rm-sdk-para] 修改字段列表
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::RepeatedField<global::com.unity.mgobe.ChangeGroupOption> ChangeGroupOptionList {
      get { return changeGroupOptionList_; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as ChangeGroupReq);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(ChangeGroupReq other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (GroupId != other.GroupId) return false;
      if (GroupName != other.GroupName) return false;
      if (Owner != other.Owner) return false;
      if (CustomProperties != other.CustomProperties) return false;
      if (IsForbidJoin != other.IsForbidJoin) return false;
      if(!changeGroupOptionList_.Equals(other.changeGroupOptionList_)) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (GroupId.Length != 0) hash ^= GroupId.GetHashCode();
      if (GroupName.Length != 0) hash ^= GroupName.GetHashCode();
      if (Owner.Length != 0) hash ^= Owner.GetHashCode();
      if (CustomProperties.Length != 0) hash ^= CustomProperties.GetHashCode();
      if (IsForbidJoin != false) hash ^= IsForbidJoin.GetHashCode();
      hash ^= changeGroupOptionList_.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (GroupId.Length != 0) {
        output.WriteRawTag(10);
        output.WriteString(GroupId);
      }
      if (GroupName.Length != 0) {
        output.WriteRawTag(18);
        output.WriteString(GroupName);
      }
      if (Owner.Length != 0) {
        output.WriteRawTag(26);
        output.WriteString(Owner);
      }
      if (CustomProperties.Length != 0) {
        output.WriteRawTag(34);
        output.WriteString(CustomProperties);
      }
      if (IsForbidJoin != false) {
        output.WriteRawTag(40);
        output.WriteBool(IsForbidJoin);
      }
      changeGroupOptionList_.WriteTo(output, _repeated_changeGroupOptionList_codec);
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (GroupId.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(GroupId);
      }
      if (GroupName.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(GroupName);
      }
      if (Owner.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(Owner);
      }
      if (CustomProperties.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(CustomProperties);
      }
      if (IsForbidJoin != false) {
        size += 1 + 1;
      }
      size += changeGroupOptionList_.CalculateSize(_repeated_changeGroupOptionList_codec);
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(ChangeGroupReq other) {
      if (other == null) {
        return;
      }
      if (other.GroupId.Length != 0) {
        GroupId = other.GroupId;
      }
      if (other.GroupName.Length != 0) {
        GroupName = other.GroupName;
      }
      if (other.Owner.Length != 0) {
        Owner = other.Owner;
      }
      if (other.CustomProperties.Length != 0) {
        CustomProperties = other.CustomProperties;
      }
      if (other.IsForbidJoin != false) {
        IsForbidJoin = other.IsForbidJoin;
      }
      changeGroupOptionList_.Add(other.changeGroupOptionList_);
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 10: {
            GroupId = input.ReadString();
            break;
          }
          case 18: {
            GroupName = input.ReadString();
            break;
          }
          case 26: {
            Owner = input.ReadString();
            break;
          }
          case 34: {
            CustomProperties = input.ReadString();
            break;
          }
          case 40: {
            IsForbidJoin = input.ReadBool();
            break;
          }
          case 50:
          case 48: {
            changeGroupOptionList_.AddEntriesFrom(input, _repeated_changeGroupOptionList_codec);
            break;
          }
        }
      }
    }

  }

  /// <summary>
  //// 修改队组响应
  /// </summary>
  public sealed partial class ChangeGroupRsp : pb::IMessage<ChangeGroupRsp> {
    private static readonly pb::MessageParser<ChangeGroupRsp> _parser = new pb::MessageParser<ChangeGroupRsp>(() => new ChangeGroupRsp());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<ChangeGroupRsp> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::com.unity.mgobe.ProtoReflection.Descriptor.MessageTypes[146]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ChangeGroupRsp() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ChangeGroupRsp(ChangeGroupRsp other) : this() {
      groupInfo_ = other.groupInfo_ != null ? other.groupInfo_.Clone() : null;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ChangeGroupRsp Clone() {
      return new ChangeGroupRsp(this);
    }

    /// <summary>Field number for the "group_info" field.</summary>
    public const int GroupInfoFieldNumber = 1;
    private global::com.unity.mgobe.GroupInfo groupInfo_;
    /// <summary>
    //// 队组信息
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::com.unity.mgobe.GroupInfo GroupInfo {
      get { return groupInfo_; }
      set {
        groupInfo_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as ChangeGroupRsp);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(ChangeGroupRsp other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (!object.Equals(GroupInfo, other.GroupInfo)) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (groupInfo_ != null) hash ^= GroupInfo.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (groupInfo_ != null) {
        output.WriteRawTag(10);
        output.WriteMessage(GroupInfo);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (groupInfo_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(GroupInfo);
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(ChangeGroupRsp other) {
      if (other == null) {
        return;
      }
      if (other.groupInfo_ != null) {
        if (groupInfo_ == null) {
          GroupInfo = new global::com.unity.mgobe.GroupInfo();
        }
        GroupInfo.MergeFrom(other.GroupInfo);
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 10: {
            if (groupInfo_ == null) {
              GroupInfo = new global::com.unity.mgobe.GroupInfo();
            }
            input.ReadMessage(GroupInfo);
            break;
          }
        }
      }
    }

  }

  /// <summary>
  //// 移除队组内玩家请求
  /// </summary>
  public sealed partial class RemoveGroupPlayerReq : pb::IMessage<RemoveGroupPlayerReq> {
    private static readonly pb::MessageParser<RemoveGroupPlayerReq> _parser = new pb::MessageParser<RemoveGroupPlayerReq>(() => new RemoveGroupPlayerReq());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<RemoveGroupPlayerReq> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::com.unity.mgobe.ProtoReflection.Descriptor.MessageTypes[147]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public RemoveGroupPlayerReq() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public RemoveGroupPlayerReq(RemoveGroupPlayerReq other) : this() {
      groupId_ = other.groupId_;
      removePlayerId_ = other.removePlayerId_;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public RemoveGroupPlayerReq Clone() {
      return new RemoveGroupPlayerReq(this);
    }

    /// <summary>Field number for the "group_id" field.</summary>
    public const int GroupIdFieldNumber = 1;
    private string groupId_ = "";
    /// <summary>
    //// [rm-sdk-para] 队组ID
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string GroupId {
      get { return groupId_; }
      set {
        groupId_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "remove_player_id" field.</summary>
    public const int RemovePlayerIdFieldNumber = 2;
    private string removePlayerId_ = "";
    /// <summary>
    //// 要删除的队员ID
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string RemovePlayerId {
      get { return removePlayerId_; }
      set {
        removePlayerId_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as RemoveGroupPlayerReq);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(RemoveGroupPlayerReq other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (GroupId != other.GroupId) return false;
      if (RemovePlayerId != other.RemovePlayerId) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (GroupId.Length != 0) hash ^= GroupId.GetHashCode();
      if (RemovePlayerId.Length != 0) hash ^= RemovePlayerId.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (GroupId.Length != 0) {
        output.WriteRawTag(10);
        output.WriteString(GroupId);
      }
      if (RemovePlayerId.Length != 0) {
        output.WriteRawTag(18);
        output.WriteString(RemovePlayerId);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (GroupId.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(GroupId);
      }
      if (RemovePlayerId.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(RemovePlayerId);
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(RemoveGroupPlayerReq other) {
      if (other == null) {
        return;
      }
      if (other.GroupId.Length != 0) {
        GroupId = other.GroupId;
      }
      if (other.RemovePlayerId.Length != 0) {
        RemovePlayerId = other.RemovePlayerId;
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 10: {
            GroupId = input.ReadString();
            break;
          }
          case 18: {
            RemovePlayerId = input.ReadString();
            break;
          }
        }
      }
    }

  }

  /// <summary>
  //// 移除队组内玩家响应
  /// </summary>
  public sealed partial class RemoveGroupPlayerRsp : pb::IMessage<RemoveGroupPlayerRsp> {
    private static readonly pb::MessageParser<RemoveGroupPlayerRsp> _parser = new pb::MessageParser<RemoveGroupPlayerRsp>(() => new RemoveGroupPlayerRsp());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<RemoveGroupPlayerRsp> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::com.unity.mgobe.ProtoReflection.Descriptor.MessageTypes[148]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public RemoveGroupPlayerRsp() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public RemoveGroupPlayerRsp(RemoveGroupPlayerRsp other) : this() {
      groupInfo_ = other.groupInfo_ != null ? other.groupInfo_.Clone() : null;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public RemoveGroupPlayerRsp Clone() {
      return new RemoveGroupPlayerRsp(this);
    }

    /// <summary>Field number for the "group_info" field.</summary>
    public const int GroupInfoFieldNumber = 1;
    private global::com.unity.mgobe.GroupInfo groupInfo_;
    /// <summary>
    //// 队组信息
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::com.unity.mgobe.GroupInfo GroupInfo {
      get { return groupInfo_; }
      set {
        groupInfo_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as RemoveGroupPlayerRsp);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(RemoveGroupPlayerRsp other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (!object.Equals(GroupInfo, other.GroupInfo)) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (groupInfo_ != null) hash ^= GroupInfo.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (groupInfo_ != null) {
        output.WriteRawTag(10);
        output.WriteMessage(GroupInfo);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (groupInfo_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(GroupInfo);
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(RemoveGroupPlayerRsp other) {
      if (other == null) {
        return;
      }
      if (other.groupInfo_ != null) {
        if (groupInfo_ == null) {
          GroupInfo = new global::com.unity.mgobe.GroupInfo();
        }
        GroupInfo.MergeFrom(other.GroupInfo);
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 10: {
            if (groupInfo_ == null) {
              GroupInfo = new global::com.unity.mgobe.GroupInfo();
            }
            input.ReadMessage(GroupInfo);
            break;
          }
        }
      }
    }

  }

  /// <summary>
  //// 根据ID查询队组请求
  /// </summary>
  public sealed partial class GetGroupByGroupIdReq : pb::IMessage<GetGroupByGroupIdReq> {
    private static readonly pb::MessageParser<GetGroupByGroupIdReq> _parser = new pb::MessageParser<GetGroupByGroupIdReq>(() => new GetGroupByGroupIdReq());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<GetGroupByGroupIdReq> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::com.unity.mgobe.ProtoReflection.Descriptor.MessageTypes[149]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public GetGroupByGroupIdReq() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public GetGroupByGroupIdReq(GetGroupByGroupIdReq other) : this() {
      groupId_ = other.groupId_;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public GetGroupByGroupIdReq Clone() {
      return new GetGroupByGroupIdReq(this);
    }

    /// <summary>Field number for the "group_id" field.</summary>
    public const int GroupIdFieldNumber = 1;
    private string groupId_ = "";
    /// <summary>
    //// 队组ID
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string GroupId {
      get { return groupId_; }
      set {
        groupId_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as GetGroupByGroupIdReq);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(GetGroupByGroupIdReq other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (GroupId != other.GroupId) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (GroupId.Length != 0) hash ^= GroupId.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (GroupId.Length != 0) {
        output.WriteRawTag(10);
        output.WriteString(GroupId);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (GroupId.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(GroupId);
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(GetGroupByGroupIdReq other) {
      if (other == null) {
        return;
      }
      if (other.GroupId.Length != 0) {
        GroupId = other.GroupId;
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 10: {
            GroupId = input.ReadString();
            break;
          }
        }
      }
    }

  }

  /// <summary>
  //// 根据ID查询队组响应
  /// </summary>
  public sealed partial class GetGroupByGroupIdRsp : pb::IMessage<GetGroupByGroupIdRsp> {
    private static readonly pb::MessageParser<GetGroupByGroupIdRsp> _parser = new pb::MessageParser<GetGroupByGroupIdRsp>(() => new GetGroupByGroupIdRsp());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<GetGroupByGroupIdRsp> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::com.unity.mgobe.ProtoReflection.Descriptor.MessageTypes[150]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public GetGroupByGroupIdRsp() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public GetGroupByGroupIdRsp(GetGroupByGroupIdRsp other) : this() {
      groupInfo_ = other.groupInfo_ != null ? other.groupInfo_.Clone() : null;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public GetGroupByGroupIdRsp Clone() {
      return new GetGroupByGroupIdRsp(this);
    }

    /// <summary>Field number for the "group_info" field.</summary>
    public const int GroupInfoFieldNumber = 1;
    private global::com.unity.mgobe.GroupInfo groupInfo_;
    /// <summary>
    //// 队组信息
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::com.unity.mgobe.GroupInfo GroupInfo {
      get { return groupInfo_; }
      set {
        groupInfo_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as GetGroupByGroupIdRsp);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(GetGroupByGroupIdRsp other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (!object.Equals(GroupInfo, other.GroupInfo)) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (groupInfo_ != null) hash ^= GroupInfo.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (groupInfo_ != null) {
        output.WriteRawTag(10);
        output.WriteMessage(GroupInfo);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (groupInfo_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(GroupInfo);
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(GetGroupByGroupIdRsp other) {
      if (other == null) {
        return;
      }
      if (other.groupInfo_ != null) {
        if (groupInfo_ == null) {
          GroupInfo = new global::com.unity.mgobe.GroupInfo();
        }
        GroupInfo.MergeFrom(other.GroupInfo);
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 10: {
            if (groupInfo_ == null) {
              GroupInfo = new global::com.unity.mgobe.GroupInfo();
            }
            input.ReadMessage(GroupInfo);
            break;
          }
        }
      }
    }

  }

  /// <summary>
  //// 查询玩家所有队组请求
  /// </summary>
  public sealed partial class GetMyGroupsReq : pb::IMessage<GetMyGroupsReq> {
    private static readonly pb::MessageParser<GetMyGroupsReq> _parser = new pb::MessageParser<GetMyGroupsReq>(() => new GetMyGroupsReq());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<GetMyGroupsReq> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::com.unity.mgobe.ProtoReflection.Descriptor.MessageTypes[151]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public GetMyGroupsReq() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public GetMyGroupsReq(GetMyGroupsReq other) : this() {
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public GetMyGroupsReq Clone() {
      return new GetMyGroupsReq(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as GetMyGroupsReq);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(GetMyGroupsReq other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(GetMyGroupsReq other) {
      if (other == null) {
        return;
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
        }
      }
    }

  }

  /// <summary>
  //// 查询玩家所有队组响应
  /// </summary>
  public sealed partial class GetMyGroupsRsp : pb::IMessage<GetMyGroupsRsp> {
    private static readonly pb::MessageParser<GetMyGroupsRsp> _parser = new pb::MessageParser<GetMyGroupsRsp>(() => new GetMyGroupsRsp());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<GetMyGroupsRsp> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::com.unity.mgobe.ProtoReflection.Descriptor.MessageTypes[152]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public GetMyGroupsRsp() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public GetMyGroupsRsp(GetMyGroupsRsp other) : this() {
      groupInfoList_ = other.groupInfoList_.Clone();
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public GetMyGroupsRsp Clone() {
      return new GetMyGroupsRsp(this);
    }

    /// <summary>Field number for the "group_info_list" field.</summary>
    public const int GroupInfoListFieldNumber = 1;
    private static readonly pb::FieldCodec<global::com.unity.mgobe.GroupInfo> _repeated_groupInfoList_codec
        = pb::FieldCodec.ForMessage(10, global::com.unity.mgobe.GroupInfo.Parser);
    private readonly pbc::RepeatedField<global::com.unity.mgobe.GroupInfo> groupInfoList_ = new pbc::RepeatedField<global::com.unity.mgobe.GroupInfo>();
    /// <summary>
    //// 当前玩家全部队组信息
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::RepeatedField<global::com.unity.mgobe.GroupInfo> GroupInfoList {
      get { return groupInfoList_; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as GetMyGroupsRsp);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(GetMyGroupsRsp other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if(!groupInfoList_.Equals(other.groupInfoList_)) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      hash ^= groupInfoList_.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      groupInfoList_.WriteTo(output, _repeated_groupInfoList_codec);
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      size += groupInfoList_.CalculateSize(_repeated_groupInfoList_codec);
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(GetMyGroupsRsp other) {
      if (other == null) {
        return;
      }
      groupInfoList_.Add(other.groupInfoList_);
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 10: {
            groupInfoList_.AddEntriesFrom(input, _repeated_groupInfoList_codec);
            break;
          }
        }
      }
    }

  }

  /// <summary>
  //// 修改队组内玩家自定义状态请求
  /// </summary>
  public sealed partial class ChangeCustomGroupPlayerStatusReq : pb::IMessage<ChangeCustomGroupPlayerStatusReq> {
    private static readonly pb::MessageParser<ChangeCustomGroupPlayerStatusReq> _parser = new pb::MessageParser<ChangeCustomGroupPlayerStatusReq>(() => new ChangeCustomGroupPlayerStatusReq());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<ChangeCustomGroupPlayerStatusReq> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::com.unity.mgobe.ProtoReflection.Descriptor.MessageTypes[153]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ChangeCustomGroupPlayerStatusReq() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ChangeCustomGroupPlayerStatusReq(ChangeCustomGroupPlayerStatusReq other) : this() {
      groupId_ = other.groupId_;
      customGroupPlayerStatus_ = other.customGroupPlayerStatus_;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ChangeCustomGroupPlayerStatusReq Clone() {
      return new ChangeCustomGroupPlayerStatusReq(this);
    }

    /// <summary>Field number for the "group_id" field.</summary>
    public const int GroupIdFieldNumber = 1;
    private string groupId_ = "";
    /// <summary>
    //// [rm-sdk-para] 队组ID
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string GroupId {
      get { return groupId_; }
      set {
        groupId_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "custom_group_player_status" field.</summary>
    public const int CustomGroupPlayerStatusFieldNumber = 2;
    private ulong customGroupPlayerStatus_;
    /// <summary>
    //// 玩家自定义状态
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ulong CustomGroupPlayerStatus {
      get { return customGroupPlayerStatus_; }
      set {
        customGroupPlayerStatus_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as ChangeCustomGroupPlayerStatusReq);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(ChangeCustomGroupPlayerStatusReq other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (GroupId != other.GroupId) return false;
      if (CustomGroupPlayerStatus != other.CustomGroupPlayerStatus) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (GroupId.Length != 0) hash ^= GroupId.GetHashCode();
      if (CustomGroupPlayerStatus != 0UL) hash ^= CustomGroupPlayerStatus.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (GroupId.Length != 0) {
        output.WriteRawTag(10);
        output.WriteString(GroupId);
      }
      if (CustomGroupPlayerStatus != 0UL) {
        output.WriteRawTag(16);
        output.WriteUInt64(CustomGroupPlayerStatus);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (GroupId.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(GroupId);
      }
      if (CustomGroupPlayerStatus != 0UL) {
        size += 1 + pb::CodedOutputStream.ComputeUInt64Size(CustomGroupPlayerStatus);
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(ChangeCustomGroupPlayerStatusReq other) {
      if (other == null) {
        return;
      }
      if (other.GroupId.Length != 0) {
        GroupId = other.GroupId;
      }
      if (other.CustomGroupPlayerStatus != 0UL) {
        CustomGroupPlayerStatus = other.CustomGroupPlayerStatus;
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 10: {
            GroupId = input.ReadString();
            break;
          }
          case 16: {
            CustomGroupPlayerStatus = input.ReadUInt64();
            break;
          }
        }
      }
    }

  }

  /// <summary>
  //// 修改队组内玩家自定义状态响应
  /// </summary>
  public sealed partial class ChangeCustomGroupPlayerStatusRsp : pb::IMessage<ChangeCustomGroupPlayerStatusRsp> {
    private static readonly pb::MessageParser<ChangeCustomGroupPlayerStatusRsp> _parser = new pb::MessageParser<ChangeCustomGroupPlayerStatusRsp>(() => new ChangeCustomGroupPlayerStatusRsp());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<ChangeCustomGroupPlayerStatusRsp> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::com.unity.mgobe.ProtoReflection.Descriptor.MessageTypes[154]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ChangeCustomGroupPlayerStatusRsp() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ChangeCustomGroupPlayerStatusRsp(ChangeCustomGroupPlayerStatusRsp other) : this() {
      groupInfo_ = other.groupInfo_ != null ? other.groupInfo_.Clone() : null;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ChangeCustomGroupPlayerStatusRsp Clone() {
      return new ChangeCustomGroupPlayerStatusRsp(this);
    }

    /// <summary>Field number for the "group_info" field.</summary>
    public const int GroupInfoFieldNumber = 1;
    private global::com.unity.mgobe.GroupInfo groupInfo_;
    /// <summary>
    //// 队组信息
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::com.unity.mgobe.GroupInfo GroupInfo {
      get { return groupInfo_; }
      set {
        groupInfo_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as ChangeCustomGroupPlayerStatusRsp);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(ChangeCustomGroupPlayerStatusRsp other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (!object.Equals(GroupInfo, other.GroupInfo)) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (groupInfo_ != null) hash ^= GroupInfo.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (groupInfo_ != null) {
        output.WriteRawTag(10);
        output.WriteMessage(GroupInfo);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (groupInfo_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(GroupInfo);
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(ChangeCustomGroupPlayerStatusRsp other) {
      if (other == null) {
        return;
      }
      if (other.groupInfo_ != null) {
        if (groupInfo_ == null) {
          GroupInfo = new global::com.unity.mgobe.GroupInfo();
        }
        GroupInfo.MergeFrom(other.GroupInfo);
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 10: {
            if (groupInfo_ == null) {
              GroupInfo = new global::com.unity.mgobe.GroupInfo();
            }
            input.ReadMessage(GroupInfo);
            break;
          }
        }
      }
    }

  }

  /// <summary>
  //// 队组内发送消息给其他玩家请求
  /// </summary>
  public sealed partial class SendToGroupClientReq : pb::IMessage<SendToGroupClientReq> {
    private static readonly pb::MessageParser<SendToGroupClientReq> _parser = new pb::MessageParser<SendToGroupClientReq>(() => new SendToGroupClientReq());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<SendToGroupClientReq> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::com.unity.mgobe.ProtoReflection.Descriptor.MessageTypes[155]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public SendToGroupClientReq() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public SendToGroupClientReq(SendToGroupClientReq other) : this() {
      groupId_ = other.groupId_;
      recvPlayerList_ = other.recvPlayerList_.Clone();
      msg_ = other.msg_;
      recvType_ = other.recvType_;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public SendToGroupClientReq Clone() {
      return new SendToGroupClientReq(this);
    }

    /// <summary>Field number for the "group_id" field.</summary>
    public const int GroupIdFieldNumber = 1;
    private string groupId_ = "";
    /// <summary>
    //// [rm-sdk-para] 队组ID
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string GroupId {
      get { return groupId_; }
      set {
        groupId_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "recv_player_list" field.</summary>
    public const int RecvPlayerListFieldNumber = 2;
    private static readonly pb::FieldCodec<string> _repeated_recvPlayerList_codec
        = pb::FieldCodec.ForString(18);
    private readonly pbc::RepeatedField<string> recvPlayerList_ = new pbc::RepeatedField<string>();
    /// <summary>
    //// 接收信息的用户列表
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::RepeatedField<string> RecvPlayerList {
      get { return recvPlayerList_; }
    }

    /// <summary>Field number for the "msg" field.</summary>
    public const int MsgFieldNumber = 3;
    private string msg_ = "";
    /// <summary>
    //// 消息详细内容
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string Msg {
      get { return msg_; }
      set {
        msg_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "recv_type" field.</summary>
    public const int RecvTypeFieldNumber = 4;
    private global::com.unity.mgobe.GroupRecvType recvType_ = 0;
    /// <summary>
    //// 接收类型
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::com.unity.mgobe.GroupRecvType RecvType {
      get { return recvType_; }
      set {
        recvType_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as SendToGroupClientReq);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(SendToGroupClientReq other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (GroupId != other.GroupId) return false;
      if(!recvPlayerList_.Equals(other.recvPlayerList_)) return false;
      if (Msg != other.Msg) return false;
      if (RecvType != other.RecvType) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (GroupId.Length != 0) hash ^= GroupId.GetHashCode();
      hash ^= recvPlayerList_.GetHashCode();
      if (Msg.Length != 0) hash ^= Msg.GetHashCode();
      if (RecvType != 0) hash ^= RecvType.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (GroupId.Length != 0) {
        output.WriteRawTag(10);
        output.WriteString(GroupId);
      }
      recvPlayerList_.WriteTo(output, _repeated_recvPlayerList_codec);
      if (Msg.Length != 0) {
        output.WriteRawTag(26);
        output.WriteString(Msg);
      }
      if (RecvType != 0) {
        output.WriteRawTag(32);
        output.WriteEnum((int) RecvType);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (GroupId.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(GroupId);
      }
      size += recvPlayerList_.CalculateSize(_repeated_recvPlayerList_codec);
      if (Msg.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(Msg);
      }
      if (RecvType != 0) {
        size += 1 + pb::CodedOutputStream.ComputeEnumSize((int) RecvType);
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(SendToGroupClientReq other) {
      if (other == null) {
        return;
      }
      if (other.GroupId.Length != 0) {
        GroupId = other.GroupId;
      }
      recvPlayerList_.Add(other.recvPlayerList_);
      if (other.Msg.Length != 0) {
        Msg = other.Msg;
      }
      if (other.RecvType != 0) {
        RecvType = other.RecvType;
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 10: {
            GroupId = input.ReadString();
            break;
          }
          case 18: {
            recvPlayerList_.AddEntriesFrom(input, _repeated_recvPlayerList_codec);
            break;
          }
          case 26: {
            Msg = input.ReadString();
            break;
          }
          case 32: {
            RecvType = (global::com.unity.mgobe.GroupRecvType) input.ReadEnum();
            break;
          }
        }
      }
    }

  }

  /// <summary>
  //// 队组内发送消息给其他玩家响应
  /// </summary>
  public sealed partial class SendToGroupClientRsp : pb::IMessage<SendToGroupClientRsp> {
    private static readonly pb::MessageParser<SendToGroupClientRsp> _parser = new pb::MessageParser<SendToGroupClientRsp>(() => new SendToGroupClientRsp());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<SendToGroupClientRsp> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::com.unity.mgobe.ProtoReflection.Descriptor.MessageTypes[156]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public SendToGroupClientRsp() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public SendToGroupClientRsp(SendToGroupClientRsp other) : this() {
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public SendToGroupClientRsp Clone() {
      return new SendToGroupClientRsp(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as SendToGroupClientRsp);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(SendToGroupClientRsp other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(SendToGroupClientRsp other) {
      if (other == null) {
        return;
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
        }
      }
    }

  }

  /// <summary>
  //// 对组内玩家掉线事件
  /// </summary>
  public sealed partial class GroupPlayers : pb::IMessage<GroupPlayers> {
    private static readonly pb::MessageParser<GroupPlayers> _parser = new pb::MessageParser<GroupPlayers>(() => new GroupPlayers());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<GroupPlayers> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::com.unity.mgobe.ProtoReflection.Descriptor.MessageTypes[157]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public GroupPlayers() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public GroupPlayers(GroupPlayers other) : this() {
      groupId_ = other.groupId_;
      playerIdList_ = other.playerIdList_.Clone();
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public GroupPlayers Clone() {
      return new GroupPlayers(this);
    }

    /// <summary>Field number for the "group_id" field.</summary>
    public const int GroupIdFieldNumber = 1;
    private string groupId_ = "";
    /// <summary>
    //// group id
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string GroupId {
      get { return groupId_; }
      set {
        groupId_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "player_id_list" field.</summary>
    public const int PlayerIdListFieldNumber = 2;
    private static readonly pb::FieldCodec<string> _repeated_playerIdList_codec
        = pb::FieldCodec.ForString(18);
    private readonly pbc::RepeatedField<string> playerIdList_ = new pbc::RepeatedField<string>();
    /// <summary>
    //// group 下所有玩家id
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::RepeatedField<string> PlayerIdList {
      get { return playerIdList_; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as GroupPlayers);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(GroupPlayers other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (GroupId != other.GroupId) return false;
      if(!playerIdList_.Equals(other.playerIdList_)) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (GroupId.Length != 0) hash ^= GroupId.GetHashCode();
      hash ^= playerIdList_.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (GroupId.Length != 0) {
        output.WriteRawTag(10);
        output.WriteString(GroupId);
      }
      playerIdList_.WriteTo(output, _repeated_playerIdList_codec);
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (GroupId.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(GroupId);
      }
      size += playerIdList_.CalculateSize(_repeated_playerIdList_codec);
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(GroupPlayers other) {
      if (other == null) {
        return;
      }
      if (other.GroupId.Length != 0) {
        GroupId = other.GroupId;
      }
      playerIdList_.Add(other.playerIdList_);
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 10: {
            GroupId = input.ReadString();
            break;
          }
          case 18: {
            playerIdList_.AddEntriesFrom(input, _repeated_playerIdList_codec);
            break;
          }
        }
      }
    }

  }

  /// <summary>
  //// 触发group侧网络状态变更
  /// </summary>
  public sealed partial class ChangeGroupPlayerNetworkReq : pb::IMessage<ChangeGroupPlayerNetworkReq> {
    private static readonly pb::MessageParser<ChangeGroupPlayerNetworkReq> _parser = new pb::MessageParser<ChangeGroupPlayerNetworkReq>(() => new ChangeGroupPlayerNetworkReq());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<ChangeGroupPlayerNetworkReq> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::com.unity.mgobe.ProtoReflection.Descriptor.MessageTypes[158]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ChangeGroupPlayerNetworkReq() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ChangeGroupPlayerNetworkReq(ChangeGroupPlayerNetworkReq other) : this() {
      networkState_ = other.networkState_;
      playerId_ = other.playerId_;
      gameId_ = other.gameId_;
      seq_ = other.seq_;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ChangeGroupPlayerNetworkReq Clone() {
      return new ChangeGroupPlayerNetworkReq(this);
    }

    /// <summary>Field number for the "network_state" field.</summary>
    public const int NetworkStateFieldNumber = 1;
    private global::com.unity.mgobe.NetworkState networkState_ = 0;
    /// <summary>
    //// 网络状态
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::com.unity.mgobe.NetworkState NetworkState {
      get { return networkState_; }
      set {
        networkState_ = value;
      }
    }

    /// <summary>Field number for the "player_id" field.</summary>
    public const int PlayerIdFieldNumber = 2;
    private string playerId_ = "";
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string PlayerId {
      get { return playerId_; }
      set {
        playerId_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "game_id" field.</summary>
    public const int GameIdFieldNumber = 3;
    private string gameId_ = "";
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string GameId {
      get { return gameId_; }
      set {
        gameId_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "seq" field.</summary>
    public const int SeqFieldNumber = 4;
    private string seq_ = "";
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string Seq {
      get { return seq_; }
      set {
        seq_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as ChangeGroupPlayerNetworkReq);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(ChangeGroupPlayerNetworkReq other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (NetworkState != other.NetworkState) return false;
      if (PlayerId != other.PlayerId) return false;
      if (GameId != other.GameId) return false;
      if (Seq != other.Seq) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (NetworkState != 0) hash ^= NetworkState.GetHashCode();
      if (PlayerId.Length != 0) hash ^= PlayerId.GetHashCode();
      if (GameId.Length != 0) hash ^= GameId.GetHashCode();
      if (Seq.Length != 0) hash ^= Seq.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (NetworkState != 0) {
        output.WriteRawTag(8);
        output.WriteEnum((int) NetworkState);
      }
      if (PlayerId.Length != 0) {
        output.WriteRawTag(18);
        output.WriteString(PlayerId);
      }
      if (GameId.Length != 0) {
        output.WriteRawTag(26);
        output.WriteString(GameId);
      }
      if (Seq.Length != 0) {
        output.WriteRawTag(34);
        output.WriteString(Seq);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (NetworkState != 0) {
        size += 1 + pb::CodedOutputStream.ComputeEnumSize((int) NetworkState);
      }
      if (PlayerId.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(PlayerId);
      }
      if (GameId.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(GameId);
      }
      if (Seq.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(Seq);
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(ChangeGroupPlayerNetworkReq other) {
      if (other == null) {
        return;
      }
      if (other.NetworkState != 0) {
        NetworkState = other.NetworkState;
      }
      if (other.PlayerId.Length != 0) {
        PlayerId = other.PlayerId;
      }
      if (other.GameId.Length != 0) {
        GameId = other.GameId;
      }
      if (other.Seq.Length != 0) {
        Seq = other.Seq;
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 8: {
            NetworkState = (global::com.unity.mgobe.NetworkState) input.ReadEnum();
            break;
          }
          case 18: {
            PlayerId = input.ReadString();
            break;
          }
          case 26: {
            GameId = input.ReadString();
            break;
          }
          case 34: {
            Seq = input.ReadString();
            break;
          }
        }
      }
    }

  }

  /// <summary>
  //// 响应玩家所在的所有group和成员列表
  /// </summary>
  public sealed partial class ChangeGroupPlayerNetworkRsp : pb::IMessage<ChangeGroupPlayerNetworkRsp> {
    private static readonly pb::MessageParser<ChangeGroupPlayerNetworkRsp> _parser = new pb::MessageParser<ChangeGroupPlayerNetworkRsp>(() => new ChangeGroupPlayerNetworkRsp());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<ChangeGroupPlayerNetworkRsp> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::com.unity.mgobe.ProtoReflection.Descriptor.MessageTypes[159]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ChangeGroupPlayerNetworkRsp() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ChangeGroupPlayerNetworkRsp(ChangeGroupPlayerNetworkRsp other) : this() {
      groupPlayers_ = other.groupPlayers_.Clone();
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ChangeGroupPlayerNetworkRsp Clone() {
      return new ChangeGroupPlayerNetworkRsp(this);
    }

    /// <summary>Field number for the "group_players" field.</summary>
    public const int GroupPlayersFieldNumber = 1;
    private static readonly pb::FieldCodec<global::com.unity.mgobe.GroupPlayers> _repeated_groupPlayers_codec
        = pb::FieldCodec.ForMessage(10, global::com.unity.mgobe.GroupPlayers.Parser);
    private readonly pbc::RepeatedField<global::com.unity.mgobe.GroupPlayers> groupPlayers_ = new pbc::RepeatedField<global::com.unity.mgobe.GroupPlayers>();
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::RepeatedField<global::com.unity.mgobe.GroupPlayers> GroupPlayers {
      get { return groupPlayers_; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as ChangeGroupPlayerNetworkRsp);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(ChangeGroupPlayerNetworkRsp other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if(!groupPlayers_.Equals(other.groupPlayers_)) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      hash ^= groupPlayers_.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      groupPlayers_.WriteTo(output, _repeated_groupPlayers_codec);
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      size += groupPlayers_.CalculateSize(_repeated_groupPlayers_codec);
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(ChangeGroupPlayerNetworkRsp other) {
      if (other == null) {
        return;
      }
      groupPlayers_.Add(other.groupPlayers_);
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 10: {
            groupPlayers_.AddEntriesFrom(input, _repeated_groupPlayers_codec);
            break;
          }
        }
      }
    }

  }

  /// <summary>
  //// 加入队组广播
  /// </summary>
  public sealed partial class JoinGroupBst : pb::IMessage<JoinGroupBst> {
    private static readonly pb::MessageParser<JoinGroupBst> _parser = new pb::MessageParser<JoinGroupBst>(() => new JoinGroupBst());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<JoinGroupBst> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::com.unity.mgobe.ProtoReflection.Descriptor.MessageTypes[160]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public JoinGroupBst() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public JoinGroupBst(JoinGroupBst other) : this() {
      groupInfo_ = other.groupInfo_ != null ? other.groupInfo_.Clone() : null;
      joinPlayerId_ = other.joinPlayerId_;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public JoinGroupBst Clone() {
      return new JoinGroupBst(this);
    }

    /// <summary>Field number for the "group_info" field.</summary>
    public const int GroupInfoFieldNumber = 1;
    private global::com.unity.mgobe.GroupInfo groupInfo_;
    /// <summary>
    //// 队组信息
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::com.unity.mgobe.GroupInfo GroupInfo {
      get { return groupInfo_; }
      set {
        groupInfo_ = value;
      }
    }

    /// <summary>Field number for the "join_player_id" field.</summary>
    public const int JoinPlayerIdFieldNumber = 2;
    private string joinPlayerId_ = "";
    /// <summary>
    //// 加入队组玩家ID
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string JoinPlayerId {
      get { return joinPlayerId_; }
      set {
        joinPlayerId_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as JoinGroupBst);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(JoinGroupBst other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (!object.Equals(GroupInfo, other.GroupInfo)) return false;
      if (JoinPlayerId != other.JoinPlayerId) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (groupInfo_ != null) hash ^= GroupInfo.GetHashCode();
      if (JoinPlayerId.Length != 0) hash ^= JoinPlayerId.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (groupInfo_ != null) {
        output.WriteRawTag(10);
        output.WriteMessage(GroupInfo);
      }
      if (JoinPlayerId.Length != 0) {
        output.WriteRawTag(18);
        output.WriteString(JoinPlayerId);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (groupInfo_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(GroupInfo);
      }
      if (JoinPlayerId.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(JoinPlayerId);
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(JoinGroupBst other) {
      if (other == null) {
        return;
      }
      if (other.groupInfo_ != null) {
        if (groupInfo_ == null) {
          GroupInfo = new global::com.unity.mgobe.GroupInfo();
        }
        GroupInfo.MergeFrom(other.GroupInfo);
      }
      if (other.JoinPlayerId.Length != 0) {
        JoinPlayerId = other.JoinPlayerId;
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 10: {
            if (groupInfo_ == null) {
              GroupInfo = new global::com.unity.mgobe.GroupInfo();
            }
            input.ReadMessage(GroupInfo);
            break;
          }
          case 18: {
            JoinPlayerId = input.ReadString();
            break;
          }
        }
      }
    }

  }

  /// <summary>
  //// 退出组队广播
  /// </summary>
  public sealed partial class LeaveGroupBst : pb::IMessage<LeaveGroupBst> {
    private static readonly pb::MessageParser<LeaveGroupBst> _parser = new pb::MessageParser<LeaveGroupBst>(() => new LeaveGroupBst());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<LeaveGroupBst> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::com.unity.mgobe.ProtoReflection.Descriptor.MessageTypes[161]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public LeaveGroupBst() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public LeaveGroupBst(LeaveGroupBst other) : this() {
      groupInfo_ = other.groupInfo_ != null ? other.groupInfo_.Clone() : null;
      leavePlayerId_ = other.leavePlayerId_;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public LeaveGroupBst Clone() {
      return new LeaveGroupBst(this);
    }

    /// <summary>Field number for the "group_info" field.</summary>
    public const int GroupInfoFieldNumber = 1;
    private global::com.unity.mgobe.GroupInfo groupInfo_;
    /// <summary>
    //// 队组信息
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::com.unity.mgobe.GroupInfo GroupInfo {
      get { return groupInfo_; }
      set {
        groupInfo_ = value;
      }
    }

    /// <summary>Field number for the "leave_player_id" field.</summary>
    public const int LeavePlayerIdFieldNumber = 2;
    private string leavePlayerId_ = "";
    /// <summary>
    //// 离开队组玩家ID
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string LeavePlayerId {
      get { return leavePlayerId_; }
      set {
        leavePlayerId_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as LeaveGroupBst);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(LeaveGroupBst other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (!object.Equals(GroupInfo, other.GroupInfo)) return false;
      if (LeavePlayerId != other.LeavePlayerId) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (groupInfo_ != null) hash ^= GroupInfo.GetHashCode();
      if (LeavePlayerId.Length != 0) hash ^= LeavePlayerId.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (groupInfo_ != null) {
        output.WriteRawTag(10);
        output.WriteMessage(GroupInfo);
      }
      if (LeavePlayerId.Length != 0) {
        output.WriteRawTag(18);
        output.WriteString(LeavePlayerId);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (groupInfo_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(GroupInfo);
      }
      if (LeavePlayerId.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(LeavePlayerId);
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(LeaveGroupBst other) {
      if (other == null) {
        return;
      }
      if (other.groupInfo_ != null) {
        if (groupInfo_ == null) {
          GroupInfo = new global::com.unity.mgobe.GroupInfo();
        }
        GroupInfo.MergeFrom(other.GroupInfo);
      }
      if (other.LeavePlayerId.Length != 0) {
        LeavePlayerId = other.LeavePlayerId;
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 10: {
            if (groupInfo_ == null) {
              GroupInfo = new global::com.unity.mgobe.GroupInfo();
            }
            input.ReadMessage(GroupInfo);
            break;
          }
          case 18: {
            LeavePlayerId = input.ReadString();
            break;
          }
        }
      }
    }

  }

  /// <summary>
  //// 解散队组广播
  /// </summary>
  public sealed partial class DismissGroupBst : pb::IMessage<DismissGroupBst> {
    private static readonly pb::MessageParser<DismissGroupBst> _parser = new pb::MessageParser<DismissGroupBst>(() => new DismissGroupBst());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<DismissGroupBst> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::com.unity.mgobe.ProtoReflection.Descriptor.MessageTypes[162]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public DismissGroupBst() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public DismissGroupBst(DismissGroupBst other) : this() {
      groupInfo_ = other.groupInfo_ != null ? other.groupInfo_.Clone() : null;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public DismissGroupBst Clone() {
      return new DismissGroupBst(this);
    }

    /// <summary>Field number for the "group_info" field.</summary>
    public const int GroupInfoFieldNumber = 1;
    private global::com.unity.mgobe.GroupInfo groupInfo_;
    /// <summary>
    //// 队组信息
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::com.unity.mgobe.GroupInfo GroupInfo {
      get { return groupInfo_; }
      set {
        groupInfo_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as DismissGroupBst);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(DismissGroupBst other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (!object.Equals(GroupInfo, other.GroupInfo)) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (groupInfo_ != null) hash ^= GroupInfo.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (groupInfo_ != null) {
        output.WriteRawTag(10);
        output.WriteMessage(GroupInfo);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (groupInfo_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(GroupInfo);
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(DismissGroupBst other) {
      if (other == null) {
        return;
      }
      if (other.groupInfo_ != null) {
        if (groupInfo_ == null) {
          GroupInfo = new global::com.unity.mgobe.GroupInfo();
        }
        GroupInfo.MergeFrom(other.GroupInfo);
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 10: {
            if (groupInfo_ == null) {
              GroupInfo = new global::com.unity.mgobe.GroupInfo();
            }
            input.ReadMessage(GroupInfo);
            break;
          }
        }
      }
    }

  }

  /// <summary>
  //// 修改队组广播
  /// </summary>
  public sealed partial class ChangeGroupBst : pb::IMessage<ChangeGroupBst> {
    private static readonly pb::MessageParser<ChangeGroupBst> _parser = new pb::MessageParser<ChangeGroupBst>(() => new ChangeGroupBst());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<ChangeGroupBst> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::com.unity.mgobe.ProtoReflection.Descriptor.MessageTypes[163]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ChangeGroupBst() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ChangeGroupBst(ChangeGroupBst other) : this() {
      groupInfo_ = other.groupInfo_ != null ? other.groupInfo_.Clone() : null;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ChangeGroupBst Clone() {
      return new ChangeGroupBst(this);
    }

    /// <summary>Field number for the "group_info" field.</summary>
    public const int GroupInfoFieldNumber = 1;
    private global::com.unity.mgobe.GroupInfo groupInfo_;
    /// <summary>
    //// 队组信息
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::com.unity.mgobe.GroupInfo GroupInfo {
      get { return groupInfo_; }
      set {
        groupInfo_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as ChangeGroupBst);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(ChangeGroupBst other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (!object.Equals(GroupInfo, other.GroupInfo)) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (groupInfo_ != null) hash ^= GroupInfo.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (groupInfo_ != null) {
        output.WriteRawTag(10);
        output.WriteMessage(GroupInfo);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (groupInfo_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(GroupInfo);
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(ChangeGroupBst other) {
      if (other == null) {
        return;
      }
      if (other.groupInfo_ != null) {
        if (groupInfo_ == null) {
          GroupInfo = new global::com.unity.mgobe.GroupInfo();
        }
        GroupInfo.MergeFrom(other.GroupInfo);
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 10: {
            if (groupInfo_ == null) {
              GroupInfo = new global::com.unity.mgobe.GroupInfo();
            }
            input.ReadMessage(GroupInfo);
            break;
          }
        }
      }
    }

  }

  /// <summary>
  //// 移除队组内玩家广播
  /// </summary>
  public sealed partial class RemoveGroupPlayerBst : pb::IMessage<RemoveGroupPlayerBst> {
    private static readonly pb::MessageParser<RemoveGroupPlayerBst> _parser = new pb::MessageParser<RemoveGroupPlayerBst>(() => new RemoveGroupPlayerBst());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<RemoveGroupPlayerBst> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::com.unity.mgobe.ProtoReflection.Descriptor.MessageTypes[164]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public RemoveGroupPlayerBst() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public RemoveGroupPlayerBst(RemoveGroupPlayerBst other) : this() {
      groupInfo_ = other.groupInfo_ != null ? other.groupInfo_.Clone() : null;
      removePlayerId_ = other.removePlayerId_;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public RemoveGroupPlayerBst Clone() {
      return new RemoveGroupPlayerBst(this);
    }

    /// <summary>Field number for the "group_info" field.</summary>
    public const int GroupInfoFieldNumber = 1;
    private global::com.unity.mgobe.GroupInfo groupInfo_;
    /// <summary>
    //// 队组信息
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::com.unity.mgobe.GroupInfo GroupInfo {
      get { return groupInfo_; }
      set {
        groupInfo_ = value;
      }
    }

    /// <summary>Field number for the "remove_player_id" field.</summary>
    public const int RemovePlayerIdFieldNumber = 2;
    private string removePlayerId_ = "";
    /// <summary>
    //// 移除队组玩家ID
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string RemovePlayerId {
      get { return removePlayerId_; }
      set {
        removePlayerId_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as RemoveGroupPlayerBst);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(RemoveGroupPlayerBst other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (!object.Equals(GroupInfo, other.GroupInfo)) return false;
      if (RemovePlayerId != other.RemovePlayerId) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (groupInfo_ != null) hash ^= GroupInfo.GetHashCode();
      if (RemovePlayerId.Length != 0) hash ^= RemovePlayerId.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (groupInfo_ != null) {
        output.WriteRawTag(10);
        output.WriteMessage(GroupInfo);
      }
      if (RemovePlayerId.Length != 0) {
        output.WriteRawTag(18);
        output.WriteString(RemovePlayerId);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (groupInfo_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(GroupInfo);
      }
      if (RemovePlayerId.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(RemovePlayerId);
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(RemoveGroupPlayerBst other) {
      if (other == null) {
        return;
      }
      if (other.groupInfo_ != null) {
        if (groupInfo_ == null) {
          GroupInfo = new global::com.unity.mgobe.GroupInfo();
        }
        GroupInfo.MergeFrom(other.GroupInfo);
      }
      if (other.RemovePlayerId.Length != 0) {
        RemovePlayerId = other.RemovePlayerId;
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 10: {
            if (groupInfo_ == null) {
              GroupInfo = new global::com.unity.mgobe.GroupInfo();
            }
            input.ReadMessage(GroupInfo);
            break;
          }
          case 18: {
            RemovePlayerId = input.ReadString();
            break;
          }
        }
      }
    }

  }

  /// <summary>
  //// 队组内玩家网络状态变化广播
  /// </summary>
  public sealed partial class ChangeGroupPlayerNetworkStateBst : pb::IMessage<ChangeGroupPlayerNetworkStateBst> {
    private static readonly pb::MessageParser<ChangeGroupPlayerNetworkStateBst> _parser = new pb::MessageParser<ChangeGroupPlayerNetworkStateBst>(() => new ChangeGroupPlayerNetworkStateBst());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<ChangeGroupPlayerNetworkStateBst> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::com.unity.mgobe.ProtoReflection.Descriptor.MessageTypes[165]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ChangeGroupPlayerNetworkStateBst() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ChangeGroupPlayerNetworkStateBst(ChangeGroupPlayerNetworkStateBst other) : this() {
      groupInfo_ = other.groupInfo_ != null ? other.groupInfo_.Clone() : null;
      changePlayerId_ = other.changePlayerId_;
      networkState_ = other.networkState_;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ChangeGroupPlayerNetworkStateBst Clone() {
      return new ChangeGroupPlayerNetworkStateBst(this);
    }

    /// <summary>Field number for the "group_info" field.</summary>
    public const int GroupInfoFieldNumber = 1;
    private global::com.unity.mgobe.GroupInfo groupInfo_;
    /// <summary>
    //// 队组信息
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::com.unity.mgobe.GroupInfo GroupInfo {
      get { return groupInfo_; }
      set {
        groupInfo_ = value;
      }
    }

    /// <summary>Field number for the "change_player_id" field.</summary>
    public const int ChangePlayerIdFieldNumber = 2;
    private string changePlayerId_ = "";
    /// <summary>
    //// 网络状态变化的玩家ID
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string ChangePlayerId {
      get { return changePlayerId_; }
      set {
        changePlayerId_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "network_state" field.</summary>
    public const int NetworkStateFieldNumber = 3;
    private global::com.unity.mgobe.NetworkState networkState_ = 0;
    /// <summary>
    //// 网络状态
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::com.unity.mgobe.NetworkState NetworkState {
      get { return networkState_; }
      set {
        networkState_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as ChangeGroupPlayerNetworkStateBst);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(ChangeGroupPlayerNetworkStateBst other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (!object.Equals(GroupInfo, other.GroupInfo)) return false;
      if (ChangePlayerId != other.ChangePlayerId) return false;
      if (NetworkState != other.NetworkState) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (groupInfo_ != null) hash ^= GroupInfo.GetHashCode();
      if (ChangePlayerId.Length != 0) hash ^= ChangePlayerId.GetHashCode();
      if (NetworkState != 0) hash ^= NetworkState.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (groupInfo_ != null) {
        output.WriteRawTag(10);
        output.WriteMessage(GroupInfo);
      }
      if (ChangePlayerId.Length != 0) {
        output.WriteRawTag(18);
        output.WriteString(ChangePlayerId);
      }
      if (NetworkState != 0) {
        output.WriteRawTag(24);
        output.WriteEnum((int) NetworkState);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (groupInfo_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(GroupInfo);
      }
      if (ChangePlayerId.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(ChangePlayerId);
      }
      if (NetworkState != 0) {
        size += 1 + pb::CodedOutputStream.ComputeEnumSize((int) NetworkState);
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(ChangeGroupPlayerNetworkStateBst other) {
      if (other == null) {
        return;
      }
      if (other.groupInfo_ != null) {
        if (groupInfo_ == null) {
          GroupInfo = new global::com.unity.mgobe.GroupInfo();
        }
        GroupInfo.MergeFrom(other.GroupInfo);
      }
      if (other.ChangePlayerId.Length != 0) {
        ChangePlayerId = other.ChangePlayerId;
      }
      if (other.NetworkState != 0) {
        NetworkState = other.NetworkState;
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 10: {
            if (groupInfo_ == null) {
              GroupInfo = new global::com.unity.mgobe.GroupInfo();
            }
            input.ReadMessage(GroupInfo);
            break;
          }
          case 18: {
            ChangePlayerId = input.ReadString();
            break;
          }
          case 24: {
            NetworkState = (global::com.unity.mgobe.NetworkState) input.ReadEnum();
            break;
          }
        }
      }
    }

  }

  /// <summary>
  //// 队组内玩家自定义状态变化广播
  /// </summary>
  public sealed partial class ChangeCustomGroupPlayerStatusBst : pb::IMessage<ChangeCustomGroupPlayerStatusBst> {
    private static readonly pb::MessageParser<ChangeCustomGroupPlayerStatusBst> _parser = new pb::MessageParser<ChangeCustomGroupPlayerStatusBst>(() => new ChangeCustomGroupPlayerStatusBst());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<ChangeCustomGroupPlayerStatusBst> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::com.unity.mgobe.ProtoReflection.Descriptor.MessageTypes[166]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ChangeCustomGroupPlayerStatusBst() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ChangeCustomGroupPlayerStatusBst(ChangeCustomGroupPlayerStatusBst other) : this() {
      groupInfo_ = other.groupInfo_ != null ? other.groupInfo_.Clone() : null;
      changePlayerId_ = other.changePlayerId_;
      customGroupPlayerStatus_ = other.customGroupPlayerStatus_;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ChangeCustomGroupPlayerStatusBst Clone() {
      return new ChangeCustomGroupPlayerStatusBst(this);
    }

    /// <summary>Field number for the "group_info" field.</summary>
    public const int GroupInfoFieldNumber = 1;
    private global::com.unity.mgobe.GroupInfo groupInfo_;
    /// <summary>
    //// 队组信息
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::com.unity.mgobe.GroupInfo GroupInfo {
      get { return groupInfo_; }
      set {
        groupInfo_ = value;
      }
    }

    /// <summary>Field number for the "change_player_id" field.</summary>
    public const int ChangePlayerIdFieldNumber = 2;
    private string changePlayerId_ = "";
    /// <summary>
    //// 状态变化的玩家ID
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string ChangePlayerId {
      get { return changePlayerId_; }
      set {
        changePlayerId_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "custom_group_player_status" field.</summary>
    public const int CustomGroupPlayerStatusFieldNumber = 3;
    private ulong customGroupPlayerStatus_;
    /// <summary>
    //// 状态
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ulong CustomGroupPlayerStatus {
      get { return customGroupPlayerStatus_; }
      set {
        customGroupPlayerStatus_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as ChangeCustomGroupPlayerStatusBst);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(ChangeCustomGroupPlayerStatusBst other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (!object.Equals(GroupInfo, other.GroupInfo)) return false;
      if (ChangePlayerId != other.ChangePlayerId) return false;
      if (CustomGroupPlayerStatus != other.CustomGroupPlayerStatus) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (groupInfo_ != null) hash ^= GroupInfo.GetHashCode();
      if (ChangePlayerId.Length != 0) hash ^= ChangePlayerId.GetHashCode();
      if (CustomGroupPlayerStatus != 0UL) hash ^= CustomGroupPlayerStatus.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (groupInfo_ != null) {
        output.WriteRawTag(10);
        output.WriteMessage(GroupInfo);
      }
      if (ChangePlayerId.Length != 0) {
        output.WriteRawTag(18);
        output.WriteString(ChangePlayerId);
      }
      if (CustomGroupPlayerStatus != 0UL) {
        output.WriteRawTag(24);
        output.WriteUInt64(CustomGroupPlayerStatus);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (groupInfo_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(GroupInfo);
      }
      if (ChangePlayerId.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(ChangePlayerId);
      }
      if (CustomGroupPlayerStatus != 0UL) {
        size += 1 + pb::CodedOutputStream.ComputeUInt64Size(CustomGroupPlayerStatus);
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(ChangeCustomGroupPlayerStatusBst other) {
      if (other == null) {
        return;
      }
      if (other.groupInfo_ != null) {
        if (groupInfo_ == null) {
          GroupInfo = new global::com.unity.mgobe.GroupInfo();
        }
        GroupInfo.MergeFrom(other.GroupInfo);
      }
      if (other.ChangePlayerId.Length != 0) {
        ChangePlayerId = other.ChangePlayerId;
      }
      if (other.CustomGroupPlayerStatus != 0UL) {
        CustomGroupPlayerStatus = other.CustomGroupPlayerStatus;
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 10: {
            if (groupInfo_ == null) {
              GroupInfo = new global::com.unity.mgobe.GroupInfo();
            }
            input.ReadMessage(GroupInfo);
            break;
          }
          case 18: {
            ChangePlayerId = input.ReadString();
            break;
          }
          case 24: {
            CustomGroupPlayerStatus = input.ReadUInt64();
            break;
          }
        }
      }
    }

  }

  /// <summary>
  //// 收到队组内其他玩家消息广播
  /// </summary>
  public sealed partial class RecvFromGroupClientBst : pb::IMessage<RecvFromGroupClientBst> {
    private static readonly pb::MessageParser<RecvFromGroupClientBst> _parser = new pb::MessageParser<RecvFromGroupClientBst>(() => new RecvFromGroupClientBst());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<RecvFromGroupClientBst> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::com.unity.mgobe.ProtoReflection.Descriptor.MessageTypes[167]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public RecvFromGroupClientBst() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public RecvFromGroupClientBst(RecvFromGroupClientBst other) : this() {
      groupId_ = other.groupId_;
      sendPlayerId_ = other.sendPlayerId_;
      msg_ = other.msg_;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public RecvFromGroupClientBst Clone() {
      return new RecvFromGroupClientBst(this);
    }

    /// <summary>Field number for the "group_id" field.</summary>
    public const int GroupIdFieldNumber = 1;
    private string groupId_ = "";
    /// <summary>
    //// 队组id
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string GroupId {
      get { return groupId_; }
      set {
        groupId_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "send_player_id" field.</summary>
    public const int SendPlayerIdFieldNumber = 2;
    private string sendPlayerId_ = "";
    /// <summary>
    //// 发送信息的用户
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string SendPlayerId {
      get { return sendPlayerId_; }
      set {
        sendPlayerId_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "msg" field.</summary>
    public const int MsgFieldNumber = 3;
    private string msg_ = "";
    /// <summary>
    //// 消息详细内容
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string Msg {
      get { return msg_; }
      set {
        msg_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as RecvFromGroupClientBst);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(RecvFromGroupClientBst other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (GroupId != other.GroupId) return false;
      if (SendPlayerId != other.SendPlayerId) return false;
      if (Msg != other.Msg) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (GroupId.Length != 0) hash ^= GroupId.GetHashCode();
      if (SendPlayerId.Length != 0) hash ^= SendPlayerId.GetHashCode();
      if (Msg.Length != 0) hash ^= Msg.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (GroupId.Length != 0) {
        output.WriteRawTag(10);
        output.WriteString(GroupId);
      }
      if (SendPlayerId.Length != 0) {
        output.WriteRawTag(18);
        output.WriteString(SendPlayerId);
      }
      if (Msg.Length != 0) {
        output.WriteRawTag(26);
        output.WriteString(Msg);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (GroupId.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(GroupId);
      }
      if (SendPlayerId.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(SendPlayerId);
      }
      if (Msg.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(Msg);
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(RecvFromGroupClientBst other) {
      if (other == null) {
        return;
      }
      if (other.GroupId.Length != 0) {
        GroupId = other.GroupId;
      }
      if (other.SendPlayerId.Length != 0) {
        SendPlayerId = other.SendPlayerId;
      }
      if (other.Msg.Length != 0) {
        Msg = other.Msg;
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 10: {
            GroupId = input.ReadString();
            break;
          }
          case 18: {
            SendPlayerId = input.ReadString();
            break;
          }
          case 26: {
            Msg = input.ReadString();
            break;
          }
        }
      }
    }

  }

  #endregion

}

#endregion Designer generated code
