syntax = "proto3";
package com.unity.mgobe; 

///Header - 二进制格式： 0x2 + htonl(整个包长(4字节)) + QAppRequest/QAppResponse+0x3  = 6bytes
message ClientSendServerReqWrap1 {
    string version     = 1;    ///版本号, 默认为1,, 必填
    string app_name    = 2;    ///被调方业务名称, 非必填
    string cmd         = 3;    ///请求命令字, 必填
    string seq         = 4;    ///请求序列号, 可使用uuid生成串, 必填
    string client_ip   = 5;    ///客户端ip, 非必填
    string service_ip  = 6;    ///服务端ip, 非必填
    string business    = 7;    ///调用方, 非必填
    string auth_key    = 8;    ///鉴权key, 传token值, sdk必填
    uint32 auth_type   = 9;    ///鉴权类型
    string auth_ip     = 10;   ///调用方ip
    string game_id     = 11;   ///游戏ID，必填
    uint64 uid         = 12;   ///用户唯一标示  --待定
    string player_id   = 13;   ///后端生成的玩家ID, 接入层负责校验合法性, 必填
    bytes  body        = 14;   ///参见 AccessReq, 必填
};

message ServerSendClientBstWrap1 {
    string version     = 1;    ///版本号, 默认为1,, 必填
    string app_name    = 2;    ///被调方业务名称, 非必填
    string cmd         = 3;    ///请求命令字, 必填
    string seq         = 4;    ///请求序列号, 可使用uuid生成串, 必填
    string client_ip   = 5;    ///客户端ip, 非必填
    string service_ip  = 6;    ///服务端ip, 非必填
    string business    = 7;    ///调用方, 非必填
    string auth_key    = 8;    ///鉴权key, 传token值, sdk必填
    uint32 auth_type   = 9;    ///鉴权类型
    string auth_ip     = 10;   ///调用方ip
    string game_id     = 11;   ///游戏ID，必填
    uint64 uid         = 12;   ///用户唯一标示  --待定
    string player_id   = 13;   ///后端生成的玩家ID, 接入层负责校验合法性, 必填
    bytes  body        = 14;   ///参见 AccessReq, 必填
};

///统一回包，err_code和err_msg为框架错误信息，业务错误码在body中
message ClientSendServerRspWrap1 {
    string seq         = 1;    ///请求序列号
    int32 err_code     = 2;    ///错误码(0~10000为系统错误)
    string err_msg     = 3;    ///错误信息
    bytes body         = 4;    ///参见 AccessRsp
}

///转发层body
message ClientSendServerReqWrap2
{
    ProtoCmd cmd       = 1;    ///业务命令字
    bytes body         = 2;    ///业务body, 有各个业务自行定义
}

message ClientSendServerRspWrap2
{
    bytes body = 1;    ///业务回包, 由各业务自行定义
}


enum ConnectionType {
    COMMON  = 0;   ///通用
    RELAY   = 1;   ///帧同步或状态同步
}


///CMQ通知事件类型
enum EventType {
    ET_Unknown       = 0;   ///未设置类型
    ET_NetworkState  = 1;   ///网络事件通知
}

///CMQ事件消息结构
message EventInfo
{
    EventType event_type = 1; ///事件类型
    string seq           = 2; ///请求序列号
    bytes body           = 3; ///事件消息体
}

///NetworkState事件类型，body消息
message EventNetworkState
{
    string game_id             = 1; ///游戏ID
    string player_id           = 2; ///玩家ID
    NetworkState network_state = 3; ///网络状态
}


///心跳包body
message HeartBeatReq
{
    ConnectionType con_type = 1;
    string route_id    = 2;             ///路由ID
}

message HeartBeatRsp {}


///客户端协议
message ServerSendClientBstWrap2
{
    ServerSendClientBstWrap2Type type       = 1;            ///推送类型
    bytes  msg          = 2;            ///推送消息，由各业务定义
}

///客户端协议
message NOUSEServerSendClientBstRspWrap2 {}

///检查是否登陆
message CheckLoginReq
{
    string token        = 1;             ///客户端token
    string route_id    = 2;             ///路由ID
}

message CheckLoginRsp {}

enum ServerSendClientBstWrap2Type{
    /// 通用 (0-99)
    E_PUSH_TYPE_TEST                    = 0;   /// 测试
    E_PUSH_TYPE_RELAY                   = 1;
    E_PUSH_TYPE_GAMESVR                 = 2;   /// 后端自定义服务gamesvr推送

    /// 房间管理Push信息 (100-199)
    E_PUSH_TYPE_JOIN_ROOM                = 100; /// 加房广播
    E_PUSH_TYPE_LEAVE_ROOM               = 101; /// 离开房间广播
    E_PUSH_TYPE_DISMISS_ROOM             = 102; /// 解散房间广播
    E_PUSH_TYPE_REMOVE_PLAYER            = 103; /// 移除用户广播
    E_PUSH_TYPE_MODIFY_ROOM_PROPERTY     = 104; /// 修改房间属性广播
    E_PUSH_TYPE_NETWORK_STATE            = 105; /// 网络状态广播 & 队组复用
    E_PUSH_TYPE_ROOM_CHAT                = 106; /// 房间聊天广播
    E_PUSH_TYPE_PLAYER_STATE             = 107; /// 更改用户状态广播
    E_PUSH_TYPE_START_GAME               = 108; /// 开始游戏广播
    E_PUSH_TYPE_STOP_GAME                = 109; /// 结束游戏广播
    E_PUSH_TYPE_CREATE_ROOM              = 110; /// 创建房间 - 自定义服务逻辑
    E_PUSH_TYPE_DESTROY_ROOM             = 111; /// 销毁房间 - 自定义服务逻辑

    /// 匹配Push信息 (200-299)
    E_PUSH_TYPE_MATCH_SUCCESS            = 200; /// 匹配user成功
    E_PUSH_TYPE_MATCH_TIMEOUT            = 201; /// 匹配超时广播
    E_PUSH_TYPE_MATCH_CANCEL             = 202; /// 玩家取消匹配广播

    /// 队组广播
    E_PUSH_TYPE_JOIN_GROUP               = 500; /// 加入队组广播
    E_PUSH_TYPE_LEAVE_GROUP              = 501; /// 退出队组广播
    E_PUSH_TYPE_DISMISS_GROUP            = 502; /// 解散队组广播
    E_PUSH_TYPE_MODIFY_GROUP_PROPERTY    = 503; /// 修改队组广播
    E_PUSH_TYPE_REMOVE_GROUP_PLAYER      = 504; /// 移除队组内玩家广播
    E_PUSH_TYPE_GROUP_PLAYER_STATE       = 505; /// 队组内玩家自定义状态变化广播
    E_PUSH_TYPE_GROUP_CHAT               = 506; /// 收到对组内其他玩家消息广播
};

///以下定义每个push的body
message PushBodyType
{
    string push_msg     =  1;    ///测试消息
}
/*******************************************************************************/


/// 对外命令字枚举类型（分段），由access_svr在diapatch层转换成string再透传到后端
enum ProtoCmd {
    /////////接入层 （100-999）//////////
    E_CMD_INVALID                = 0;   /// 保留
    E_CMD_HEART_BEAT_REQ         = 100; /// 应用层心跳包
    E_CMD_CHECK_LOGIN_REQ        = 101; /// 检查登陆
    E_CMD_LOGIN_TO_ROOM_REQ      = 102; /// 登录通知房间
    E_CMD_FORWARD_TO_RELAY_REQ   = 103; /// 转发包到Relay

    /////////用户中心 （1000-1999）/////////
    E_CMD_LOGIN_REQ                 = 1000; /// 登录
    E_CMD_LOGOUT_REQ                = 1001; /// 登出
    E_CMD_AUTH_REQ                  = 1002; /// 鉴权
    E_CMD_QUERY_BY_PLAYER_ID_REQ    = 1003; /// 根据用户ID查询用户
    E_CMD_QUERY_BY_GAME_ID_REQ      = 1004; /// 根据game_id player_id 询用户

    /////////房间类 （2000-2999）///////
    E_CMD_GET_ROOM_DETAIL_REQ               = 2001; /// 查询房间详细信息
    E_CMD_JOIN_ROOM_REQ                     = 2002; /// 加入指定房间
    E_CMD_QUIT_ROOM_REQ                     = 2003; /// 退出房间
    E_CMD_CREATE_ROOM_REQ                   = 2004; /// 创建房间
    E_CMD_DESTORY_ROOM_REQ                  = 2005; /// 销毁房间
    E_CMD_REMOVE_MEMBER_REQ                 = 2006; /// 踢人
    E_CMD_CHANGE_ROOM_PROPERTIS_REQ         = 2007; /// 更改房间属性
    E_CMD_DISSMISS_ROOM_REQ                 = 2008; /// 解散房间
    E_CMD_CHANGE_PLAYER_STATE_REQ           = 2009; /// 更改用户状态
    E_CMD_CHANGE_PLAYER_NETWORK_STATE_REQ   = 2010; /// 更改用户网络状态
    E_CMD_ROOM_CHAT_REQ                     = 2011; /// 房间聊天
    E_CMD_START_FRAME_SYNC_REQ              = 2012; /// 开始帧同步
    E_CMD_STOP_FRAME_SYNC_REQ               = 2013; /// 停止帧同步
    E_CMD_GET_ROOM_LIST_REQ                 = 2014; /// 查询房间列表 - 老接口 select_room_list_handler
    E_CMD_SVR_REMOVE_MEMBER_REQ             = 2015; /// 服务端踢人
    E_CMD_SVR_CHANGE_ROOM_PROPERTIS_REQ     = 2016; /// 服务端更改房间属性
    E_CMD_SVR_CHANGE_PLAYER_STATE_REQ       = 2017; /// 服务端更改用户状态
    E_CMD_GET_ROOM_LIST_V2_REQ              = 2018; /// 查询房间列表 - 新接口 get_room_list_handler
    E_CMD_CREATE_ROOM_FOR_THIRD_PARTY_REQ   = 2019; /// 创建房间 - 第三方创房，通过openId发起

    /////////匹配服务类 （3000-3999）/////////
    E_CMD_MATCH_ROOM_SIMPLE_REQ             = 3001; /// 简单房间匹配
    E_CMD_MATCH_USER_SIMPLE_REQ             = 3002; /// 简单在线匹配
    E_CMD_MATCH_CANCEL_MATCH_REQ            = 3003; /// 取消匹配
    E_CMD_MATCH_ROOM_COMPLEX_REQ            = 3004; /// 复杂房间匹配
    E_CMD_MATCH_PLAYER_COMPLEX_REQ          = 3005; /// 复杂在线匹配
    E_CMD_MATCH_GROUP_REQ                   = 3006; /// 组队匹配

    /////////帧同步或状态同步 （4000-4999）/////////
    E_CMD_RELAY_SEND_FRAME_REQ                  = 4000; /// 帧同步输入
    E_CMD_RELAY_REQUEST_FRAME_REQ               = 4001; /// 补帧
    E_CMD_RELAY_CLIENT_SENDTO_GAMESVR_REQ       = 4002; /// sdk发消息给自定义扩展服务gamesvr
    E_CMD_RELAY_CLIENT_RECV_FROM_GAMESVR_REQ    = 4003; /// 自定义扩展服务gamesvr给客户端发送消息

    /////////消息或事件推送（5000-5999）
    E_CMD_NOTIFY_JOIN_ROOM          = 5000; /// 加房事件广播（通知回调）
    E_CMD_NOTIFY_QUIT_ROOM          = 5001; /// 退房事件广播（通知回调）
    E_CMD_NOTIFY_DESTORY_ROOM       = 5002; /// 销毁房间广播（通知回调）
    E_CMD_NOTIFY_NET_STATE          = 5003; /// 网络状态广播（通知回调）
    E_CMD_NOTIFY_KICK_MEMBER        = 5004; /// 踢人广播（通知回调）

    /////////Ctrl类 （6000-6999）/////////
    E_CMD_GET_ADDR_BY_ROUTER_ID_REQ = 6000; ///根router_id查询rs_ip和rs_port

    /////////队组类 （7000-7999）///////
    E_CMD_GET_GROUP_DETAIL_REQ                  = 7001; /// 查询队组详细信息 GetGroupByGroupIdReq
    E_CMD_JOIN_GROUP_REQ                        = 7002; /// 加入指定队组 JoinGroupReq
    E_CMD_QUIT_GROUP_REQ                        = 7003; /// 退出队组 LeaveGroupReq
    E_CMD_CREATE_GROUP_REQ                      = 7004; /// 创建队组 CreateGroupReq
    E_CMD_REMOVE_GROUP_MEMBER_REQ               = 7005; /// 踢人 RemoveGroupPlayerReq
    E_CMD_CHANGE_GROUP_PROPERTIES_REQ           = 7006; /// 更改队组属性 ChangeGroupReq
    E_CMD_DISMISS_GROUP_REQ                     = 7007; /// 解散队组 DismissGroupReq
    E_CMD_CHANGE_GROUP_PLAYER_STATE_REQ         = 7008; /// 更改用户状态 ChangeCustomGroupPlayerStatusReq
    E_CMD_CHANGE_GROUP_PLAYER_NETWORK_STATE_REQ = 7009; /// 更改用户网络状态
    E_CMD_GROUP_CHAT_REQ                        = 7010; /// 队组聊天 SendToGroupClientReq 
    E_CMD_GET_GROUP_LIST_REQ                    = 7011; /// 查询队组列表 GetMyGroupsReq
};

///QApp协议系统逻辑错误码(号段0~10000),业务错误码(10001~0xFFFFFFFF)
///10000～19999 用户中心
///20000～29999 房间管理
///30000～39999 匹配服务
///40000～49999 帧同步服务
///50000～59999 调度中心
///60000～69999 业务参数错误
///-60000～69999  负数 - 系统内部错误，统一提示系统错误
///90000～99999 预留给客户端
enum QAppProtoErrCode {
    ///系统框架错误
    EC_OK              = 0;  /// 返回成功
    EC_REQ_BAD_PKG     = 1;  /// 请求包格式错误
    EC_CMD_INVALID     = 2;  /// 非法命令字
    EC_PARAMS_INVALID  = 3;  /// 参数错误
    EC_INNER_ERROR     = 4;  /// 服务器内部错误
    EC_TIME_OUT        = 5;  /// 后端超时错误
    EC_SERVER_BUSY     = 6;  /// 服务器繁忙
    EC_NO_RIGHT        = 7;  /// 没有权限请求

    ///接入层错误码
    EC_ACCESS_CMD_INVALID_ERR        = 200;  /// 命令字无效错误
    EC_ACCESS_CMD_GET_TOKEN_ERR      = 201;  /// 获取Token失败
    EC_ACCESS_CMD_TOKEN_PRE_EXPIRE   = 202;  /// Token即将过期
    EC_ACCESS_CMD_INVALID_TOKEN      = 203;  /// Token无效或过期
    EC_ACCESS_PUSH_SERIALIZE_ERR     = 204;  /// PUSH序列化包失败
    EC_ACCESS_LOGIN_BODY_PARSE_ERR   = 205;  /// 登陆用户中心回包解析出错
    EC_ACCESS_CONN_ERR               = 206;  /// 查找连接信息出错
    EC_ACCESS_GET_RS_IP_ERR          = 207;  /// 获取Relay的RS_IP或RS_PORT出错
    EC_ACCESS_ADD_COMM_CONN_ERR      = 208;  /// 添加COMM连接信息失败
    EC_ACCESS_ADD_HEART_CONN_ERR     = 209;  /// 添加心跳连接信息失败
    EC_ACCESS_ADD_RELAY_CONN_ERR     = 210;  /// 添加Relay连接信息失败
    EC_ACCESS_HEART_BODY_PARSE_ERR   = 211;  /// 心跳包解析出错
    EC_ACCESS_GET_COMM_CONNECT_ERR   = 212;  /// 获取COMM连接信息失效
    EC_ACCESS_GET_RELAY_CONNECT_ERR  = 213;  /// 获取RELAY连接信息失效
    EC_ACCESS_ACCESS_INFO_EMPTY      = 214;  /// 连接信息为空
    EC_ACCESS_PLAYER_DUPLICATE_LOGIN = 215;  /// 用户已经登录，不能重复登录
    EC_ACCESS_NOE_RELAY_OR_STATE_SVR = 216;  /// 转发SVR名字错误，不是relay_svr或state_svr

    ///用户中心错误（10000～19999）
    EC_PLAYER_GAME_NOT_EXIST        = 10000;   /// game不存在
    EC_PLAYER_SECRET_KEY_FAIL       = 10001;   /// 查询secret_key失败
    EC_PLAYER_SIGN_ERR              = 10002;   /// sign校验失败
    EC_PLAYER_DUPLICATE_REQ         = 10003;   /// 重复请求
    EC_PLAYER_TIMESTAMP_INVALID     = 10004;   /// timestamp非法
    EC_PLAYER_QUERY_PLAYER_FAIL     = 10005;   /// 查询用户信息失败
    EC_PLAYER_ADD_PLAYER_FAIL       = 10006;   /// 新增用户信息失败
    EC_PLAYER_QUERY_GAME_FAIL       = 10007;   /// 查询game信息失败
    EC_PLAYER_RECORD_NUM_ERR        = 10008;   /// 用户记录数不正确
    EC_PLAYER_GET_TOKEN_FAIL        = 10009;   /// 查询token失败
    EC_PLAYER_TOKEN_NOT_EXIST       = 10010;   /// token不存在
    EC_PLAYER_TOKEN_INVALID         = 10011;   /// token非法
    EC_PLAYER_CLEAR_TOKEN_FAIL      = 10012;   /// 清除token缓存失败
    EC_PLAYER_LOCK_FAIL             = 10013;   /// 获取分布式锁失败
    EC_PLAYER_UNLOCK_FAIL           = 10014;   /// 释放分布式锁失败
    EC_PLAYER_SAVE_TOKEN_FAIL       = 10015;   /// 保存token缓存失败
    EC_PLAYER_GAME_OUT_OF_SERVICE   = 10016;   /// 游戏已停止服务

    ///房间管理类错误（20000-29999）
    EC_ROOM_CREATE_NO_PERMISSION                    = 20000; /// 创建房间无权限
    EC_ROOM_DESTORY_NO_PERMISSION                   = 20001; /// 销毁房间无权限
    EC_ROOM_JOIN_NO_PERMISSION                      = 20002; /// 无权限加入房间
    EC_ROOM_REMOVE_PLAYER_NO_PERMISSION             = 20003; /// 无踢人权限
    EC_ROOM_MODIFY_PROPERTIES_NO_PEMISSION          = 20004; /// 无修改房间属性权限
    EC_ROOM_DISSMISS_NO_PERMISSION                  = 20005; /// 无解散房间权限
    EC_ROOM_REMOVE_SELF_NO_PERMISSION               = 20006; /// 无踢出自己权限
    EC_ROOM_CHECK_LOGIN_SESSION_ERR                 = 20007; /// 检查登录失败
    EC_ROOM_REMOVE_PLAYER_NOT_IN_ROOM               = 20008; /// 被踢玩家不在房间中

    EC_ROOM_PLAYER_ALREADY_IN_ROOM                  = 20010; /// 用户已经在房间内，不能操作创建房间、加房等操作
    EC_ROOM_PLAYER_NOT_IN_ROOM                      = 20011; /// 用户目前不在房间内，不能操作更改房间属性、踢人等操作
    EC_ROOM_PLAYERS_EXCEED_LIMIT                    = 20012; /// 房间内用户数已经达到最大人数不能再加入了
    EC_ROOM_JOIN_NOT_ALLOW                          = 20013; /// 房间不允许加入用户
    EC_ROOM_MAX_PLAYERS_INVALID                     = 20014; /// 最大用户数值设置非法
    EC_ROOM_CREATE_FAIL                             = 20015; /// 创建房间失败
    EC_ROOM_PLAYER_OFFLINE                          = 20016; /// 用户在房间中掉线，不能开始游戏等操作
    EC_ROOM_PARAM_PAGE_INVALID                      = 20017; /// 页号、页数大小参数不合法，可能实际大小没这么大
    EC_ROOM_GET_PLAYER_INFO_ERR                     = 20050; /// 查询用户信息失败
    EC_ROOM_GET_ROOM_INFO_ERR                       = 20051; /// 获取房间信息失败
    EC_ROOM_MODIFY_OWNER_ERR                        = 20052; /// 修改房主失败
    EC_ROOM_MAX_ROOM_NUMBER_EXCEED_LIMIT            = 20053; /// 房间数量超过限制

    EC_ROOM_REMOVE_REDIS_PLAYER_ROOM_MATCH_ERR      = -20052; /// 删除用户房间映射表信息失败
    EC_ROOM_REMOVE_REDIS_ROOM_INFO_ERR              = -20053; /// 删除房间信息表信息失败
    EC_ROOM_REDIS_UPDATE_ERR                        = -20054; /// 数据库更新失败
    EC_ROOM_REDIS_GET_LOCK_ERR                      = -20055; /// 获取锁失败
    EC_ROOM_REDIS_CHECK_LOCK_ERR                    = -20056; /// 检查锁失败，一般是过期
    EC_ROOM_REDIS_DEL_LOCK_ERR                      = -20057; /// 删除锁失败

    EC_ROOM_QUERY_PLAYER_ERR                        = 20060; /// 查询用户信息失败
    EC_ROOM_QUERY_GAME_ERR                          = 20061; /// 游戏信息失败
    EC_ROOM_PLAYER_INFO_NOT_EXIST                   = 20062; /// 用户信息不存在
    EC_ROOM_GAME_INFO_NOT_EXIST                     = 20063; /// 游戏信息不存在
    EC_ROOM_HISTORY_INFO_INSERT_ERR                 = -20064; /// mysql数据库插入历史房间信息失败
    EC_ROOM_REGION_INFO_NOT_EXIST                   = 20065; /// 查询不到accessRegion信息
    EC_ROOM_QUERY_REGION_ERR                        = 20066; /// 查询地域信息失败
    /// 操作冲突 需要重试 20070-20079
    EC_ROOM_MODIFY_PLAYER_BUSY                      = 20070; /// 玩家信息操作繁忙，请重试

    EC_ROOM_INFO_UNEXIST                            = 20080; /// 房间信息不存在
    EC_ROOM_ALLOCATE_RELAYSVR_IP_PORT_ERR           = 20090; /// ctrlsvr分配relaysvr失败
    ///teams
    EC_ROOM_INVALID_PARAMS_TEAM_ID                  = 20100; /// 房间teamId无效
    EC_ROOM_TEAM_MEMBER_LIMIT_EXCEED                = 20101; /// 房间团队人员已满
    /// room service op 20200
    EC_ROOM_ALLOCATE_SERVICE_FAIL                   = -20200; /// 申请service失败

    ///匹配服务类错误 （30000～39999）
    EC_MATCH_NO_ROOM                            = 30000; /// 匹配失败，无任何房间
    EC_MATCH_TIMEOUT                            = 30001; /// 匹配超时
    EC_MATCH_LOGIC_ERR                          = 30002; /// 匹配逻辑错误
    EC_MATCH_ERR                                = 30010; /// 匹配失败
    EC_MATCH_PLAYER_IS_IN_MATCH                 = 30011; /// 用户已经在匹配中
    EC_MATCH_PLAYER_NOT_IN_MATCH                = 30012; /// 用户不在匹配状态
    EC_MATCH_GET_MATCH_INFO_ERR                 = 30013; /// 获取匹配信息失败
    EC_MATCH_UPDATE_MATCH_INFO_ERR              = 30014; /// 更新匹配信息失败
    EC_MATCH_CANCEL_FAILED                      = 30015; /// 取消匹配失败
    EC_MATCH_GET_PLAYER_LIST_INFO_ERR           = 30016; /// 查询匹配队列信息失败
    EC_MATCH_CREATE_ROOM_ERR                    = 30041; /// 匹配创建房间失败
    EC_MATCH_JOIN_ROOM_ERR                      = 30042; /// 匹配加入房间失败
    EC_MATCH_INVALID_PARAMS                     = 30043; /// 匹配无效参数
    EC_MATCH_GROUP_NUM_EXCEED_LIMIT             = 30044; /// 匹配小组人数超过队伍上限

    EC_MATCH_PLAYER_ID_IS_REPEATED              = 30045; /// 匹配小组中玩家ID重复
    EC_MATCH_CREATE_ROOM_PLAYER_ALREADY_IN_ROOM = 30050; /// 匹配创房 有玩家已经在房间中

    EC_MATCH_QUERY_PLAYER_ERR                   = 30100; /// 查询用户信息失败
    EC_MATCH_PLAYER_INFO_NOT_EXIST              = 30101; /// 用户信息不存在
    EC_MATCH_QUERY_GAME_ERR                     = 30102; /// 查询游戏信息失败
    EC_MATCH_GAME_INFO_NOT_EXIST                = 30103; /// 游戏信息不存在
    EC_MATCH_QUERY_REGION_ERR                   = 30104; /// 查询大区信息失败
    EC_MATCH_REGION_INFO_NOT_EXIST              = 30105; /// 无大区信息
    EC_MATCH_TEAM_FAIL                          = 30106; /// 团队匹配失败
    EC_MATCH_PLAY_RULE_NOT_RUNNING              = 30107; /// 匹配规则不可用
    EC_MATCH_PLAY_ATTR_NOT_FOUND                = 30108; /// 匹配参数不完整
    EC_MATCH_PLAY_RULE_NOT_FOUND                = 30109; /// 匹配规则不存在
    EC_MATCH_PLAY_RULE_ATTR_SEGMENT_NOT_FOUND   = 30110; /// 匹配规则获取属性匹配区间失败
    EC_MATCH_PLAY_RULE_FUNC_ERR                 = 30111; /// 匹配规则算法错误
    EC_MATCH_GET_PLAYER_ATTR_FAIL               = 30112; /// 匹配获取玩家属性失败
    EC_MATCH_GET_TEAM_ATTR_FAIL                 = 30113; /// 匹配获取队伍属性失败
    EC_MATCH_NONE_TEAM_TYPE_FIT                 = 30114; /// 玩家属性无法决定队伍类别
    EC_MATCH_TEAM_TYPE_INVALID                  = 30115; /// 玩家伍类别非法
    EC_MATCH_PLAYER_ATTR_NOT_FOUND              = 30116; /// 玩家属性不存在
    EC_MATCH_REQUEST_ID_NOT_EXIST               = 30117; /// 匹配请求ID不存在
    EC_MATCH_REQUEST_ID_IS_EXIST                = 30118; /// 匹配请求ID已经存在
    EC_MATCH_TEAM_MATCH_FAIL                    = 30119; /// 队伍匹配失败
    EC_MATCH_ROBOT_GROUP_NOT_RIGHT              = 30120; /// 匹配机器人Group不正确
    EC_MATCH_ROBOT_TEAM_NOT_RIGHT               = 30121; /// 匹配机器人Team不正确

    EC_MATCH_INNER_LOGIC_ERR                    = -30150; /// 匹配内部逻辑错误
    EC_MATCH_INNER_PARAMS_ERR                   = -30160; /// 匹配内部参数错误
    EC_MATCH_ROOM_INNER_ADD_NODE_ERR            = -30170; /// 匹配房间 添加节点失败
    EC_MATCH_ROOM_INNER_DEL_NODE_ERR            = -30171; /// 匹配房间 删除节点失败

    EC_MATCH_RESULT_TYPE_NOT_GSE                = -30172; /// 匹配不是GSE类型 查询匹配结果失败
    EC_MATCH_REQUEST_CANCELED                   = 30173; /// 匹配已经取消

    ///帧同步服务类错误（40000-49999）
    EC_RELAY_ALREADY_EXISTS   					= 40000;    ///重复创建
    EC_RELAY_NOT_EXISTS 						= 40001;	///服务不存在
    EC_RELAY_DATA_EXCEED_LIMITED				= 40002;	///data长度超限制
    EC_RELAY_MEMBER_ALREADY_EXISTS				= 40003;    ///成员已存在
    EC_RELAY_MEMBER_NOT_EXISTS					= 40004;    ///成员不存在
	EC_RELAY_STATE_INVALID						= 40005;    ///状态异常
    EC_RELAY_INVALID_FRAME_RATE                 = 40006;    ///帧率非法
    EC_RELAY_SET_FRAME_RATE_FORBIDDEN           = 40007;    ///开局状态下，G不允许修改帧率
    EC_RELAY_NO_MEMBERS                         = 40008;    ///没任何成员
    EC_RELAY_GAMESVR_SERVICE_NOT_OPEN           = 40009;    ///自定义扩展服务（gamesvr）未开通
    EC_RELAY_REQ_POD_FAIL                       = 40010;    ///请求分配pod失败
    EC_RELAY_NO_AVAILABLE_POD                   = 40011;    ///无可用的pod
    EC_RELAY_GET_FRAME_CACHE_FAIL               = 40012;    ///查询帧缓存失败
    EC_RELAY_HKV_CACHE_ERROR                    = 40015;    ///共享内存缓存错误
    EC_RELAY_REDIS_CACHE_ERROR                  = 40016;    ///redis缓存错误
    EC_RELAY_NOTIFY_RELAYWORKER_FAIL            = 40018;    ///通知relayworker失败
    EC_RELAY_RESET_RELAY_ROOM_FAIL              = 40019;    ///重置房间对局失败
    EC_RELAY_CLEAN_RELAY_ROOM_FAIL              = 40020;    ///清理房间对局数据失败
    EC_RELAY_NO_PERMISSION						= 40100;	///没权限，401开头是权限相关错误
    EC_RELAY_NOTIFY_GAMESVR_FAIL                = 40200;    ///通知自定义服务gamesvr失败， 402开头，是自定义gamesvr相关的错误
    EC_RELAY_FORWARD_TO_GAMESVR_FAIL            = 40201;    ///转发到自定义逻辑svr失败
    EC_RELAY_FORWARD_TO_CLIENT_FAIL             = 40202;    ///转发到client-sdk失败

    /// 队组错误码
    EC_GROUP_OPERATION_FAILED                   = 70000;   /// 队组操作失败
    EC_INVALID_PARAMS_GROUP_NAME                = 70001;    /// 队组名称参数错误
    EC_INVALID_PARAMS_GROUP_TYPE                = 70002;    /// 队组类型参数错误
    EC_INVALID_PARAMS_GROUP_CUSTOM_PROPERTIES   = 70003;    /// 队组自定义属性参数错误
    EC_INVALID_PARAMS_GROUP_PLAYER_NAME         = 70004;    /// 队组玩家名称参数错误
    EC_INVALID_PARAMS_GROUP_PLAYER_CUSTOM_STATUS= 70005;    /// 队组玩家自定义状态参数错误
    EC_INVALID_PARAMS_GROUP_PLAYER_CUSTOM_PROPERTIES= 70006;/// 队组玩家自定义属性参数错误
    EC_GROUP_MODIFY_OWNER_NO_PERMISSION         = 70007;    /// 无权限修改队组队长
    EC_INVALID_PARAMS_GROUP_ID                  = 70008;    /// 队组id参数错误
    EC_INVALID_CHANGE_OPTION                    = 70009;    /// 无效的修改选项
    EC_INVALID_PARAMS_GROUP_OWNER               = 70010;   /// 队组 owner 参数错误
    EC_PLAYER_IS_EXIST_GROUP                    = 70011;   /// 玩家已经在队组中
    EC_PLAYER_IS_NOT_EXIST_GROUP                = 70012;   /// 玩家不在该队组中
    EC_REMOVE_PLAYER_ID_IS_EMPTY                = 70013;   /// 被移除的玩家Id为空
    EC_GROUP_REMOVE_PLAYER_NO_PERMISSION        = 70014;   /// 没有权限移除玩家
    EC_INVALID_PARAMS_GROUP_RECV_TYPE           = 70015;   /// 队组接收消息类型参数错误
    EC_INVALID_PARAMS_RECV_PLAYER_ID            = 70016;   /// 队组接收消息的玩家中存在不在队组中的玩家
    EC_INVALID_PARAMS_MESSAGE_LENGTH            = 70017;   /// 消息长度超过限制
    EC_INVALID_PARAMS_MAX_PLAYER                = 70018;   /// 最大玩家数量参数错误
    PERSISTENCE_GROUP_NUM_EXCEED_THE_LIMIT      = 70019;   /// 持久化队组数量超过限制
    EC_INVALID_PARAMS_PLAYER_NOT_IN_GROUP       = 70020;   /// 玩家不在队组中不允许操作
    NO_GROUP_OPERATION_PERMISSION               = 70021;   /// 没有队组操作权限
    EC_OPERATION_FAILED_GROUP_FORBID_JOIN       = 70022;   /// 队组禁止玩家加入
    EC_GROUP_CHAT_FREQUENCY_LIMIT               = 70023;   /// 发送消息频率达到限制
    EC_GROUP_PLAYER_NUM_LIMIT_EXCEED            = 70024;   /// 对组中人数超过限制
    EC_PLAYER_GROUP_NUM_LIMIT_EXCEED            = 70025;   /// 玩家加入的对组个数超过限制
    EC_GROUP_NOT_EXIST                          = 70026;   /// 队组不存在

    ///50000～59999 调度中心

    ///公共段参数错误 60000~65999
    EC_INVALID_PARAMS                           = 60000; /// 业务参数错误
    //////匹配
    EC_INVALID_PARAMS_PLAY_MODE_VERSION         = 60001; /// 玩法协议版本号错误
    EC_INVALID_PARAMS_PLAY_MODE_RULETYPE        = 60002; /// 玩法协议规则类型错误
    EC_INVALID_PARAMS_PLAY_MODE_EXPRESSION      = 60003; /// 玩法协议规则表达式错误
    EC_INVALID_PARAMS_PLAY_MODE_TEAM            = 60004; /// 玩法协议规则团队表达式错误
    ////// msg queue 参数错误
    EC_INVALID_PARAMS_MSGQ_ENCODE                 = 60020; /// 消息队列 消息encode 参数错误
    EC_INVALID_PARAMS_MSGQ_DECODE                 = 60021; /// 消息队列 消息decode 参数错误
    //////CheckReq para check - 对外
    EC_INVALID_PARAMS_GAME_ID                   = 61000; /// 参数错误 game_id
    EC_INVALID_PARAMS_PLAYER_INFO               = 61001; /// 参数错误 player_info
    EC_INVALID_PARAMS_MAX_PLAYERS               = 61002; /// 参数错误 max_players
    EC_INVALID_PARAMS_ROOM_TYPE                 = 61003; /// 参数错误 room_type
    EC_INVALID_PARAMS_PLAYER_ID                 = 61004; /// 参数错误 player_id
    EC_INVALID_PARAMS_MATCH_TYPE                = 61005; /// 参数错误 match_type
    EC_INVALID_PARAMS_MATCH_CODE                = 61006; /// 参数错误 match_code
    EC_INVALID_PARAMS_OPEN_ID                   = 61007; /// 参数错误 open_id
    EC_INVALID_PARAMS_PLATFORM                  = 61008; /// 参数错误 platform
    EC_INVALID_PARAMS_TIMESTAMP                 = 61009; /// 参数错误 timestamp
    EC_INVALID_PARAMS_SIGN                      = 61010; /// 参数错误 sign
    EC_INVALID_PARAMS_NONCE                     = 61011; /// 参数错误 nonce
    EC_INVALID_PARAMS_TOKEN                     = 61012; /// 参数错误 token
    EC_INVALID_PARAMS_NETWORK_STATE             = 61013; /// 参数错误 network_state
    EC_INVALID_PARAMS_ROOM_NAME                 = 61014; /// 参数错误 room_name
    EC_INVALID_PARAMS_CREATE_ROOM_TYPE          = 61015; /// 参数错误 create_room_type
    EC_INVALID_PARAMS_DEVICE_ID                 = 61016; /// 参数错误 device_id
    EC_INVALID_PARAMS_PAGE_NO                   = 61017; /// 参数错误 page_no
    EC_INVALID_PARAMS_PAGE_SIZE                 = 61018; /// 参数错误 page_size
    EC_INVALID_PARAMS_PLAYER_LIST               = 61019; /// 参数错误 player list
    EC_INVALID_PARAMS_MESSAGE                   = 61020; /// 参数错误 message
    EC_INVALID_CHANGE_ROOM_OPTION               = 61021; /// 参数错误 change_room_option_list
    EC_INVALID_PARAMS_REGION                    = 61022; /// 参数错误 region
    EC_INVALID_PARAMS_OWNER                     = 61023; /// 参数错误 owner
    EC_INVALID_PARAMS_OWNER_OPEN_ID             = 61024; /// 参数错误 owner_open_id
    ///EC_INVALID_PARAMS_OPEN_ID                   = 61025; /// 参数错误 open_id 非法
    EC_INVALID_PARAMS_OPEN_ID_DUPLICATE         = 61026; /// 参数错误 open_id 重复
    EC_INVALID_PARAMS_ROOM_CREATE_TYPE          = 61027; /// 参数错误 create_type

	/// 系统错误 -6600~-69999
    ///myspp框架抛出-1000
    EC_MYSPP_SYSTEM_ERR                         = -1000;     ///myspp框架返回-1000
	//////redis
	EC_REDIS_KEY_NOT_EXIST                      = -66000;   /// redis KEY 不存在
	EC_REDIS_SET_OP_ERR                         = -66001;   /// redis set 类操作失败
	EC_REDIS_GET_OP_ERR                         = -66002;   /// redis get 类操作失败
	EC_REDIS_DEL_OP_ERR                         = -66003;   /// redis del 类操作失败
	EC_REDIS_EXPIRE_OP_ERR                      = -66004;   /// redis 操作异常
	EC_REDIS_LOCK_OP_ERR                        = -66005;   /// redis 加锁 类操作失败
	EC_REDIS_LOCK_ALREADY_EXIST                 = -66006;   /// redis 加锁冲突 类操作失败
	EC_REDIS_LIST_OP_ERR                        = -66020;   /// redis list 操作失败
	EC_REDIS_LIST_POP_EMPTY                     = -66021;   /// redis list pop 空结果
	EC_REDIS_POOL_GET_INSTANCE_FAIL             = -66022;   /// redis 实例池获取实例失败
	EC_REDIS_SET_IS_EMPTY                       = -66023;   /// redis set内为空
	EC_REDIS_OP_INVALID_PARAMS                  = -66024;   /// redis 操作参数不合法

    //////mysql
	EC_MYSQL_NO_ROW_FOUND                       = -66100;   /// 查询为空
	EC_MYSQL_MULTI_ROW_FOUND                    = -66101;   /// 查询为空
	EC_MYSQL_INSERT_FAIL                        = -66102;   /// 插入失败
	EC_MYSQL_DELETE_FAIL                        = -66103;   /// 失败
	EC_MYSQL_UPDATE_FAIL                        = -66104;   /// 失败
	EC_MYSQL_QUERYS_FAIL                        = -66105;   /// 失败
    //////pb
	EC_PB_SERIALIZE_TO_STR_ERR                  = -66200;  /// 序列化失败
	EC_PB_PARSE_FROM_STR_ERR                    = -66201;  /// 反序列化失败
	//////json
	EC_DATA_FORMAT_ERR                          = -66210;  /// 数据格式转化失败
	EC_JSON_FORMAT_ERR                          = -66211;  /// JSON数据格式转化失败
	EC_JSON_PLAY_MODE_FORMAT_ERR                = -66212;  /// 玩法数据格式转化失败
	EC_JSON_PLAY_MODE_PARISE_ERR                = -66213;  /// 玩法数据格式转化失败
	////// 对内接口参数错误
	EC_INVALID_PARAMS_RECORE_ID                 = -66601;    ///参数错误 recordId
	//////libs
	EC_HASHID_ERR                               = -66700;    /// hashcode生成失败
    EC_HASHID_ENCODE_ERR                        = -66701;    /// hashcode编码失败
    EC_HASHID_DECODE_ERR                        = -66702;    /// hashcode解码失败
    //////conf
    EC_CONF_ROOM_ID_BUCKET_ERR                  = -66801;   /// 配置 房间id管理模块错误

    ///90000～99999 预留给客户端
	//////客户端错误
	EC_SDK_SEND_FAIL           = 90001; /// 消息发送失败
	EC_SDK_UNINIT              = 90002; /// SDK 未初始化
	EC_SDK_RES_TIMEOUT         = 90003; /// 消息响应超时
	EC_SDK_NO_LOGIN            = 90004; /// 登录态错误
	EC_SDK_NO_CHECK_LOGIN      = 90005; /// 帧同步鉴权错误
	EC_SDK_SOCKET_ERROR        = 90006; /// 网络错误
	EC_SDK_SOCKET_CLOSE        = 90007; /// Socket 断开
	EC_SDK_NO_ROOM             = 90008; /// 无房间
	EC_SDK_ENCODE_PARAM_FAIL   = 90009; /// 编码失败
	EC_SDK_INVALID_PARAMS      = 90010; /// 参数错误
};

/////////用户中心////////////
message LoginReq {
    ///字段顺序：1、通用gameid roomid playerid  2、相关字段放一起
    ///gameid + open_id => player_id
    string game_id      = 1; /// 控制台分配的游戏ID
    string open_id      = 2; /// 若是微信平台，则是微信用户的openid, 开发商提供
    uint64 platform     = 3; /// 平台类型 android ios
    uint64 channel      = 4; /// 渠道： 微信、qq、QQ空间
    uint64 nonce        = 5; /// 随机正整数
    uint64 timestamp    = 6; /// 时间戳
    string sign         = 7; /// 签名串
    string device_id    = 8; /// 设备ID
    string mac          = 9; /// mac地址
    string imei         = 10;/// 手机序列号
}

message LoginRsp {
    string token    	= 1; /// 签发的token
    string player_id  	= 2; /// 用户id，游戏平台生成
    uint64 expire_time  = 3; /// 过期时间
    SdkConfig sdkConfig = 4; /// 心跳配置
}

message SdkConfig {
    uint32 ping_interval    = 1; /// 心跳间隔，默认 5000, ms
    uint32 report_interval  = 2; /// sdk默认上报间隔，默认10000, ms
    uint64 server_time      = 3; /// 服务端时间戳, ms
	bool enable_udp         = 4; /// 是否使用 UDP
	bool disable_report         = 5; /// 是否禁止上报，默认false
    bool disable_req_report     = 6; /// 是否禁止上报接口调用，默认false
    bool disable_frame_report   = 7; /// 是否禁止上报帧广播间隔，默认false
    uint32 min_report_size      = 8; /// 最小上报条数，默认10(兼容默认0)
}

message LogoutReq
{
    /// 接入层负责校验token，这里去掉
    ///string token        = 1; /// 登录成功后签发的token
}

message LogoutRsp
{
}

//////////////////////////////////////////////帧同步服务 or 状态同步/////////////////////////////////////////////
message StartFrameSyncReq {}

message StartFrameSyncRsp {}

message StopFrameSyncReq {}

message StopFrameSyncRsp {}

message FrameItem {
    string player_id    = 1;
    string data         = 2;
    uint64 timestamp    = 3;
}

///帧输入
message SendFrameReq {
    string room_id      = 1; /// [rm-sdk-para]
    FrameItem item      = 2;
}

message SendFrameRsp {}

message FrameExtInfo {
    uint64 seed    = 1;
}

message Frame {
    uint64 id    = 1;
    repeated FrameItem items    = 2;
    FrameExtInfo ext    = 3;
}
///补帧
message RequestFrameReq{
    string room_id          = 1; /// [rm-sdk-para]
    uint64 begin_frame_id   = 2;
    uint64 end_frame_id     = 3;
    bool support_partial    = 4; /// [rm-sdk-para]
}

message RequestFrameRsp{
    repeated Frame frames    = 1;
    bool is_partial          = 2; /// 如果补帧返回数据过多，会返回部分数据，需要前端继续请求
}
/////////////////////////////////end of 帧同步服务 or 状态同步//////////////////////////////////


/////////////////////////////////房间管理////////////////////////////////////////////////////////////////
/// 网络状态
enum NetworkState {
    COMMON_OFFLINE  = 0; /// 房间管理玩家掉线
    COMMON_ONLINE   = 1; /// 房间管理玩家在线
    RELAY_OFFLINE   = 2; /// 游戏中玩家掉线
    RELAY_ONLINE    = 3; /// 游戏中玩家在线
};

///玩家信息meta
message PlayerInfo {
     string id                       = 1; /// [rm-sdk-para] 用户ID（需要鉴权）
     string name                     = 2; /// 用户名字
     string team_id                         = 3; /// [rm-sdk-para] 归属队伍id
     uint64 custom_player_status            = 4; /// 开发者自定义状态，客户端透传(类似：0房间中；1准备中；2游戏中)
     string custom_profile                  = 5; /// 开发者自定义属性，用户的其他属性信息
     NetworkState common_network_state      = 6; /// [rm-sdk-para] 用户房间控制流网络状态：0房间掉线；1房间在线
     NetworkState relay_network_state       = 7; /// [rm-sdk-para] 用户帧同步控制流网络状态：2掉线；3在线
     bool is_robot                          = 8; /// [rm-sdk-para] 该玩家是否为机器人
     repeated MatchAttribute match_attributes    = 9; /// [rm-sdk-para] 匹配属性列表
}

///队伍信息meta
message TeamInfo {
    string id        = 1;  /// 队伍 id
    string name      = 2;  /// 队伍名称
    uint32 min_players    = 3;  /// 队伍最小人数
    uint32 max_players    = 4;  /// 队伍最大人数
}

/// 创建房间方式
enum CreateRoomType {
    COMMON_CREATE = 0; /// 手动创建
    MATCH_CREATE  = 1; /// 匹配创建
    THIRD_PARTY_CREATE = 2; /// 第三方平台创建
}

/// 帧同步状态
enum FrameSyncState {
    STOP  = 0; /// 未开始帧同步
    START = 1; /// 已开始帧同步
}

/// 房间信息meta
message RoomInfo {
    string id                      = 1; /// 房间ID
    string name                    = 2; /// 房间名称
    string type                    = 3; /// 房间的类型，自定义，透传
    CreateRoomType create_type          = 4; /// 创建房间方式
    uint64 max_players                  = 5; /// 房间内最大用户数限制
    string owner                        = 6; /// 房主 player_id
    bool is_private                     = 9; /// 是否允许匹配加房
    string custom_properties            = 10; /// 开发商自定义房间属性
    repeated PlayerInfo player_list     = 11; /// 房间内用户列表
    repeated TeamInfo team_list         = 13; /// 队伍信息
    FrameSyncState frame_sync_state   	= 14; /// 房间帧同步状态：0未开始帧同步；1已开始帧同步
    uint32 frame_rate                   = 15; /// 帧率，有效范围[5-30]
    string route_id                     = 16; /// 路由id
    uint64 create_time                  = 17; /// 创建房间时间
    uint64 start_game_time              = 18; /// 开始游戏时间， 默认为0
    bool is_forbid_join                 = 19; /// 房间是否禁止加人，默认false
}

/*
创建房间请求信息
///uint64 game_id /// 游戏id，access层鉴权并放在外层协议体
*/
message CreateRoomReq {
    string room_name                    = 1; /// 房间名称
    string room_type                    = 2; /// 房间的类型，自定义，透传
    CreateRoomType create_type          = 3; /// [rm-sdk-para] 创建方式：1.单人主动发起创建房间请求。2.多人在线匹配请求分配房间
    uint64 max_players                  = 4; /// 房间内最大用户数限制
    bool is_private                     = 7; /// 是否私有
    string custom_properties            = 8; /// 开发商自定义房间属性
    PlayerInfo player_info              = 9; /// 房主用户信息
    string region                       = 11; /// [rm-sdk-para] 当房间为在线匹配创建的时候需要传,为owner的region
    string owner                        = 12; /// [rm-sdk-para] 当房间为在线匹配创建的时候需要传, owner_player_id
    repeated PlayerInfo player_list     = 13; /// [rm-sdk-para] 当房间为在线匹配创建的时候需要传 MATCHCREATE 匹配创建时用到, 匹配到的成员列表
    repeated TeamInfo team_list         = 14; /// [rm-sdk-para] 当房间为在线匹配创建的时候需要传：teamid player_info_list 齐
}

/*
创建房间返回信息
*/
message CreateRoomRsp {
     RoomInfo room_info  = 1; /// 返回创建好的房间信息，里面包含userList加入房间的用户信息列表
}

/*
加入房间方式
*/
enum JoinRoomType {
    COMMON_JOIN     = 0; /// 游戏界面点击加入游戏
    MATCH_JOIN      = 1; /// 匹配方式加入游戏
}
/*
加入房间请求信息
*/
message JoinRoomReq {
    string room_id              = 1; /// [rm-sdk-para] roomId  1类和2类都要传
    string team_id              = 2; /// [rm-sdk-para] 队伍id
    JoinRoomType join_type      = 3; /// [rm-sdk-para] 操作
    PlayerInfo player_info      = 4; /// 申请加入房间的用户信息
}
/*
加入房间返回信息
*/
message JoinRoomRsp {
     RoomInfo room_info  = 1; /// 返回加入后的房间信息，里面包含userList所有加入房间的用户信息列表
}

/*
离开房间请求信息
*/
message LeaveRoomReq {
    /// game_id, player_id 由qapp协议体取得（接入层针对该参数鉴权）
    /// room_id 由以后台session记录的player_id所在房间为准
}
/*
离开房间返回信息
*/
message LeaveRoomRsp {
    RoomInfo room_info  = 1; /// 房间信息
}

/*
解散房间，即销毁房间请求信息(仅房主可操作)
*/
message DismissRoomReq {
}
/*
解散房间返回信息
*/
message DismissRoomRsp {
}

/*
需要修改的房间属性
*/
enum ChangeRoomOption {
    ROOM_NAME           = 0;
    OWNER               = 1;
    IS_VIEWED           = 2;
    IS_INVITED          = 3;
    IS_PRIVATE          = 4;
    CUSTOM_PROPERTIES   = 5;
    IS_FORBID_JOIN      = 6;
}
/*
房间变更操作请求信息，个别信息需限制房主操作
*/
message ChangeRoomReq {
    string room_name            = 1; /// 房间名称
    string owner                = 2; /// 变更房主
    bool is_private             = 5; /// 是否私有
    string custom_properties    = 6; /// 开发商自定义房间属性
    bool is_forbid_join         = 7; /// 房间是否禁止加人，默认false
    repeated ChangeRoomOption change_room_option_list   = 8; /// [rm-sdk-para] [rm-sdk-para] 修改字段列表
}

/*
房间变更操作返回信息
*/
message ChangeRoomRsp {
     RoomInfo room_info         = 4; /// 变更后的房间信息
}

/*
服务端房间变更操作请求信息
*/
message SvrChangeRoomReq {
    string room_name            = 1; /// 房间名称
    string owner                = 2; /// 变更房主
    bool is_private             = 5; /// 是否私有
    string custom_properties    = 6; /// 开发商自定义房间属性
    bool is_forbid_join         = 7; /// 房间是否禁止加人，默认false
    string room_id              = 8; /// 待变更的房间ID
    repeated ChangeRoomOption change_room_option_list   = 9; /// 修改字段列表
}

/*
服务端房间变更操作返回信息
*/
message SvrChangeRoomRsp {
     RoomInfo room_info         = 4; /// 变更后的房间信息
}

/*
踢人操作请求信息
*/
message RemovePlayerReq {
     string remove_player_id    = 3; /// 要删除的userID
}
/*
踢人操作返回信息
*/
message RemovePlayerRsp {
    RoomInfo room_info          = 1; /// 房间信息
}

/*
服务器踢人操作请求信息
*/
message SvrRemovePlayerReq {
     string room_id             = 1; /// roomID
     string remove_player_id    = 3; /// 要删除的userID
}
/*
服务器踢人操作返回信息
*/
message SvrRemovePlayerRsp {
    RoomInfo room_info          = 1; /// 房间信息
}

/*
查询房间信息请求
*/
message GetRoomByRoomIdReq {
     string room_id             = 1; /// 房间ID、填0则查询用户所在的房间
}
/*
查询房间信息返回
*/
message GetRoomByRoomIdRsp {
     RoomInfo room_info         = 1; /// 房间信息
}

/*
房间内消息发送
*/
message SendToClientReq {
    string room_id                      = 1; /// [rm-sdk-para] 房间ID
    repeated string recv_player_list    = 2; /// 接收信息的用户列表
    string msg                      = 3; /// 消息详细内容
}
/*
房间内消息返回
*/
message SendToClientRsp {
    /// 无
}

/*
更改用户状态请求
*/
message ChangeCustomPlayerStatusReq {
    uint64 custom_player_status     = 1; /// 用户自定义状态状态
}
/*
更改用户状态返回
*/
message ChangeCustomPlayerStatusRsp {
    RoomInfo room_info              = 1; /// 房间信息
}

/*
服务端更改用户状态请求
*/
message SvrChangeCustomPlayerStatusReq {
    uint64 custom_player_status     = 1; /// 用户自定义状态状态
}
/*
服务端更改用户状态返回
*/
message SvrChangeCustomPlayerStatusRsp {
    RoomInfo room_info              = 1; /// 房间信息
}

/*
更改用户网络状态请求
*/
message ChangePlayerNetworkStateReq {
    NetworkState network_state      = 1; /// 网络状态
}
message ChangePlayerNetworkStateRsp {
    RoomInfo room_info              = 1; /// 房间信息
}

/*
拉取房间列表
*/
message GetRoomListReq {
    string game_id      = 1; /// [rm-sdk-para] 游戏ID
    uint32 page_no      = 2; /// 一页大小
    uint32 page_size    = 3; /// 页数
    string room_type    = 4; /// 房间类型, 传"" 拉去所有类型
    bool is_desc        = 5; /// 按照房间创建时间倒序，默认顺序
}
message GetRoomListRsp {
    string game_id              = 1; /// 游戏ID
    repeated RoomInfo room_list = 2; /// 房间列表
    uint64 total                = 3; /// 房间数量
}

//////////////////////////////////////////////////////************匹配服务************///////////////////////////////////////

/*
房间匹配 简单模式
*/
message MatchRoomSimpleReq {
    string room_type                = 1; /// 房间类型
    uint64 max_players              = 2; /// 最大房间人数
    PlayerInfo player_info          = 3; /// 匹配的用户信息
}
message MatchRoomSimpleRsp {
    RoomInfo room_info  =   1; ///加入/创建房间的信息
}

/*
房间匹配 复杂模式
*/
message MatchRoomComplexReq {
    /// 待定-规划中
}
message MatchRoomComplexRsp {
    /// 待定-规划中
}

/*
玩家匹配 简单模式
*/
message MatchPlayersSimpleReq {
    ///待定-规划中
}
message MatchPlayersSimpleRsp {
    /// 待定-规划中
}

/*
玩家匹配 复杂模式
*/
/* 个人或团队的匹配状态*/
enum MatchStatus {
    PENDING = 0;
    MATCHING = 1;
    SUCCESS = 3;
    TIMEOUT = 4;
}

/// 个人或者团队的匹配属性
message MatchAttribute {
    string name = 1; ///  属性名
    int32 value = 2; ///  属性值
}

/*
玩家匹配
    player信息
*/
message MatchPlayerInfo {
    string id                            = 1; /// [rm-sdk-para] openid - player_id
    string name                          = 2; /// 用户名字
    uint64 custom_player_status                 = 3; /// 用户状态，客户端透传
    string custom_profile                       = 4; /// 用户的其他属性信息
    repeated MatchAttribute match_attributes    = 5; /// 属性列表
    MatchStatus match_status                    = 6; /// [rm-sdk-para] bk：匹配状态
    string team_id                              = 7; /// [rm-sdk-para] bk：团队id
    string region                               = 8; /// [rm-sdk-para] bk：玩家现在所处的匹配区域
    string team_leader                          = 9; /// [rm-sdk-para] bk：队长的openId
    string sdk_version                          = 10; /// [rm-sdk-para] bk：sdk版本号，为机器人做兼容（1.1.4 => 1.2.0）
    string group_id                             = 11; /// [rm-sdk-para] bk：player set id
     
    string team_type                            = 12; /// [rm-sdk-para] bk：非对称匹配队伍类型
    string request_id                           = 13; /// [rm-sdk-para] bk：匹配请求id，用于更新匹配进度
}

message MatchGroupPlayerInfo {
    string id                            = 1; ///  openid - player_id
    string name                          = 2; /// 用户名字
    uint64 custom_player_status                 = 3; /// 用户状态，客户端透传
    string custom_profile                       = 4; /// 用户的其他属性信息
    repeated MatchAttribute match_attributes    = 5; /// 属性列表
    MatchStatus match_status                    = 6; /// [rm-sdk-para] bk：匹配状态
    string team_id                              = 7; /// [rm-sdk-para] bk：团队id
    string region                               = 8; /// [rm-sdk-para] bk：玩家现在所处的匹配区域
    string team_leader                          = 9; /// [rm-sdk-para] bk：队长的openId
    string sdk_version                          = 10; /// [rm-sdk-para] bk：sdk版本号，为机器人做兼容（1.1.4 => 1.2.0）
    string group_id                             = 11; /// [rm-sdk-para] bk：player set id
     
    string team_type                            = 12; /// [rm-sdk-para] bk：非对称匹配队伍类型
    string request_id                           = 13; /// [rm-sdk-para] bk：匹配请求id，用于更新匹配进度
}

/*
玩家集合(好友组队)
    邀请好友，组成group进行匹配, player结构关系：
    player ==> group ==> team ==> room
    [rm-sdk-para]
*/
message MatchGroupInfo {
    string id                                   = 1; /// [rm-sdk-para] bk：集合id（s_ld_tsp）
    string leader                               = 2; /// [rm-sdk-para] bk：队长 playerId
    repeated string player_id_list              = 3; /// [rm-sdk-para] bk：集合所有成员 playerId (适配)
    repeated MatchPlayerInfo player_info_list   = 4;  /// [rm-sdk-para] bk：集合中玩家信息列表（兼容数据传递）
    repeated MatchAttribute match_attributes    = 5; /// [rm-sdk-para] bk：属性列表（avg of each player.attr）
    string region                               = 6; /// [rm-sdk-para] bk：玩家现在所处的匹配区域
    string sdk_version                          = 7; /// [rm-sdk-para] bk：sdk版本号，为机器人做兼容（1.1.4 => 1.2.0）
    string team_id                              = 8; /// [rm-sdk-para] bk：加入到队伍的id
    /// todo-v9 match_request_id
    /// todo-v9 team_type == rule.teams.team_name
    string team_type                            = 12; /// [rm-sdk-para] bk：非对称匹配队伍类型
    string request_id                           = 13; /// [rm-sdk-para] bk：匹配请求id，用于更新匹配进度
    /// todo-v13 group发起匹配的时间，以该时间判定玩家是否匹配超时，填充机器人
    uint64 start_match_time                     = 14; ///  [rm-sdk-para] bk：发起匹配的时间 秒
    /// v13 match-robot
    bool is_robot                               = 15; /// bk: 用于在构造纯机器人队列, 只用于服务端标识
}

/*
Team 构造方式：
都是单人构造成的team
都是Group组成的team
*/
///enum TeamConstituteMode {
///    TCM_ALL_PLAYER = 0; /// [rm-sdk-para] bk：全部单人Player
///    TCM_ALL_GROUP = 1;  /// [rm-sdk-para] bk：全部Group
///}

/*
玩家匹配
    team信息
    [rm-sdk-para]
*/
message MatchTeamInfo{
    string team_id              = 1; /// 队伍id t_ld_tsp
    string team_name            = 2; /// 用户名字
    string team_leader          = 3; /// 队长 playerId
    /// [rm-sdk-para] bk：来自单人匹配的PlayerId
    repeated string members     = 4; /// [rm-sdk-para] bk: [废弃] 队友列表-全量的成员playerId
    repeated MatchAttribute match_attributes    = 5; /// 属性列表
    repeated string member_sdk_versions         = 6; /// [rm-sdk-para] bk：单player sdk版本号，为机器人做兼容（1.1.4 => 1.2.0）
    repeated string group_ids                   = 7; /// [rm-sdk-para] bk：player set id list /// [rm-sdk-para] bk：来自Group的GroupId，
    repeated string group_sdk_versions          = 8; /// [rm-sdk-para] bk：group sdk版本号，为机器人做兼容（1.1.4 => 1.2.0）
    ///TeamConstituteMode team_constitute_mode     = 9; /// [rm-sdk-para] bk：组成队伍的方式(兼容字段)
    /// -v9 team_type == rule.teams.team_name
    string team_type                            = 12; /// [rm-sdk-para] bk：非对称匹配队伍类型
}

/*
玩家进度信息
[rm-sdk-para]
*/
message ProgressPlayerInfo {
    string player_id = 1;
    string team_name = 2;
    repeated MatchAttribute match_attributes = 3;
    uint64 start_match_time = 4;
}

/*
匹配结果：对局-队伍数据
[rm-sdk-para]
*/
message MatchmakerTeam {
    string name = 1; /// team_name 队伍名
    repeated  ProgressPlayerInfo players = 2; /// 玩家匹配进度信息
}

/*
匹配结果：对局数据
[rm-sdk-para]
*/
message MatchmakerData {
    string match_id = 1; /// match result 对局Id，可以关联多个matchRequestId
    repeated MatchmakerTeam teams = 2;
}

/*
匹配结果放置的类别
[rm-sdk-para]
*/
enum MatchPlacementType {
    MP_MGOBE        = 0;    /// [rm-sdk-para] bk：小游戏创房
    MP_GSE          = 1;    /// [rm-sdk-para] bk：GSE创建game-session
    MP_THIRDPARTY   = -1;    /// [rm-sdk-para] bk：第三方push
}

/*
 placement 过程状态
[rm-sdk-para]
*/
enum PlacementStatus {
    /// 复用 gse placement 状态 0-6
    PS_UNKNOW = 0;
    PS_PENDING = 2;
    PS_FULFILLED = 3;
    PS_CANCELLED = 4;
    PS_TIMED_OUT = 5;
    PS_FAILED = 6;
    /// 异步等待超时 mgobe 侧增加的，100开始
    PS_TIMED_OUT_MQ = 100;
    PS_PLACE_MATCH_FAIL = 101;
}

/*
 placement 过程信息数据
[rm-sdk-para]
*/
message MatchPlacementInfo {
    string game_id      = 1;
    string match_code   = 2;
    string match_id     = 3;
    MatchPlacementType type = 4;            /// MP_MGOBE / MP_GSE / MP_THIRDPARTY
    CreateRoomReq create_room_req = 5;      /// matchmaking 构建的匹配创房请求
    string matchmaker_data_json = 6;        /// matchmaker结果数据，采用json串存储，方便业务使用：team-player-attr json str
    ///MatchmakerData matchmaker_data = 7;
    /// 结果数据
    PlacementStatus status = 8;         /// 进度状态
    ///status=PS_FULFILLED，需要按照type设置result mgobe-roominfo/3rd-none/gse-gamesession
    bytes result_body = 9;  /// MgobePlacementResult/GsePlacementResult/ThirdpartyPlacementResult

    /// 考虑已经将各个渠道抽象出一个独立的 XxxPlacementResult,已经具备明确的协议映射。
    /// 这里再用bytes result_body会增加业务的序列化成本，也不够明确，所以改为以下模式：
    /// type=MP_MGOBE placement结果
    ///MgobePlacementResult mgobe_placement_result = 10;
    /// type=MP_GSE placement结果
    ///GsePlacementResult gse_placement_result = 11;
    /// type=MP_THIRDPARTY placement结果
    ///ThirdpartyPlacementResult thirdparty_placement_result = 12;
}

/*
 mgobe placement job
[rm-sdk-para]
*/
message MgobePlacementJob {
    CreateRoomReq create_room_req   = 1;  /// matchmaking构建的匹配创房请求
}
/*
 mgobe placement job result
[rm-sdk-para]
*/
message MgobePlacementResult {
    /// 创建的房间信息
    RoomInfo room_info = 1;
}

/*
 gse placement job
[rm-sdk-para]
*/
message GsePlacementJob {
   CreateRoomReq create_room_req   = 1;  /// matchmaking构建的匹配创房请求
   string matchmaker_data           = 2;         /// team-player-attr json str
}
/*
 gse placement job result
[rm-sdk-para]
*/
message GsePlacementResult {
    /// gse 游戏会话
    GseGameSession gse_game_session = 1;
}

/*
第三方 placement job
[rm-sdk-para]
*/
message ThirdpartyPlacementJob {
    /// 当前并无具体数据
}
/*
第三方 placement job result
[rm-sdk-para]
*/
message ThirdpartyPlacementResult {
    /// 当前并无具体数据
}

///======GSE======
/*
玩家延迟信息
[rm-sdk-para]
*/
message GsePlayerLatency {
    uint32 latency_in_milliseconds = 1;     /// 毫秒级延迟-可选
    string player_id = 2;                   /// 玩家Id-可选
    string region_identifier = 3;           /// 延迟对应的区域名称-可选
}
/*
游戏属性详情
[rm-sdk-para]
*/
message GseGameProperty {
    string key = 1;     /// 属性名称（键）
    string value = 2;   /// 属性值（值）
}
/*
部署的玩家游戏会话
[rm-sdk-para]
*/
message GsePlacedPlayerSession {
    string player_id = 1;           /// 玩家Id
    string player_session_id = 2;   /// 玩家会话Id
}
/*
游戏会话部署对象 Gse placement result: game session
[rm-sdk-para]
*/
message GseGameSession {
    string placement_id     = 1;        /// 部署id
    string game_server_session_queue_name = 2;      /// 服务部署组名称
    repeated GsePlayerLatency player_latencies  = 3;    /// 玩家延迟
    PlacementStatus status  = 4;    /// 服务部署状态
    string dns_name         = 5;    /// 分配给正在运行游戏会话的实例的DNS标识符
    string game_server_session_id       = 6;    /// 游戏会话Id
    string game_server_session_name     = 7;    /// 游戏会话名称
    string game_server_session_region   = 8;    /// 服务部署区域
    repeated GseGameProperty game_properties = 9;     /// 游戏属性
    uint32 maximum_player_session_count = 10;   /// 最大玩家数量
    string game_server_session_data     = 11;   /// 游戏会话数据
    string ip_address       = 12;   /// 运行游戏会话的实例的IP地址
    uint32 port             = 13;   /// 运行游戏会话的实例的端口号
    string matchmaker_data  = 14;   /// 游戏匹配数据
    repeated GsePlacedPlayerSession placed_player_sessions = 15;    /// 部署的玩家游戏数据
    uint64 start_time       = 16;   /// 开始时间
    uint64 end_time         = 17;   /// 结束时间
}
///======GSE======End

/*
 放置（place）对局（match）请求
*/
message PlaceMatchReq {
    string seq      = 1;
    string game_id  = 2;
    string match_id = 3; /// 对局id
    MatchPlacementType type = 4; /// 对局放置类型 MP_MGOBE / MP_GSE / MP_THIRDPARTY
    bytes job_body = 5; /// 对局放置参数 MgobePlacementJob / GsePlacementJob / ThirdpartyPlacementJob
    string match_code = 6; /// 匹配code
}

/// 放置对局响应（异步，为空）
message PlaceMatchRsp {
    /// 同步模式，响应结果
    MatchPlacementResult match_placement_result     = 1;
}

/*
placeMatch结果
MgobePlacementResult/GsePlacementResult/ThirdpartyPlacementResult
[rm-sdk-para]
*/
message MatchPlacementResult {
    string seq      = 1;
    string game_id  = 2;
    string match_id = 3;
    MatchPlacementType type = 4;    /// MP_MGOBE / MP_GSE / MP_THIRDPARTY
    PlacementStatus status = 5;     /// 操作结果：成功、失败、超时...
    /// 如果成功 设置 result body
    bytes result_body = 6;          /// MgobePlacementResult / GsePlacementResult / ThirdpartyPlacementResult
    /// 如果失败，设置 business err code
    int32 err_code            = 7; /// 创房失败的错误码
    string match_code = 8; /// 匹配code
}

/// 异步更新placeMatch结果
message UpdateMatchPlacementResultReq {
    MatchPlacementResult match_placement_result     = 1;
}

/// 异步更新placeMatch结果响应
message UpdateMatchPlacementResultRsp {
    /// nothing
}

/*
cmq message
[rm-sdk-para]
*/
message CmqPlacementResult {
    string placement_id                 = 1;
    MatchPlacementType placement_type   = 2;        /// MP_MGOBE / MP_GSE / MP_THIRDPARTY
    bytes result_body                   = 3;        /// MgobePlacementResult/GsePlacementResult/ThirdpartyPlacementResult
}

///==========

/*
玩家匹配请求
*/
message MatchPlayersReq {
    string match_code               = 2;  /// 玩法id
    MatchPlayerInfo player_info     = 3; /// 匹配的玩家信息
}
/*
玩家匹配响应
*/
message MatchPlayersRsp {
    string match_code       = 1;   /// 玩法id
}

/*
玩家组匹配请求
*/
message MatchGroupReq {
    string match_code                               = 1;  /// 玩法id
    repeated MatchGroupPlayerInfo player_info_list       = 2; /// 好友列表
}
/*
玩家组匹配响应
*/
message MatchGroupRsp {
    string match_code       = 1;   /// 玩法id
}

/*
匹配进度查询
*/
message DescribeMatchReq {
    repeated string request_id_list = 1;    /// 批量请求id进度查询
}

message MatchProgress {
    string request_id      =1;                 /// 请求id
    repeated string player_id_list  =2;                     /// 匹配成功的玩家id列表
    repeated MatchPlayerInfo player_info_list = 3;          /// requestId对应的玩家信息列表
    string status   = 4;                                    /// 匹配状态：SEARCHING / COMPLETED / FAILED / CANCELLED / TIMED_OUT
    uint32 event_type = 5;                                  /// 事件类型：0表示每个requestId使用，1 表示全部匹配上的
    repeated PlayerInfo player_info_success_list = 6;       /// 当 status 为 COMPLETED 并且 event_type 为 1 时 传递总的玩家信息
    repeated TeamInfo team_info_list = 7;                   /// 当 status 为 COMPLETED 并且 event_type 为 1 时 队伍信息列表
    uint64 completed_time = 8;                              /// 当 status 为 COMPLETED 并且 event_type 为 1 时 该字段表示匹配完成时间
    uint64 start_match_time = 9;                            /// 开始匹配的时间
    GameSessionConnectionInfo game_session_connection_info = 10; /// 游戏信息 当 status 为 COMPLETED 时 该字段才有具体数据
}

message DescribeMatchRsp {
    repeated MatchProgress match_progress_list =1;
}

enum MatchType {
    PLAYER_SIMPLE           = 0;        /// 简单玩家匹配 - match_user_simple
    ROOM_SIMPLE             = 1;        ///简单房间匹配 - match_room_simple
    PLAYER_COMPLEX          = 2;        ///复杂玩家匹配 - match_user_complex
}

/*
 玩家匹配
    取消匹配
 */
message CancelPlayerMatchReq {
    MatchType match_type        = 3; /// 匹配类型
}

message CancelPlayerMatchRsp {
    /// 无
}

message ApiMatchGroupReq {
    string match_code                           = 1; /// 匹配code
    repeated MatchPlayerInfo player_info_list   = 2; /// 好友列表
    string request_id				            = 3; /// 请求id 如果客户没填可以拿云api平台的来使用
}

message ApiMatchGroupRsp {
    string request_id				            = 1; /// 请求id 如果客户没填可以拿云api平台的来使用
}

message ApiDescribeMatchReq {
    repeated string request_id_list             = 1; /// 请求id列表
}

message ApiDescribeMatchRsp {
    repeated MatchProgress match_progress_list  = 1; /// 进度信息列表
    string game_id                              = 2; /// 游戏id
    string match_code                           = 3; /// 匹配code
    uint64 start_match_time                     = 4; /// 开始匹配的时间

}

message GameSessionConnectionInfo {                  /// 游戏信息(ges返回)
    string dns_name                             = 1; /// 分配给正在运行游戏会话的实例的DNS标识符注意：此字段可能返回 null，表示取不到有效值。
    string ip_address                           = 2; /// 运行游戏会话的实例的IP地址注意：此字段可能返回 null，表示取不到有效值。
    repeated MatchedPlayerSession matched_player_sessions = 3; /// 游戏玩家信息列表
    int64 port                                  = 4; /// 运行游戏会话的实例的端口号注意：此字段可能返回 null，表示取不到有效值。
}

message MatchedPlayerSession {                       /// 被匹配的完整player
    string player_id                            = 1; /// 玩家ID
    string player_session_id                    = 2; /// 玩家会话ID
}

message StartMatchPlacement {
    string region                               = 1; /// 创建匹配时选择的地域
    string placement_id                         = 2; /// 匹配服务后台分配的id，用于追踪每一次placement请求
    string queue_name                           = 3; /// 创建匹配时选择的队列名
    int64 maximum_player_session_count          = 4; /// 根据匹配规则计算出的游戏对局最大玩家数
    repeated DesiredPlayerSession desired_player_sessions = 5; /// 玩家游戏会话信息 来自发起匹配的参数
    repeated GameProperty game_properties       = 6; /// 游戏属性详情 来自匹配配置
    string match_maker_data                     = 7; /// 匹配数据
}

message DesiredPlayerSession {
    string player_id                            = 1; /// 发起匹配中传入的playerId
    string player_data                          = 2; /// 发起匹配时，MatchGroupPlayerInfoPara组成的string
}

message GameProperty {
    string key                                  = 1; /// 匹配配置的游戏key
    string value                                = 2; /// 匹配配置的游戏value
}

message ApiCancelPlayerMatchReq {
    MatchType match_type                        = 1; /// 匹配类型 MatchType 传 PLAYER_COMPLEX
    repeated string request_id_list             = 2; /// 请求id列表
}

message ApiCancelPlayerMatchRsp {
    repeated string request_id_list             = 1; /// 取消成功的请求id列表
}

////////////////*******end of 匹配服务***************//////////////////

/*****   广播msg抽离返回信息整理（客户端） *****/
/*
 创建房间 - 自定义服务通知
 */
message CreateRoomBst {
    RoomInfo room_info  = 1; /// 新的房间信息
}

/*
销毁房间 - 自定义服务通知
*/
message DestroyRoomBst {
    RoomInfo room_info  = 1; /// 房间信息， 只设置roomid
}

/*
加入房间广播（客户端）
*/
message JoinRoomBst {
    RoomInfo room_info = 1; /// 新的房间信息
    string join_player_id = 2;  /// 加入房间openid
}

/*
退房广播信息（客户端）
*/
message LeaveRoomBst {
    RoomInfo room_info          = 1; /// 新的房间信息
    string leave_player_id      = 2;  /// 离开房间openid
}

/*
踢人广播信息（客户端）
*/
message RemovePlayerBst {
    RoomInfo room_info          = 1; /// 房间信息
    string remove_player_id     = 2; /// 移除的用户openid
}

/*
解散房间广播信息（客户端）
*/
message DismissRoomBst {
    RoomInfo room_info   = 1; /// 房间信息， 只设置roomid
}

/*
房间属性变更广播信息（客户端）
*/
message ChangeRoomBst {
    RoomInfo room_info   = 1; /// 变更后房间信息
}

/*
房间消息信息广播（客户端）
*/
message RecvFromClientBst {
    string room_id          = 1; /// 房间id
    string send_player_id   = 2; /// 发送信息的用户
    string msg              = 3; /// 消息详细内容
}

/*
更改用户状态广播（客户端）
*/
message ChangeCustomPlayerStatusBst {
    string change_player_id             = 1; /// 变更的用户
    uint64 custom_player_status         = 2; /// 用户状态
    RoomInfo room_info                  = 3; /// 房间信息
}

/*
更改用户网络状态广播（客户端）
*/
message ChangePlayerNetworkStateBst {
    string change_player_id             = 1; /// 变更的用户
    NetworkState network_state          = 2; /// 用户状态, 包括房间内状态和游戏中状态两种（客户端区分）
    RoomInfo room_info                  = 3; /// 房间信息
    repeated string group_id_list       = 4; /// 网络状态变更的玩家和接受广播的玩家同在一个对组Id
}

/*
匹配超时广播（客户端）
匹配失败也通过该接口广播，失败原因详见err_code
*/
message MatchTimeoutBst {
    MatchType match_type      = 1; /// 匹配类型
    int32 err_code            = 2; /// 业务错误码，如果非0，表示匹配失败，0表示匹配超时
}

/*
小组取消匹配广播（客户端）
*/
message CancelMatchBst {
    string match_code               = 1;  /// 玩法id
    string player_id                = 2;  /// 发起取消匹配的玩家ID
}

/*
匹配用户广播（客户端）
用户匹配成功，广播给客户端
*/
message MatchPlayersBst {
    MatchType match_type        = 1; /// 匹配类型
    RoomInfo room_info          = 2; /// 新的房间信息
}

/*
开始帧同步的广播
*/
message StartFrameSyncBst {
    RoomInfo room_info  = 1; /// 房间信息
}

/*
结束帧同步的广播
*/
message StopFrameSyncBst {
    RoomInfo room_info  = 1; /// 房间信息
}

///帧同步消息广播
message RecvFrameBst {
    Frame frame    = 1;
}
/*********  广播部分结束    ***********/


/*********自定义扩展服务gamesvr*********/
///=>gamesvr的请求，外层使用命令字GameSvrComm
enum GameSvrForwardType {
    E_GS_FORWARDTYPE_DEFAULT               = 0; /// The first enum value must be zero in proto3.
    E_GS_FORWARDTYPE_NOTIFY_CONNECTION     = 1; /// 通知svr信息
    E_GS_FORWARDTYPE_NOTIFY_ROOM_EVENT     = 2; /// room相关的操作事件通知
    E_GS_FORWARDTYPE_NOTIFY_COM_EVENT      = 3; /// 其他事件通知（预留）
    E_GS_FORWARDTYPE_CLIENT_SENDTO_GAMESVR = 4; /// 转发client->gamesvr的消息
};
message GameSvrCommunication {
    GameSvrForwardType type  = 1;
    bytes body  = 2;
}

message NotifyRelayConnectionReq {
    string room_id  = 1;
    string ip       = 2;
    uint32 port     = 3;
}

message NotifyRoomEventReq {
    ServerSendClientBstWrap2Type cmd    = 1;    ///业务命令字
    bytes msg       = 2;    ///业务body, 比如CreateRoomRsp
}

///给自定义扩展svr发送消息
message SendToGameSvrReq {
    string room_id      = 1; /// [rm-sdk-para]
    string player_id    = 2; /// [rm-sdk-para]
    string data         = 3;
}

message SendToGameSvrRsp {}

///gamesvr反向推送给客户端的消息
message RecvFromGameSvrBst {
    string room_id                  = 1; ///必填
    repeated string recv_player_id_list  = 2; /// 要推送的用户列表, 为空则给对局内所有成员推送
    string data  = 3; /// 推送的内容
}

message ClientRecvFromGameSvrRsp {}

/******end of 自定义扩展服务gamesvr******/


/*===group===*/

/// 队组类型
enum GroupType {
    GROUP_LIMITED   = 0;    /// 玩家只能同时存在于1个该类型队组。
    GROUP_MANY      = 1;    /// 玩家可以同时存在于多个该类型队组
};

/// 队组信息
message GroupInfo {
    string id                           = 1; /// 队组id
    string name                         = 2; /// 队组名称
    GroupType type                      = 3; /// 队组类型
    uint64 max_players                  = 4; /// 队组最大用户数
    string owner                        = 5; /// 队组管理员
    string custom_properties            = 6; /// 自定义队组属性
    uint64 create_time                  = 7; /// 创建时间
    bool is_forbid_join                 = 8; /// 是否禁止加人，默认false
    bool is_persistent                  = 9; /// 是否持久化，默认false
    repeated GroupPlayerInfo group_player_list     = 10; /// 对组内用户列表
}

/// 队组玩家信息
message GroupPlayerInfo {
     string id                                  = 1; /// [rm-sdk-para] 玩家 ID（系统生成）
     string name                                = 2; /// 玩家昵称
     uint64 custom_group_player_status          = 3; /// 自定义玩家状态
     string custom_group_player_profile         = 4; /// 自定义玩家信息
     NetworkState common_group_network_state    = 5; /// [rm-sdk-para] common链路网络状态：0掉线；1在线
}

/// 创建队组请求
message CreateGroupReq {
    string group_name                         = 1; /// 队组名称
    GroupType group_type                      = 2; /// 队组类型
    uint64 max_players                  = 3; /// 队组最大用户数，默认100
    string custom_properties            = 4; /// 自定义队组属性
    GroupPlayerInfo player_info         = 5; /// 用户信息
    bool is_forbid_join                 = 6; /// 是否禁止加人，默认false
    bool is_persistent                  = 7; /// 是否持久化，默认false

}

/// 创建队组响应
message CreateGroupRsp {
    GroupInfo group_info                = 1; /// 队组信息
}

/// 加入队组请求
message JoinGroupReq {
    string group_id                     = 1; /// [rm-sdk-para] 队组ID
    GroupPlayerInfo player_info         = 2; /// 用户信息
}

/// 加入队组响应
message JoinGroupRsp {
    GroupInfo group_info                = 1; /// 队组信息
}

/// 退出队组请求
message LeaveGroupReq {
    string group_id                     = 1; /// [rm-sdk-para] 队组ID
}

/// 推出队组响应
message LeaveGroupRsp {
    GroupInfo group_info                = 1; /// 队组信息
}

/// 解散队组请求
message DismissGroupReq {
    string group_id                     = 1; /// [rm-sdk-para] 队组ID
}

/// 解散队组响应
message DismissGroupRsp {
}

/// 需要修改的队组属性
enum ChangeGroupOption {
    GROUP_NAME          = 0;
    GROUP_OWNER               = 1;
    GROUP_CUSTOM_PROPERTIES   = 2;
    GROUP_IS_FORBID_JOIN      = 3;
}

/// 修改队组请求
message ChangeGroupReq {
    string group_id                     = 1; /// [rm-sdk-para] 队组ID
    string group_name                   = 2; /// 队组名称
    string owner                        = 3; /// 对长ID
    string custom_properties            = 4; /// 自定义队组属性
    bool is_forbid_join                 = 5; /// 是否禁止加入队组
    repeated ChangeGroupOption change_group_option_list      = 6; /// [rm-sdk-para] 修改字段列表
}

/// 修改队组响应
message ChangeGroupRsp {
    GroupInfo group_info                = 1; /// 队组信息
}

/// 移除队组内玩家请求
message RemoveGroupPlayerReq {
    string group_id                     = 1; /// [rm-sdk-para] 队组ID
    string remove_player_id             = 2; /// 要删除的队员ID
}

/// 移除队组内玩家响应
message RemoveGroupPlayerRsp {
    GroupInfo group_info                = 1; /// 队组信息
}

/// 根据ID查询队组请求
message GetGroupByGroupIdReq {
    string group_id                     = 1; /// 队组ID
}

/// 根据ID查询队组响应
message GetGroupByGroupIdRsp {
    GroupInfo group_info                = 1; /// 队组信息
}

/// 查询玩家所有队组请求
message GetMyGroupsReq {
}

/// 查询玩家所有队组响应
message GetMyGroupsRsp {
    repeated GroupInfo group_info_list  = 1; /// 当前玩家全部队组信息
}

/// 修改队组内玩家自定义状态请求
message ChangeCustomGroupPlayerStatusReq {
    string group_id                     = 1; /// [rm-sdk-para] 队组ID
    uint64 custom_group_player_status   = 2; /// 玩家自定义状态
}

/// 修改队组内玩家自定义状态响应
message ChangeCustomGroupPlayerStatusRsp {
    GroupInfo group_info                = 1; /// 队组信息
}

/// 对组消息接收类型
enum GroupRecvType {
    GROUP_NONE          = 0; // [rm] 无
	GROUP_ALL 			= 1; /// 对组内全部玩家
	GROUP_OTHERS 		= 2; /// 队组内除自己外全部玩家
	GROUP_SOME 			= 3; /// 对组内部分玩家（根据 recv_player_list）
}

/// 队组内发送消息给其他玩家请求
message SendToGroupClientReq {
    string group_id                     = 1; /// [rm-sdk-para] 队组ID
    repeated string recv_player_list    = 2; /// 接收信息的用户列表
    string msg                      = 3; /// 消息详细内容
    GroupRecvType recv_type             = 4; /// 接收类型
}

/// 队组内发送消息给其他玩家响应
message SendToGroupClientRsp {
}

/// 对组内玩家掉线事件
message GroupPlayers {
    string group_id = 1;                /// group id
    repeated string player_id_list = 2;  /// group 下所有玩家id
}
/// 触发group侧网络状态变更
message ChangeGroupPlayerNetworkReq {
    NetworkState network_state      = 1; /// 网络状态
    string player_id                = 2;
    string game_id                  = 3;
    string seq                      = 4;
}
/// 响应玩家所在的所有group和成员列表
message ChangeGroupPlayerNetworkRsp {
    repeated GroupPlayers group_players = 1;
}

/// 加入队组广播
message JoinGroupBst {
    GroupInfo group_info                = 1; /// 队组信息
    string join_player_id               = 2; /// 加入队组玩家ID
}

/// 退出组队广播
message LeaveGroupBst {
    GroupInfo group_info                = 1; /// 队组信息
    string leave_player_id              = 2; /// 离开队组玩家ID
}

/// 解散队组广播
message DismissGroupBst {
    GroupInfo group_info                = 1; /// 队组信息
}

/// 修改队组广播
message ChangeGroupBst {
    GroupInfo group_info                = 1; /// 队组信息
}

/// 移除队组内玩家广播
message RemoveGroupPlayerBst {
    GroupInfo group_info                = 1; /// 队组信息
    string remove_player_id             = 2; /// 移除队组玩家ID
}

/// 队组内玩家网络状态变化广播
message ChangeGroupPlayerNetworkStateBst {
    GroupInfo group_info                = 1; /// 队组信息
    string change_player_id             = 2; /// 网络状态变化的玩家ID
    NetworkState network_state          = 3; /// 网络状态
}

/// 队组内玩家自定义状态变化广播
message ChangeCustomGroupPlayerStatusBst {
    GroupInfo group_info                = 1; /// 队组信息
    string change_player_id             = 2; /// 状态变化的玩家ID
    uint64 custom_group_player_status   = 3; /// 状态
}

/// 收到队组内其他玩家消息广播
message RecvFromGroupClientBst {
    string group_id          = 1; /// 队组id
    string send_player_id    = 2; /// 发送信息的用户
    string msg               = 3; /// 消息详细内容
}
